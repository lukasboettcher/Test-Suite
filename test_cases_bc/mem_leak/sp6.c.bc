; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6.c'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._list = type { %struct._list* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !14 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !23
  ret void, !dbg !24
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !25 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !26, metadata !DIExpression()), !dbg !27
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !30
  ret void, !dbg !31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !32 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !33, metadata !DIExpression()), !dbg !34
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !35, metadata !DIExpression()), !dbg !36
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !37
  ret void, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !39 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !40, metadata !DIExpression()), !dbg !41
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !44
  ret void, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !46 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !47, metadata !DIExpression()), !dbg !48
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !51
  ret void, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !53 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !54, metadata !DIExpression()), !dbg !55
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !58
  ret void, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !60 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %0 = load i32, i32* %n.addr, align 4, !dbg !66
  %conv = sext i32 %0 to i64, !dbg !66
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !67
  ret i8* %call, !dbg !68
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !69 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !70, metadata !DIExpression()), !dbg !71
  %0 = load i32, i32* %n.addr, align 4, !dbg !72
  %conv = sext i32 %0 to i64, !dbg !72
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !73
  ret i8* %call, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !75 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %0 = load i32, i32* %n.addr, align 4, !dbg !78
  %conv = sext i32 %0 to i64, !dbg !78
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !79
  ret i8* %call, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !81 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %0 = load i32, i32* %n.addr, align 4, !dbg !84
  %conv = sext i32 %0 to i64, !dbg !84
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !85
  ret i8* %call, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !87 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, i32* %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !91
  ret i8* %call, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, i32* %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !97
  ret i8* %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, i32* %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !103
  ret i8* %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !105 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !108, metadata !DIExpression()), !dbg !109
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !112
  ret void, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !114 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !119, metadata !DIExpression()), !dbg !120
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !121, metadata !DIExpression()), !dbg !122
  ret void, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !124 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !125, metadata !DIExpression()), !dbg !126
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !127, metadata !DIExpression()), !dbg !128
  ret void, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !130 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !133, metadata !DIExpression()), !dbg !134
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !135, metadata !DIExpression()), !dbg !136
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !137, metadata !DIExpression()), !dbg !138
  ret void, !dbg !139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !140 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !143, metadata !DIExpression()), !dbg !144
  ret void, !dbg !145
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !146 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !147, metadata !DIExpression()), !dbg !148
  %0 = load i8*, i8** %str.addr, align 8, !dbg !149
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !150
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !151
  %call2 = call i32 @getchar(), !dbg !152
  ret void, !dbg !153
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !154 {
entry:
  ret void, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct._list* @make_list(i32 %n) #0 !dbg !158 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %hd = alloca %struct._list*, align 8
  %p = alloca %struct._list*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !161, metadata !DIExpression()), !dbg !162
  call void @llvm.dbg.declare(metadata i32* %i, metadata !163, metadata !DIExpression()), !dbg !164
  call void @llvm.dbg.declare(metadata %struct._list** %hd, metadata !165, metadata !DIExpression()), !dbg !166
  %call = call i8* @SAFEMALLOC(i32 8), !dbg !167
  %0 = bitcast i8* %call to %struct._list*, !dbg !168
  store %struct._list* %0, %struct._list** %hd, align 8, !dbg !166
  call void @llvm.dbg.declare(metadata %struct._list** %p, metadata !169, metadata !DIExpression()), !dbg !170
  %1 = load %struct._list*, %struct._list** %hd, align 8, !dbg !171
  store %struct._list* %1, %struct._list** %p, align 8, !dbg !170
  %2 = load %struct._list*, %struct._list** %hd, align 8, !dbg !172
  ret %struct._list* %2, !dbg !173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_list(%struct._list* %hd) #0 !dbg !174 {
entry:
  %hd.addr = alloca %struct._list*, align 8
  %p = alloca %struct._list*, align 8
  store %struct._list* %hd, %struct._list** %hd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list** %hd.addr, metadata !177, metadata !DIExpression()), !dbg !178
  call void @llvm.dbg.declare(metadata %struct._list** %p, metadata !179, metadata !DIExpression()), !dbg !180
  br label %while.cond, !dbg !181

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct._list*, %struct._list** %hd.addr, align 8, !dbg !182
  %cmp = icmp ne %struct._list* %0, null, !dbg !183
  br i1 %cmp, label %while.body, label %while.end, !dbg !181

while.body:                                       ; preds = %while.cond
  %1 = load %struct._list*, %struct._list** %hd.addr, align 8, !dbg !184
  %next = getelementptr inbounds %struct._list, %struct._list* %1, i32 0, i32 0, !dbg !186
  %2 = load %struct._list*, %struct._list** %next, align 8, !dbg !186
  store %struct._list* %2, %struct._list** %p, align 8, !dbg !187
  %3 = load %struct._list*, %struct._list** %hd.addr, align 8, !dbg !188
  %4 = bitcast %struct._list* %3 to i8*, !dbg !188
  call void @free(i8* %4) #4, !dbg !189
  %5 = load %struct._list*, %struct._list** %p, align 8, !dbg !190
  store %struct._list* %5, %struct._list** %hd.addr, align 8, !dbg !191
  br label %while.cond, !dbg !181, !llvm.loop !192

while.end:                                        ; preds = %while.cond
  ret void, !dbg !194
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !195 {
entry:
  %l = alloca %struct._list*, align 8
  call void @llvm.dbg.declare(metadata %struct._list** %l, metadata !196, metadata !DIExpression()), !dbg !197
  %call = call %struct._list* @make_list(i32 10), !dbg !198
  store %struct._list* %call, %struct._list** %l, align 8, !dbg !197
  %0 = load %struct._list*, %struct._list** %l, align 8, !dbg !199
  call void @free_list(%struct._list* %0), !dbg !200
  ret void, !dbg !201
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!10, !11, !12}
!llvm.ident = !{!13}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 11.0.0-2~ubuntu20.04.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "list", file: !5, line: 13, baseType: !6)
!5 = !DIFile(filename: "src/mem_leak/sp6.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_list", file: !5, line: 11, size: 64, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7, file: !5, line: 12, baseType: !6, size: 64)
!10 = !{i32 7, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{!"Ubuntu clang version 11.0.0-2~ubuntu20.04.1"}
!14 = distinct !DISubprogram(name: "MUSTALIAS", scope: !15, file: !15, line: 4, type: !16, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!15 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!16 = !DISubroutineType(types: !17)
!17 = !{null, !18, !18}
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!19 = !DILocalVariable(name: "p", arg: 1, scope: !14, file: !15, line: 4, type: !18)
!20 = !DILocation(line: 4, column: 22, scope: !14)
!21 = !DILocalVariable(name: "q", arg: 2, scope: !14, file: !15, line: 4, type: !18)
!22 = !DILocation(line: 4, column: 31, scope: !14)
!23 = !DILocation(line: 5, column: 3, scope: !14)
!24 = !DILocation(line: 6, column: 1, scope: !14)
!25 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !15, file: !15, line: 8, type: !16, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!26 = !DILocalVariable(name: "p", arg: 1, scope: !25, file: !15, line: 8, type: !18)
!27 = !DILocation(line: 8, column: 25, scope: !25)
!28 = !DILocalVariable(name: "q", arg: 2, scope: !25, file: !15, line: 8, type: !18)
!29 = !DILocation(line: 8, column: 34, scope: !25)
!30 = !DILocation(line: 9, column: 3, scope: !25)
!31 = !DILocation(line: 10, column: 1, scope: !25)
!32 = distinct !DISubprogram(name: "MAYALIAS", scope: !15, file: !15, line: 12, type: !16, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!33 = !DILocalVariable(name: "p", arg: 1, scope: !32, file: !15, line: 12, type: !18)
!34 = !DILocation(line: 12, column: 21, scope: !32)
!35 = !DILocalVariable(name: "q", arg: 2, scope: !32, file: !15, line: 12, type: !18)
!36 = !DILocation(line: 12, column: 30, scope: !32)
!37 = !DILocation(line: 13, column: 3, scope: !32)
!38 = !DILocation(line: 14, column: 1, scope: !32)
!39 = distinct !DISubprogram(name: "NOALIAS", scope: !15, file: !15, line: 16, type: !16, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!40 = !DILocalVariable(name: "p", arg: 1, scope: !39, file: !15, line: 16, type: !18)
!41 = !DILocation(line: 16, column: 20, scope: !39)
!42 = !DILocalVariable(name: "q", arg: 2, scope: !39, file: !15, line: 16, type: !18)
!43 = !DILocation(line: 16, column: 29, scope: !39)
!44 = !DILocation(line: 17, column: 3, scope: !39)
!45 = !DILocation(line: 18, column: 1, scope: !39)
!46 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !15, file: !15, line: 20, type: !16, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!47 = !DILocalVariable(name: "p", arg: 1, scope: !46, file: !15, line: 20, type: !18)
!48 = !DILocation(line: 20, column: 34, scope: !46)
!49 = !DILocalVariable(name: "q", arg: 2, scope: !46, file: !15, line: 20, type: !18)
!50 = !DILocation(line: 20, column: 43, scope: !46)
!51 = !DILocation(line: 21, column: 3, scope: !46)
!52 = !DILocation(line: 22, column: 1, scope: !46)
!53 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !15, file: !15, line: 24, type: !16, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!54 = !DILocalVariable(name: "p", arg: 1, scope: !53, file: !15, line: 24, type: !18)
!55 = !DILocation(line: 24, column: 33, scope: !53)
!56 = !DILocalVariable(name: "q", arg: 2, scope: !53, file: !15, line: 24, type: !18)
!57 = !DILocation(line: 24, column: 42, scope: !53)
!58 = !DILocation(line: 25, column: 3, scope: !53)
!59 = !DILocation(line: 26, column: 1, scope: !53)
!60 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !15, file: !15, line: 29, type: !61, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!61 = !DISubroutineType(types: !62)
!62 = !{!18, !63}
!63 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!64 = !DILocalVariable(name: "n", arg: 1, scope: !60, file: !15, line: 29, type: !63)
!65 = !DILocation(line: 29, column: 22, scope: !60)
!66 = !DILocation(line: 30, column: 17, scope: !60)
!67 = !DILocation(line: 30, column: 10, scope: !60)
!68 = !DILocation(line: 30, column: 3, scope: !60)
!69 = distinct !DISubprogram(name: "PLKMALLOC", scope: !15, file: !15, line: 33, type: !61, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!70 = !DILocalVariable(name: "n", arg: 1, scope: !69, file: !15, line: 33, type: !63)
!71 = !DILocation(line: 33, column: 21, scope: !69)
!72 = !DILocation(line: 34, column: 17, scope: !69)
!73 = !DILocation(line: 34, column: 10, scope: !69)
!74 = !DILocation(line: 34, column: 3, scope: !69)
!75 = distinct !DISubprogram(name: "NFRMALLOC", scope: !15, file: !15, line: 37, type: !61, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!76 = !DILocalVariable(name: "n", arg: 1, scope: !75, file: !15, line: 37, type: !63)
!77 = !DILocation(line: 37, column: 21, scope: !75)
!78 = !DILocation(line: 38, column: 17, scope: !75)
!79 = !DILocation(line: 38, column: 10, scope: !75)
!80 = !DILocation(line: 38, column: 3, scope: !75)
!81 = distinct !DISubprogram(name: "CLKMALLOC", scope: !15, file: !15, line: 41, type: !61, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!82 = !DILocalVariable(name: "n", arg: 1, scope: !81, file: !15, line: 41, type: !63)
!83 = !DILocation(line: 41, column: 21, scope: !81)
!84 = !DILocation(line: 42, column: 17, scope: !81)
!85 = !DILocation(line: 42, column: 10, scope: !81)
!86 = !DILocation(line: 42, column: 3, scope: !81)
!87 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !15, file: !15, line: 45, type: !61, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!88 = !DILocalVariable(name: "n", arg: 1, scope: !87, file: !15, line: 45, type: !63)
!89 = !DILocation(line: 45, column: 21, scope: !87)
!90 = !DILocation(line: 46, column: 17, scope: !87)
!91 = !DILocation(line: 46, column: 10, scope: !87)
!92 = !DILocation(line: 46, column: 3, scope: !87)
!93 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !15, file: !15, line: 49, type: !61, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !15, line: 49, type: !63)
!95 = !DILocation(line: 49, column: 21, scope: !93)
!96 = !DILocation(line: 50, column: 17, scope: !93)
!97 = !DILocation(line: 50, column: 10, scope: !93)
!98 = !DILocation(line: 50, column: 3, scope: !93)
!99 = distinct !DISubprogram(name: "LEAKFN", scope: !15, file: !15, line: 53, type: !61, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !15, line: 53, type: !63)
!101 = !DILocation(line: 53, column: 18, scope: !99)
!102 = !DILocation(line: 54, column: 17, scope: !99)
!103 = !DILocation(line: 54, column: 10, scope: !99)
!104 = !DILocation(line: 54, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "RC_ACCESS", scope: !15, file: !15, line: 63, type: !106, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!106 = !DISubroutineType(types: !107)
!107 = !{null, !63, !63}
!108 = !DILocalVariable(name: "id", arg: 1, scope: !105, file: !15, line: 63, type: !63)
!109 = !DILocation(line: 63, column: 20, scope: !105)
!110 = !DILocalVariable(name: "flags", arg: 2, scope: !105, file: !15, line: 63, type: !63)
!111 = !DILocation(line: 63, column: 28, scope: !105)
!112 = !DILocation(line: 64, column: 3, scope: !105)
!113 = !DILocation(line: 65, column: 1, scope: !105)
!114 = distinct !DISubprogram(name: "CXT_THREAD", scope: !15, file: !15, line: 75, type: !115, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!115 = !DISubroutineType(types: !116)
!116 = !{null, !63, !117}
!117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !118, size: 64)
!118 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!119 = !DILocalVariable(name: "thdid", arg: 1, scope: !114, file: !15, line: 75, type: !63)
!120 = !DILocation(line: 75, column: 21, scope: !114)
!121 = !DILocalVariable(name: "cxt", arg: 2, scope: !114, file: !15, line: 75, type: !117)
!122 = !DILocation(line: 75, column: 34, scope: !114)
!123 = !DILocation(line: 77, column: 1, scope: !114)
!124 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !15, file: !15, line: 78, type: !115, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!125 = !DILocalVariable(name: "thdid", arg: 1, scope: !124, file: !15, line: 78, type: !63)
!126 = !DILocation(line: 78, column: 21, scope: !124)
!127 = !DILocalVariable(name: "cxt", arg: 2, scope: !124, file: !15, line: 78, type: !117)
!128 = !DILocation(line: 78, column: 33, scope: !124)
!129 = !DILocation(line: 80, column: 1, scope: !124)
!130 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !15, file: !15, line: 81, type: !131, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!131 = !DISubroutineType(types: !132)
!132 = !{null, !63, !117, !117}
!133 = !DILocalVariable(name: "thdid", arg: 1, scope: !130, file: !15, line: 81, type: !63)
!134 = !DILocation(line: 81, column: 26, scope: !130)
!135 = !DILocalVariable(name: "cxt", arg: 2, scope: !130, file: !15, line: 81, type: !117)
!136 = !DILocation(line: 81, column: 38, scope: !130)
!137 = !DILocalVariable(name: "lev", arg: 3, scope: !130, file: !15, line: 81, type: !117)
!138 = !DILocation(line: 81, column: 49, scope: !130)
!139 = !DILocation(line: 83, column: 1, scope: !130)
!140 = distinct !DISubprogram(name: "LOCK", scope: !15, file: !15, line: 85, type: !141, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!141 = !DISubroutineType(types: !142)
!142 = !{null, !117}
!143 = !DILocalVariable(name: "lockname", arg: 1, scope: !140, file: !15, line: 85, type: !117)
!144 = !DILocation(line: 85, column: 17, scope: !140)
!145 = !DILocation(line: 87, column: 1, scope: !140)
!146 = distinct !DISubprogram(name: "PAUSE", scope: !15, file: !15, line: 89, type: !141, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!147 = !DILocalVariable(name: "str", arg: 1, scope: !146, file: !15, line: 89, type: !117)
!148 = !DILocation(line: 89, column: 18, scope: !146)
!149 = !DILocation(line: 90, column: 18, scope: !146)
!150 = !DILocation(line: 90, column: 3, scope: !146)
!151 = !DILocation(line: 91, column: 3, scope: !146)
!152 = !DILocation(line: 92, column: 3, scope: !146)
!153 = !DILocation(line: 93, column: 1, scope: !146)
!154 = distinct !DISubprogram(name: "deref", scope: !15, file: !15, line: 111, type: !155, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!155 = !DISubroutineType(types: !156)
!156 = !{null}
!157 = !DILocation(line: 111, column: 20, scope: !154)
!158 = distinct !DISubprogram(name: "make_list", scope: !5, file: !5, line: 15, type: !159, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!159 = !DISubroutineType(types: !160)
!160 = !{!4, !63}
!161 = !DILocalVariable(name: "n", arg: 1, scope: !158, file: !5, line: 15, type: !63)
!162 = !DILocation(line: 15, column: 20, scope: !158)
!163 = !DILocalVariable(name: "i", scope: !158, file: !5, line: 16, type: !63)
!164 = !DILocation(line: 16, column: 8, scope: !158)
!165 = !DILocalVariable(name: "hd", scope: !158, file: !5, line: 17, type: !4)
!166 = !DILocation(line: 17, column: 9, scope: !158)
!167 = !DILocation(line: 17, column: 20, scope: !158)
!168 = !DILocation(line: 17, column: 14, scope: !158)
!169 = !DILocalVariable(name: "p", scope: !158, file: !5, line: 18, type: !4)
!170 = !DILocation(line: 18, column: 9, scope: !158)
!171 = !DILocation(line: 18, column: 13, scope: !158)
!172 = !DILocation(line: 26, column: 15, scope: !158)
!173 = !DILocation(line: 26, column: 8, scope: !158)
!174 = distinct !DISubprogram(name: "free_list", scope: !5, file: !5, line: 29, type: !175, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!175 = !DISubroutineType(types: !176)
!176 = !{null, !4}
!177 = !DILocalVariable(name: "hd", arg: 1, scope: !174, file: !5, line: 29, type: !4)
!178 = !DILocation(line: 29, column: 21, scope: !174)
!179 = !DILocalVariable(name: "p", scope: !174, file: !5, line: 30, type: !4)
!180 = !DILocation(line: 30, column: 11, scope: !174)
!181 = !DILocation(line: 31, column: 7, scope: !174)
!182 = !DILocation(line: 31, column: 14, scope: !174)
!183 = !DILocation(line: 31, column: 17, scope: !174)
!184 = !DILocation(line: 32, column: 13, scope: !185)
!185 = distinct !DILexicalBlock(scope: !174, file: !5, line: 31, column: 23)
!186 = !DILocation(line: 32, column: 17, scope: !185)
!187 = !DILocation(line: 32, column: 11, scope: !185)
!188 = !DILocation(line: 33, column: 20, scope: !185)
!189 = !DILocation(line: 33, column: 15, scope: !185)
!190 = !DILocation(line: 34, column: 20, scope: !185)
!191 = !DILocation(line: 34, column: 18, scope: !185)
!192 = distinct !{!192, !181, !193}
!193 = !DILocation(line: 35, column: 13, scope: !174)
!194 = !DILocation(line: 36, column: 1, scope: !174)
!195 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 38, type: !155, scopeLine: 38, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!196 = !DILocalVariable(name: "l", scope: !195, file: !5, line: 39, type: !4)
!197 = !DILocation(line: 39, column: 10, scope: !195)
!198 = !DILocation(line: 39, column: 14, scope: !195)
!199 = !DILocation(line: 40, column: 15, scope: !195)
!200 = !DILocation(line: 40, column: 5, scope: !195)
!201 = !DILocation(line: 41, column: 1, scope: !195)
