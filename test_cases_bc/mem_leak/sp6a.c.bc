; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp6a.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6a.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._list = type { %struct._list* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !16 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !21, metadata !DIExpression()), !dbg !22
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !25
  ret void, !dbg !26
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !27 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !28, metadata !DIExpression()), !dbg !29
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !32
  ret void, !dbg !33
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !34 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !35, metadata !DIExpression()), !dbg !36
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !39
  ret void, !dbg !40
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !41 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !42, metadata !DIExpression()), !dbg !43
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !44, metadata !DIExpression()), !dbg !45
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !46
  ret void, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !48 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !49, metadata !DIExpression()), !dbg !50
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !53
  ret void, !dbg !54
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !55 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !56, metadata !DIExpression()), !dbg !57
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !60
  ret void, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !62 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %0 = load i32, i32* %n.addr, align 4, !dbg !68
  %conv = sext i32 %0 to i64, !dbg !68
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !69
  ret i8* %call, !dbg !70
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !71 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !72, metadata !DIExpression()), !dbg !73
  %0 = load i32, i32* %n.addr, align 4, !dbg !74
  %conv = sext i32 %0 to i64, !dbg !74
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !75
  ret i8* %call, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !77 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %0 = load i32, i32* %n.addr, align 4, !dbg !80
  %conv = sext i32 %0 to i64, !dbg !80
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !81
  ret i8* %call, !dbg !82
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !83 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !84, metadata !DIExpression()), !dbg !85
  %0 = load i32, i32* %n.addr, align 4, !dbg !86
  %conv = sext i32 %0 to i64, !dbg !86
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !87
  ret i8* %call, !dbg !88
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !89 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %0 = load i32, i32* %n.addr, align 4, !dbg !92
  %conv = sext i32 %0 to i64, !dbg !92
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !93
  ret i8* %call, !dbg !94
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !95 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !96, metadata !DIExpression()), !dbg !97
  %0 = load i32, i32* %n.addr, align 4, !dbg !98
  %conv = sext i32 %0 to i64, !dbg !98
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !99
  ret i8* %call, !dbg !100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !101 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !102, metadata !DIExpression()), !dbg !103
  %0 = load i32, i32* %n.addr, align 4, !dbg !104
  %conv = sext i32 %0 to i64, !dbg !104
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !105
  ret i8* %call, !dbg !106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !107 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !110, metadata !DIExpression()), !dbg !111
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !112, metadata !DIExpression()), !dbg !113
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !114
  ret void, !dbg !115
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !116 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !121, metadata !DIExpression()), !dbg !122
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !123, metadata !DIExpression()), !dbg !124
  ret void, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !126 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !127, metadata !DIExpression()), !dbg !128
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !129, metadata !DIExpression()), !dbg !130
  ret void, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !132 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !135, metadata !DIExpression()), !dbg !136
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !137, metadata !DIExpression()), !dbg !138
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !139, metadata !DIExpression()), !dbg !140
  ret void, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !142 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !145, metadata !DIExpression()), !dbg !146
  ret void, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !148 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %0 = load i8*, i8** %str.addr, align 8, !dbg !151
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !152
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !153
  %call2 = call i32 @getchar(), !dbg !154
  ret void, !dbg !155
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !156 {
entry:
  ret void, !dbg !159
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct._list* @make_list(i32 %n) #0 !dbg !160 {
entry:
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %hd = alloca %struct._list*, align 8
  %p = alloca %struct._list*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !163, metadata !DIExpression()), !dbg !164
  call void @llvm.dbg.declare(metadata i32* %i, metadata !165, metadata !DIExpression()), !dbg !166
  call void @llvm.dbg.declare(metadata %struct._list** %hd, metadata !167, metadata !DIExpression()), !dbg !168
  %call = call i8* @SAFEMALLOC(i32 8), !dbg !169
  %0 = bitcast i8* %call to %struct._list*, !dbg !170
  store %struct._list* %0, %struct._list** %hd, align 8, !dbg !168
  call void @llvm.dbg.declare(metadata %struct._list** %p, metadata !171, metadata !DIExpression()), !dbg !172
  %1 = load %struct._list*, %struct._list** %hd, align 8, !dbg !173
  store %struct._list* %1, %struct._list** %p, align 8, !dbg !172
  store i32 0, i32* %i, align 4, !dbg !174
  br label %for.cond, !dbg !176

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !177
  %3 = load i32, i32* %n.addr, align 4, !dbg !179
  %cmp = icmp slt i32 %2, %3, !dbg !180
  br i1 %cmp, label %for.body, label %for.end, !dbg !181

for.body:                                         ; preds = %for.cond
  %call1 = call i8* @NFRMALLOC(i32 8), !dbg !182
  %4 = bitcast i8* %call1 to %struct._list*, !dbg !184
  %5 = load %struct._list*, %struct._list** %p, align 8, !dbg !185
  %next = getelementptr inbounds %struct._list, %struct._list* %5, i32 0, i32 0, !dbg !186
  store %struct._list* %4, %struct._list** %next, align 8, !dbg !187
  %6 = load %struct._list*, %struct._list** %p, align 8, !dbg !188
  %next2 = getelementptr inbounds %struct._list, %struct._list* %6, i32 0, i32 0, !dbg !189
  %7 = load %struct._list*, %struct._list** %next2, align 8, !dbg !189
  store %struct._list* %7, %struct._list** %p, align 8, !dbg !190
  br label %for.inc, !dbg !191

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !192
  %inc = add nsw i32 %8, 1, !dbg !192
  store i32 %inc, i32* %i, align 4, !dbg !192
  br label %for.cond, !dbg !193, !llvm.loop !194

for.end:                                          ; preds = %for.cond
  %9 = load %struct._list*, %struct._list** %p, align 8, !dbg !197
  %next3 = getelementptr inbounds %struct._list, %struct._list* %9, i32 0, i32 0, !dbg !198
  store %struct._list* null, %struct._list** %next3, align 8, !dbg !199
  %10 = load %struct._list*, %struct._list** %hd, align 8, !dbg !200
  ret %struct._list* %10, !dbg !201
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_list(%struct._list* %hd) #0 !dbg !202 {
entry:
  %hd.addr = alloca %struct._list*, align 8
  store %struct._list* %hd, %struct._list** %hd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list** %hd.addr, metadata !205, metadata !DIExpression()), !dbg !206
  %0 = load %struct._list*, %struct._list** %hd.addr, align 8, !dbg !207
  %1 = bitcast %struct._list* %0 to i8*, !dbg !207
  call void @free(i8* %1) #4, !dbg !208
  ret void, !dbg !209
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !210 {
entry:
  %l = alloca %struct._list*, align 8
  call void @llvm.dbg.declare(metadata %struct._list** %l, metadata !211, metadata !DIExpression()), !dbg !212
  %call = call %struct._list* @make_list(i32 10), !dbg !213
  store %struct._list* %call, %struct._list** %l, align 8, !dbg !212
  %0 = load %struct._list*, %struct._list** %l, align 8, !dbg !214
  call void @free_list(%struct._list* %0), !dbg !215
  ret void, !dbg !216
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!10, !11, !12, !13, !14}
!llvm.ident = !{!15}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp6a.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_typedef, name: "list", file: !5, line: 13, baseType: !6)
!5 = !DIFile(filename: "src/mem_leak/sp6a.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_list", file: !5, line: 11, size: 64, elements: !8)
!8 = !{!9}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !7, file: !5, line: 12, baseType: !6, size: 64)
!10 = !{i32 7, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 7, !"uwtable", i32 1}
!14 = !{i32 7, !"frame-pointer", i32 2}
!15 = !{!"clang version 13.0.0"}
!16 = distinct !DISubprogram(name: "MUSTALIAS", scope: !17, file: !17, line: 4, type: !18, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!17 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!18 = !DISubroutineType(types: !19)
!19 = !{null, !20, !20}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DILocalVariable(name: "p", arg: 1, scope: !16, file: !17, line: 4, type: !20)
!22 = !DILocation(line: 4, column: 22, scope: !16)
!23 = !DILocalVariable(name: "q", arg: 2, scope: !16, file: !17, line: 4, type: !20)
!24 = !DILocation(line: 4, column: 31, scope: !16)
!25 = !DILocation(line: 5, column: 3, scope: !16)
!26 = !DILocation(line: 6, column: 1, scope: !16)
!27 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !17, file: !17, line: 8, type: !18, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!28 = !DILocalVariable(name: "p", arg: 1, scope: !27, file: !17, line: 8, type: !20)
!29 = !DILocation(line: 8, column: 25, scope: !27)
!30 = !DILocalVariable(name: "q", arg: 2, scope: !27, file: !17, line: 8, type: !20)
!31 = !DILocation(line: 8, column: 34, scope: !27)
!32 = !DILocation(line: 9, column: 3, scope: !27)
!33 = !DILocation(line: 10, column: 1, scope: !27)
!34 = distinct !DISubprogram(name: "MAYALIAS", scope: !17, file: !17, line: 12, type: !18, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!35 = !DILocalVariable(name: "p", arg: 1, scope: !34, file: !17, line: 12, type: !20)
!36 = !DILocation(line: 12, column: 21, scope: !34)
!37 = !DILocalVariable(name: "q", arg: 2, scope: !34, file: !17, line: 12, type: !20)
!38 = !DILocation(line: 12, column: 30, scope: !34)
!39 = !DILocation(line: 13, column: 3, scope: !34)
!40 = !DILocation(line: 14, column: 1, scope: !34)
!41 = distinct !DISubprogram(name: "NOALIAS", scope: !17, file: !17, line: 16, type: !18, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!42 = !DILocalVariable(name: "p", arg: 1, scope: !41, file: !17, line: 16, type: !20)
!43 = !DILocation(line: 16, column: 20, scope: !41)
!44 = !DILocalVariable(name: "q", arg: 2, scope: !41, file: !17, line: 16, type: !20)
!45 = !DILocation(line: 16, column: 29, scope: !41)
!46 = !DILocation(line: 17, column: 3, scope: !41)
!47 = !DILocation(line: 18, column: 1, scope: !41)
!48 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !17, file: !17, line: 20, type: !18, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!49 = !DILocalVariable(name: "p", arg: 1, scope: !48, file: !17, line: 20, type: !20)
!50 = !DILocation(line: 20, column: 34, scope: !48)
!51 = !DILocalVariable(name: "q", arg: 2, scope: !48, file: !17, line: 20, type: !20)
!52 = !DILocation(line: 20, column: 43, scope: !48)
!53 = !DILocation(line: 21, column: 3, scope: !48)
!54 = !DILocation(line: 22, column: 1, scope: !48)
!55 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !17, file: !17, line: 24, type: !18, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!56 = !DILocalVariable(name: "p", arg: 1, scope: !55, file: !17, line: 24, type: !20)
!57 = !DILocation(line: 24, column: 33, scope: !55)
!58 = !DILocalVariable(name: "q", arg: 2, scope: !55, file: !17, line: 24, type: !20)
!59 = !DILocation(line: 24, column: 42, scope: !55)
!60 = !DILocation(line: 25, column: 3, scope: !55)
!61 = !DILocation(line: 26, column: 1, scope: !55)
!62 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !17, file: !17, line: 29, type: !63, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!63 = !DISubroutineType(types: !64)
!64 = !{!20, !65}
!65 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!66 = !DILocalVariable(name: "n", arg: 1, scope: !62, file: !17, line: 29, type: !65)
!67 = !DILocation(line: 29, column: 22, scope: !62)
!68 = !DILocation(line: 30, column: 17, scope: !62)
!69 = !DILocation(line: 30, column: 10, scope: !62)
!70 = !DILocation(line: 30, column: 3, scope: !62)
!71 = distinct !DISubprogram(name: "PLKMALLOC", scope: !17, file: !17, line: 33, type: !63, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!72 = !DILocalVariable(name: "n", arg: 1, scope: !71, file: !17, line: 33, type: !65)
!73 = !DILocation(line: 33, column: 21, scope: !71)
!74 = !DILocation(line: 34, column: 17, scope: !71)
!75 = !DILocation(line: 34, column: 10, scope: !71)
!76 = !DILocation(line: 34, column: 3, scope: !71)
!77 = distinct !DISubprogram(name: "NFRMALLOC", scope: !17, file: !17, line: 37, type: !63, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!78 = !DILocalVariable(name: "n", arg: 1, scope: !77, file: !17, line: 37, type: !65)
!79 = !DILocation(line: 37, column: 21, scope: !77)
!80 = !DILocation(line: 38, column: 17, scope: !77)
!81 = !DILocation(line: 38, column: 10, scope: !77)
!82 = !DILocation(line: 38, column: 3, scope: !77)
!83 = distinct !DISubprogram(name: "CLKMALLOC", scope: !17, file: !17, line: 41, type: !63, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!84 = !DILocalVariable(name: "n", arg: 1, scope: !83, file: !17, line: 41, type: !65)
!85 = !DILocation(line: 41, column: 21, scope: !83)
!86 = !DILocation(line: 42, column: 17, scope: !83)
!87 = !DILocation(line: 42, column: 10, scope: !83)
!88 = !DILocation(line: 42, column: 3, scope: !83)
!89 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !17, file: !17, line: 45, type: !63, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!90 = !DILocalVariable(name: "n", arg: 1, scope: !89, file: !17, line: 45, type: !65)
!91 = !DILocation(line: 45, column: 21, scope: !89)
!92 = !DILocation(line: 46, column: 17, scope: !89)
!93 = !DILocation(line: 46, column: 10, scope: !89)
!94 = !DILocation(line: 46, column: 3, scope: !89)
!95 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !17, file: !17, line: 49, type: !63, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!96 = !DILocalVariable(name: "n", arg: 1, scope: !95, file: !17, line: 49, type: !65)
!97 = !DILocation(line: 49, column: 21, scope: !95)
!98 = !DILocation(line: 50, column: 17, scope: !95)
!99 = !DILocation(line: 50, column: 10, scope: !95)
!100 = !DILocation(line: 50, column: 3, scope: !95)
!101 = distinct !DISubprogram(name: "LEAKFN", scope: !17, file: !17, line: 53, type: !63, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!102 = !DILocalVariable(name: "n", arg: 1, scope: !101, file: !17, line: 53, type: !65)
!103 = !DILocation(line: 53, column: 18, scope: !101)
!104 = !DILocation(line: 54, column: 17, scope: !101)
!105 = !DILocation(line: 54, column: 10, scope: !101)
!106 = !DILocation(line: 54, column: 3, scope: !101)
!107 = distinct !DISubprogram(name: "RC_ACCESS", scope: !17, file: !17, line: 63, type: !108, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!108 = !DISubroutineType(types: !109)
!109 = !{null, !65, !65}
!110 = !DILocalVariable(name: "id", arg: 1, scope: !107, file: !17, line: 63, type: !65)
!111 = !DILocation(line: 63, column: 20, scope: !107)
!112 = !DILocalVariable(name: "flags", arg: 2, scope: !107, file: !17, line: 63, type: !65)
!113 = !DILocation(line: 63, column: 28, scope: !107)
!114 = !DILocation(line: 64, column: 3, scope: !107)
!115 = !DILocation(line: 65, column: 1, scope: !107)
!116 = distinct !DISubprogram(name: "CXT_THREAD", scope: !17, file: !17, line: 75, type: !117, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!117 = !DISubroutineType(types: !118)
!118 = !{null, !65, !119}
!119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !120, size: 64)
!120 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!121 = !DILocalVariable(name: "thdid", arg: 1, scope: !116, file: !17, line: 75, type: !65)
!122 = !DILocation(line: 75, column: 21, scope: !116)
!123 = !DILocalVariable(name: "cxt", arg: 2, scope: !116, file: !17, line: 75, type: !119)
!124 = !DILocation(line: 75, column: 34, scope: !116)
!125 = !DILocation(line: 77, column: 1, scope: !116)
!126 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !17, file: !17, line: 78, type: !117, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!127 = !DILocalVariable(name: "thdid", arg: 1, scope: !126, file: !17, line: 78, type: !65)
!128 = !DILocation(line: 78, column: 21, scope: !126)
!129 = !DILocalVariable(name: "cxt", arg: 2, scope: !126, file: !17, line: 78, type: !119)
!130 = !DILocation(line: 78, column: 33, scope: !126)
!131 = !DILocation(line: 80, column: 1, scope: !126)
!132 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !17, file: !17, line: 81, type: !133, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!133 = !DISubroutineType(types: !134)
!134 = !{null, !65, !119, !119}
!135 = !DILocalVariable(name: "thdid", arg: 1, scope: !132, file: !17, line: 81, type: !65)
!136 = !DILocation(line: 81, column: 26, scope: !132)
!137 = !DILocalVariable(name: "cxt", arg: 2, scope: !132, file: !17, line: 81, type: !119)
!138 = !DILocation(line: 81, column: 38, scope: !132)
!139 = !DILocalVariable(name: "lev", arg: 3, scope: !132, file: !17, line: 81, type: !119)
!140 = !DILocation(line: 81, column: 49, scope: !132)
!141 = !DILocation(line: 83, column: 1, scope: !132)
!142 = distinct !DISubprogram(name: "LOCK", scope: !17, file: !17, line: 85, type: !143, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!143 = !DISubroutineType(types: !144)
!144 = !{null, !119}
!145 = !DILocalVariable(name: "lockname", arg: 1, scope: !142, file: !17, line: 85, type: !119)
!146 = !DILocation(line: 85, column: 17, scope: !142)
!147 = !DILocation(line: 87, column: 1, scope: !142)
!148 = distinct !DISubprogram(name: "PAUSE", scope: !17, file: !17, line: 89, type: !143, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!149 = !DILocalVariable(name: "str", arg: 1, scope: !148, file: !17, line: 89, type: !119)
!150 = !DILocation(line: 89, column: 18, scope: !148)
!151 = !DILocation(line: 90, column: 18, scope: !148)
!152 = !DILocation(line: 90, column: 3, scope: !148)
!153 = !DILocation(line: 91, column: 3, scope: !148)
!154 = !DILocation(line: 92, column: 3, scope: !148)
!155 = !DILocation(line: 93, column: 1, scope: !148)
!156 = distinct !DISubprogram(name: "deref", scope: !17, file: !17, line: 111, type: !157, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!157 = !DISubroutineType(types: !158)
!158 = !{null}
!159 = !DILocation(line: 111, column: 20, scope: !156)
!160 = distinct !DISubprogram(name: "make_list", scope: !5, file: !5, line: 15, type: !161, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!161 = !DISubroutineType(types: !162)
!162 = !{!4, !65}
!163 = !DILocalVariable(name: "n", arg: 1, scope: !160, file: !5, line: 15, type: !65)
!164 = !DILocation(line: 15, column: 20, scope: !160)
!165 = !DILocalVariable(name: "i", scope: !160, file: !5, line: 16, type: !65)
!166 = !DILocation(line: 16, column: 8, scope: !160)
!167 = !DILocalVariable(name: "hd", scope: !160, file: !5, line: 17, type: !4)
!168 = !DILocation(line: 17, column: 11, scope: !160)
!169 = !DILocation(line: 17, column: 22, scope: !160)
!170 = !DILocation(line: 17, column: 16, scope: !160)
!171 = !DILocalVariable(name: "p", scope: !160, file: !5, line: 18, type: !4)
!172 = !DILocation(line: 18, column: 10, scope: !160)
!173 = !DILocation(line: 18, column: 14, scope: !160)
!174 = !DILocation(line: 19, column: 13, scope: !175)
!175 = distinct !DILexicalBlock(scope: !160, file: !5, line: 19, column: 7)
!176 = !DILocation(line: 19, column: 12, scope: !175)
!177 = !DILocation(line: 19, column: 17, scope: !178)
!178 = distinct !DILexicalBlock(scope: !175, file: !5, line: 19, column: 7)
!179 = !DILocation(line: 19, column: 19, scope: !178)
!180 = !DILocation(line: 19, column: 18, scope: !178)
!181 = !DILocation(line: 19, column: 7, scope: !175)
!182 = !DILocation(line: 20, column: 25, scope: !183)
!183 = distinct !DILexicalBlock(scope: !178, file: !5, line: 19, column: 27)
!184 = !DILocation(line: 20, column: 19, scope: !183)
!185 = !DILocation(line: 20, column: 9, scope: !183)
!186 = !DILocation(line: 20, column: 12, scope: !183)
!187 = !DILocation(line: 20, column: 17, scope: !183)
!188 = !DILocation(line: 21, column: 14, scope: !183)
!189 = !DILocation(line: 21, column: 17, scope: !183)
!190 = !DILocation(line: 21, column: 12, scope: !183)
!191 = !DILocation(line: 22, column: 9, scope: !183)
!192 = !DILocation(line: 19, column: 23, scope: !178)
!193 = !DILocation(line: 19, column: 7, scope: !178)
!194 = distinct !{!194, !181, !195, !196}
!195 = !DILocation(line: 22, column: 9, scope: !175)
!196 = !{!"llvm.loop.mustprogress"}
!197 = !DILocation(line: 23, column: 6, scope: !160)
!198 = !DILocation(line: 23, column: 9, scope: !160)
!199 = !DILocation(line: 23, column: 14, scope: !160)
!200 = !DILocation(line: 24, column: 15, scope: !160)
!201 = !DILocation(line: 24, column: 8, scope: !160)
!202 = distinct !DISubprogram(name: "free_list", scope: !5, file: !5, line: 27, type: !203, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!203 = !DISubroutineType(types: !204)
!204 = !{null, !4}
!205 = !DILocalVariable(name: "hd", arg: 1, scope: !202, file: !5, line: 27, type: !4)
!206 = !DILocation(line: 27, column: 21, scope: !202)
!207 = !DILocation(line: 28, column: 11, scope: !202)
!208 = !DILocation(line: 28, column: 6, scope: !202)
!209 = !DILocation(line: 29, column: 1, scope: !202)
!210 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 31, type: !157, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!211 = !DILocalVariable(name: "l", scope: !210, file: !5, line: 32, type: !4)
!212 = !DILocation(line: 32, column: 11, scope: !210)
!213 = !DILocation(line: 32, column: 15, scope: !210)
!214 = !DILocation(line: 33, column: 17, scope: !210)
!215 = !DILocation(line: 33, column: 7, scope: !210)
!216 = !DILocation(line: 34, column: 1, scope: !210)
