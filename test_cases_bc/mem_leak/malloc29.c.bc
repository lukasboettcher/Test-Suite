; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc29.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc29.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@func.q = internal global i32* null, align 8, !dbg !0
@.str.3 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !18 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !23, metadata !DIExpression()), !dbg !24
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !25, metadata !DIExpression()), !dbg !26
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !27
  ret void, !dbg !28
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !29 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !30, metadata !DIExpression()), !dbg !31
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !32, metadata !DIExpression()), !dbg !33
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !34
  ret void, !dbg !35
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !36 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !37, metadata !DIExpression()), !dbg !38
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !39, metadata !DIExpression()), !dbg !40
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !41
  ret void, !dbg !42
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !43 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !44, metadata !DIExpression()), !dbg !45
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !46, metadata !DIExpression()), !dbg !47
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !48
  ret void, !dbg !49
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !50 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !51, metadata !DIExpression()), !dbg !52
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !53, metadata !DIExpression()), !dbg !54
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !55
  ret void, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !57 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !58, metadata !DIExpression()), !dbg !59
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !60, metadata !DIExpression()), !dbg !61
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !62
  ret void, !dbg !63
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !64 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %0 = load i32, i32* %n.addr, align 4, !dbg !69
  %conv = sext i32 %0 to i64, !dbg !69
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !70
  ret i8* %call, !dbg !71
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !72 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %0 = load i32, i32* %n.addr, align 4, !dbg !75
  %conv = sext i32 %0 to i64, !dbg !75
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !76
  ret i8* %call, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !78 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %0 = load i32, i32* %n.addr, align 4, !dbg !81
  %conv = sext i32 %0 to i64, !dbg !81
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !82
  ret i8* %call, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !84 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %0 = load i32, i32* %n.addr, align 4, !dbg !87
  %conv = sext i32 %0 to i64, !dbg !87
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !88
  ret i8* %call, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !90 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %0 = load i32, i32* %n.addr, align 4, !dbg !93
  %conv = sext i32 %0 to i64, !dbg !93
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !94
  ret i8* %call, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !96 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, i32* %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !100
  ret i8* %call, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !102 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, i32* %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !106
  ret i8* %call, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !108 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !111, metadata !DIExpression()), !dbg !112
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !115
  ret void, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !117 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !122, metadata !DIExpression()), !dbg !123
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !124, metadata !DIExpression()), !dbg !125
  ret void, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !127 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !128, metadata !DIExpression()), !dbg !129
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !130, metadata !DIExpression()), !dbg !131
  ret void, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !133 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !136, metadata !DIExpression()), !dbg !137
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !138, metadata !DIExpression()), !dbg !139
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !140, metadata !DIExpression()), !dbg !141
  ret void, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !143 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !146, metadata !DIExpression()), !dbg !147
  ret void, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !149 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !150, metadata !DIExpression()), !dbg !151
  %0 = load i8*, i8** %str.addr, align 8, !dbg !152
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !153
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !154
  %call2 = call i32 @getchar(), !dbg !155
  ret void, !dbg !156
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !157 {
entry:
  ret void, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func() #0 !dbg !2 {
entry:
  %retval = alloca i32, align 4
  %p = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p, metadata !161, metadata !DIExpression()), !dbg !162
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !163
  %0 = bitcast i8* %call to i32*, !dbg !163
  store i32* %0, i32** %p, align 8, !dbg !162
  %1 = load i32*, i32** %p, align 8, !dbg !164
  store i32* %1, i32** @func.q, align 8, !dbg !165
  %2 = load i32*, i32** %p, align 8, !dbg !166
  %3 = load i32*, i32** @func.q, align 8, !dbg !167
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32* %2, i32* %3), !dbg !168
  %4 = load i32, i32* %retval, align 4, !dbg !169
  ret i32 %4, !dbg !169
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !170 {
entry:
  %call = call i32 @func(), !dbg !171
  ret i32 0, !dbg !172
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!7}
!llvm.module.flags = !{!12, !13, !14, !15, !16}
!llvm.ident = !{!17}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "q", scope: !2, file: !3, line: 10, type: !11, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "func", scope: !3, file: !3, line: 9, type: !4, scopeLine: 9, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!3 = !DIFile(filename: "src/mem_leak/malloc29.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !DISubroutineType(types: !5)
!5 = !{!6}
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = distinct !DICompileUnit(language: DW_LANG_C99, file: !8, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !9, globals: !10, splitDebugInlining: false, nameTableKind: None)
!8 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc29.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!9 = !{}
!10 = !{!0}
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!12 = !{i32 7, !"Dwarf Version", i32 4}
!13 = !{i32 2, !"Debug Info Version", i32 3}
!14 = !{i32 1, !"wchar_size", i32 4}
!15 = !{i32 7, !"uwtable", i32 1}
!16 = !{i32 7, !"frame-pointer", i32 2}
!17 = !{!"clang version 13.0.0"}
!18 = distinct !DISubprogram(name: "MUSTALIAS", scope: !19, file: !19, line: 4, type: !20, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!19 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!20 = !DISubroutineType(types: !21)
!21 = !{null, !22, !22}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DILocalVariable(name: "p", arg: 1, scope: !18, file: !19, line: 4, type: !22)
!24 = !DILocation(line: 4, column: 22, scope: !18)
!25 = !DILocalVariable(name: "q", arg: 2, scope: !18, file: !19, line: 4, type: !22)
!26 = !DILocation(line: 4, column: 31, scope: !18)
!27 = !DILocation(line: 5, column: 3, scope: !18)
!28 = !DILocation(line: 6, column: 1, scope: !18)
!29 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !19, file: !19, line: 8, type: !20, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!30 = !DILocalVariable(name: "p", arg: 1, scope: !29, file: !19, line: 8, type: !22)
!31 = !DILocation(line: 8, column: 25, scope: !29)
!32 = !DILocalVariable(name: "q", arg: 2, scope: !29, file: !19, line: 8, type: !22)
!33 = !DILocation(line: 8, column: 34, scope: !29)
!34 = !DILocation(line: 9, column: 3, scope: !29)
!35 = !DILocation(line: 10, column: 1, scope: !29)
!36 = distinct !DISubprogram(name: "MAYALIAS", scope: !19, file: !19, line: 12, type: !20, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!37 = !DILocalVariable(name: "p", arg: 1, scope: !36, file: !19, line: 12, type: !22)
!38 = !DILocation(line: 12, column: 21, scope: !36)
!39 = !DILocalVariable(name: "q", arg: 2, scope: !36, file: !19, line: 12, type: !22)
!40 = !DILocation(line: 12, column: 30, scope: !36)
!41 = !DILocation(line: 13, column: 3, scope: !36)
!42 = !DILocation(line: 14, column: 1, scope: !36)
!43 = distinct !DISubprogram(name: "NOALIAS", scope: !19, file: !19, line: 16, type: !20, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!44 = !DILocalVariable(name: "p", arg: 1, scope: !43, file: !19, line: 16, type: !22)
!45 = !DILocation(line: 16, column: 20, scope: !43)
!46 = !DILocalVariable(name: "q", arg: 2, scope: !43, file: !19, line: 16, type: !22)
!47 = !DILocation(line: 16, column: 29, scope: !43)
!48 = !DILocation(line: 17, column: 3, scope: !43)
!49 = !DILocation(line: 18, column: 1, scope: !43)
!50 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !19, file: !19, line: 20, type: !20, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!51 = !DILocalVariable(name: "p", arg: 1, scope: !50, file: !19, line: 20, type: !22)
!52 = !DILocation(line: 20, column: 34, scope: !50)
!53 = !DILocalVariable(name: "q", arg: 2, scope: !50, file: !19, line: 20, type: !22)
!54 = !DILocation(line: 20, column: 43, scope: !50)
!55 = !DILocation(line: 21, column: 3, scope: !50)
!56 = !DILocation(line: 22, column: 1, scope: !50)
!57 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !19, file: !19, line: 24, type: !20, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!58 = !DILocalVariable(name: "p", arg: 1, scope: !57, file: !19, line: 24, type: !22)
!59 = !DILocation(line: 24, column: 33, scope: !57)
!60 = !DILocalVariable(name: "q", arg: 2, scope: !57, file: !19, line: 24, type: !22)
!61 = !DILocation(line: 24, column: 42, scope: !57)
!62 = !DILocation(line: 25, column: 3, scope: !57)
!63 = !DILocation(line: 26, column: 1, scope: !57)
!64 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !19, file: !19, line: 29, type: !65, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!65 = !DISubroutineType(types: !66)
!66 = !{!22, !6}
!67 = !DILocalVariable(name: "n", arg: 1, scope: !64, file: !19, line: 29, type: !6)
!68 = !DILocation(line: 29, column: 22, scope: !64)
!69 = !DILocation(line: 30, column: 17, scope: !64)
!70 = !DILocation(line: 30, column: 10, scope: !64)
!71 = !DILocation(line: 30, column: 3, scope: !64)
!72 = distinct !DISubprogram(name: "PLKMALLOC", scope: !19, file: !19, line: 33, type: !65, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!73 = !DILocalVariable(name: "n", arg: 1, scope: !72, file: !19, line: 33, type: !6)
!74 = !DILocation(line: 33, column: 21, scope: !72)
!75 = !DILocation(line: 34, column: 17, scope: !72)
!76 = !DILocation(line: 34, column: 10, scope: !72)
!77 = !DILocation(line: 34, column: 3, scope: !72)
!78 = distinct !DISubprogram(name: "NFRMALLOC", scope: !19, file: !19, line: 37, type: !65, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!79 = !DILocalVariable(name: "n", arg: 1, scope: !78, file: !19, line: 37, type: !6)
!80 = !DILocation(line: 37, column: 21, scope: !78)
!81 = !DILocation(line: 38, column: 17, scope: !78)
!82 = !DILocation(line: 38, column: 10, scope: !78)
!83 = !DILocation(line: 38, column: 3, scope: !78)
!84 = distinct !DISubprogram(name: "CLKMALLOC", scope: !19, file: !19, line: 41, type: !65, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!85 = !DILocalVariable(name: "n", arg: 1, scope: !84, file: !19, line: 41, type: !6)
!86 = !DILocation(line: 41, column: 21, scope: !84)
!87 = !DILocation(line: 42, column: 17, scope: !84)
!88 = !DILocation(line: 42, column: 10, scope: !84)
!89 = !DILocation(line: 42, column: 3, scope: !84)
!90 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !19, file: !19, line: 45, type: !65, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!91 = !DILocalVariable(name: "n", arg: 1, scope: !90, file: !19, line: 45, type: !6)
!92 = !DILocation(line: 45, column: 21, scope: !90)
!93 = !DILocation(line: 46, column: 17, scope: !90)
!94 = !DILocation(line: 46, column: 10, scope: !90)
!95 = !DILocation(line: 46, column: 3, scope: !90)
!96 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !19, file: !19, line: 49, type: !65, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!97 = !DILocalVariable(name: "n", arg: 1, scope: !96, file: !19, line: 49, type: !6)
!98 = !DILocation(line: 49, column: 21, scope: !96)
!99 = !DILocation(line: 50, column: 17, scope: !96)
!100 = !DILocation(line: 50, column: 10, scope: !96)
!101 = !DILocation(line: 50, column: 3, scope: !96)
!102 = distinct !DISubprogram(name: "LEAKFN", scope: !19, file: !19, line: 53, type: !65, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !102, file: !19, line: 53, type: !6)
!104 = !DILocation(line: 53, column: 18, scope: !102)
!105 = !DILocation(line: 54, column: 17, scope: !102)
!106 = !DILocation(line: 54, column: 10, scope: !102)
!107 = !DILocation(line: 54, column: 3, scope: !102)
!108 = distinct !DISubprogram(name: "RC_ACCESS", scope: !19, file: !19, line: 63, type: !109, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!109 = !DISubroutineType(types: !110)
!110 = !{null, !6, !6}
!111 = !DILocalVariable(name: "id", arg: 1, scope: !108, file: !19, line: 63, type: !6)
!112 = !DILocation(line: 63, column: 20, scope: !108)
!113 = !DILocalVariable(name: "flags", arg: 2, scope: !108, file: !19, line: 63, type: !6)
!114 = !DILocation(line: 63, column: 28, scope: !108)
!115 = !DILocation(line: 64, column: 3, scope: !108)
!116 = !DILocation(line: 65, column: 1, scope: !108)
!117 = distinct !DISubprogram(name: "CXT_THREAD", scope: !19, file: !19, line: 75, type: !118, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!118 = !DISubroutineType(types: !119)
!119 = !{null, !6, !120}
!120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !121, size: 64)
!121 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!122 = !DILocalVariable(name: "thdid", arg: 1, scope: !117, file: !19, line: 75, type: !6)
!123 = !DILocation(line: 75, column: 21, scope: !117)
!124 = !DILocalVariable(name: "cxt", arg: 2, scope: !117, file: !19, line: 75, type: !120)
!125 = !DILocation(line: 75, column: 34, scope: !117)
!126 = !DILocation(line: 77, column: 1, scope: !117)
!127 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !19, file: !19, line: 78, type: !118, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!128 = !DILocalVariable(name: "thdid", arg: 1, scope: !127, file: !19, line: 78, type: !6)
!129 = !DILocation(line: 78, column: 21, scope: !127)
!130 = !DILocalVariable(name: "cxt", arg: 2, scope: !127, file: !19, line: 78, type: !120)
!131 = !DILocation(line: 78, column: 33, scope: !127)
!132 = !DILocation(line: 80, column: 1, scope: !127)
!133 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !19, file: !19, line: 81, type: !134, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!134 = !DISubroutineType(types: !135)
!135 = !{null, !6, !120, !120}
!136 = !DILocalVariable(name: "thdid", arg: 1, scope: !133, file: !19, line: 81, type: !6)
!137 = !DILocation(line: 81, column: 26, scope: !133)
!138 = !DILocalVariable(name: "cxt", arg: 2, scope: !133, file: !19, line: 81, type: !120)
!139 = !DILocation(line: 81, column: 38, scope: !133)
!140 = !DILocalVariable(name: "lev", arg: 3, scope: !133, file: !19, line: 81, type: !120)
!141 = !DILocation(line: 81, column: 49, scope: !133)
!142 = !DILocation(line: 83, column: 1, scope: !133)
!143 = distinct !DISubprogram(name: "LOCK", scope: !19, file: !19, line: 85, type: !144, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !120}
!146 = !DILocalVariable(name: "lockname", arg: 1, scope: !143, file: !19, line: 85, type: !120)
!147 = !DILocation(line: 85, column: 17, scope: !143)
!148 = !DILocation(line: 87, column: 1, scope: !143)
!149 = distinct !DISubprogram(name: "PAUSE", scope: !19, file: !19, line: 89, type: !144, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!150 = !DILocalVariable(name: "str", arg: 1, scope: !149, file: !19, line: 89, type: !120)
!151 = !DILocation(line: 89, column: 18, scope: !149)
!152 = !DILocation(line: 90, column: 18, scope: !149)
!153 = !DILocation(line: 90, column: 3, scope: !149)
!154 = !DILocation(line: 91, column: 3, scope: !149)
!155 = !DILocation(line: 92, column: 3, scope: !149)
!156 = !DILocation(line: 93, column: 1, scope: !149)
!157 = distinct !DISubprogram(name: "deref", scope: !19, file: !19, line: 111, type: !158, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!158 = !DISubroutineType(types: !159)
!159 = !{null}
!160 = !DILocation(line: 111, column: 20, scope: !157)
!161 = !DILocalVariable(name: "p", scope: !2, file: !3, line: 11, type: !11)
!162 = !DILocation(line: 11, column: 7, scope: !2)
!163 = !DILocation(line: 11, column: 11, scope: !2)
!164 = !DILocation(line: 12, column: 6, scope: !2)
!165 = !DILocation(line: 12, column: 4, scope: !2)
!166 = !DILocation(line: 13, column: 16, scope: !2)
!167 = !DILocation(line: 13, column: 18, scope: !2)
!168 = !DILocation(line: 13, column: 2, scope: !2)
!169 = !DILocation(line: 15, column: 1, scope: !2)
!170 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 17, type: !4, scopeLine: 17, spFlags: DISPFlagDefinition, unit: !7, retainedNodes: !9)
!171 = !DILocation(line: 18, column: 2, scope: !170)
!172 = !DILocation(line: 19, column: 1, scope: !170)
