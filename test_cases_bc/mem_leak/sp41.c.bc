; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp41.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp41.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._S = type { i8*, i8* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@__const.main.str1 = private unnamed_addr constant [10 x i8] c"STRING 1\00\00", align 1
@__const.main.str2 = private unnamed_addr constant [10 x i8] c"STRING 2\00\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !20 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !24, metadata !DIExpression()), !dbg !25
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !28
  ret void, !dbg !29
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !30 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !31, metadata !DIExpression()), !dbg !32
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !35
  ret void, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !37 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !38, metadata !DIExpression()), !dbg !39
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !42
  ret void, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !44 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !45, metadata !DIExpression()), !dbg !46
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !49
  ret void, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !51 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !58 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !59, metadata !DIExpression()), !dbg !60
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !63
  ret void, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !65 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %0 = load i32, i32* %n.addr, align 4, !dbg !71
  %conv = sext i32 %0 to i64, !dbg !71
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !72
  ret i8* %call, !dbg !73
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !74 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %0 = load i32, i32* %n.addr, align 4, !dbg !77
  %conv = sext i32 %0 to i64, !dbg !77
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !78
  ret i8* %call, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !80 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %0 = load i32, i32* %n.addr, align 4, !dbg !83
  %conv = sext i32 %0 to i64, !dbg !83
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !84
  ret i8* %call, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !86 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %0 = load i32, i32* %n.addr, align 4, !dbg !89
  %conv = sext i32 %0 to i64, !dbg !89
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !90
  ret i8* %call, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !92 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %0 = load i32, i32* %n.addr, align 4, !dbg !95
  %conv = sext i32 %0 to i64, !dbg !95
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !96
  ret i8* %call, !dbg !97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !98 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, i32* %n.addr, align 4, !dbg !101
  %conv = sext i32 %0 to i64, !dbg !101
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !102
  ret i8* %call, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !104 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %0 = load i32, i32* %n.addr, align 4, !dbg !107
  %conv = sext i32 %0 to i64, !dbg !107
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !108
  ret i8* %call, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !110 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !113, metadata !DIExpression()), !dbg !114
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !117
  ret void, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !119 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !122, metadata !DIExpression()), !dbg !123
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !124, metadata !DIExpression()), !dbg !125
  ret void, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !127 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !128, metadata !DIExpression()), !dbg !129
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !130, metadata !DIExpression()), !dbg !131
  ret void, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !133 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !136, metadata !DIExpression()), !dbg !137
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !138, metadata !DIExpression()), !dbg !139
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !140, metadata !DIExpression()), !dbg !141
  ret void, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !143 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !146, metadata !DIExpression()), !dbg !147
  ret void, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !149 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !150, metadata !DIExpression()), !dbg !151
  %0 = load i8*, i8** %str.addr, align 8, !dbg !152
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !153
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !154
  %call2 = call i32 @getchar(), !dbg !155
  ret void, !dbg !156
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !157 {
entry:
  ret void, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %arg1) #0 !dbg !161 {
entry:
  %retval = alloca i32, align 4
  %arg1.addr = alloca i32, align 4
  %p = alloca %struct._S*, align 8
  %str1 = alloca [10 x i8], align 1
  %str2 = alloca [10 x i8], align 1
  store i32 0, i32* %retval, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %arg1.addr, metadata !164, metadata !DIExpression()), !dbg !165
  call void @llvm.dbg.declare(metadata %struct._S** %p, metadata !166, metadata !DIExpression()), !dbg !167
  call void @llvm.dbg.declare(metadata [10 x i8]* %str1, metadata !168, metadata !DIExpression()), !dbg !172
  %0 = bitcast [10 x i8]* %str1 to i8*, !dbg !172
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.main.str1, i32 0, i32 0), i64 10, i1 false), !dbg !172
  call void @llvm.dbg.declare(metadata [10 x i8]* %str2, metadata !173, metadata !DIExpression()), !dbg !174
  %1 = bitcast [10 x i8]* %str2 to i8*, !dbg !174
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.main.str2, i32 0, i32 0), i64 10, i1 false), !dbg !174
  %call = call noalias align 16 i8* @malloc(i64 16) #5, !dbg !175
  %2 = bitcast i8* %call to %struct._S*, !dbg !176
  store %struct._S* %2, %struct._S** %p, align 8, !dbg !177
  %3 = load %struct._S*, %struct._S** %p, align 8, !dbg !178
  %cmp = icmp eq %struct._S* %3, null, !dbg !180
  br i1 %cmp, label %if.then, label %if.end, !dbg !181

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !182
  br label %return, !dbg !182

if.end:                                           ; preds = %entry
  %call1 = call noalias align 16 i8* @malloc(i64 10) #5, !dbg !183
  %4 = load %struct._S*, %struct._S** %p, align 8, !dbg !184
  %p1 = getelementptr inbounds %struct._S, %struct._S* %4, i32 0, i32 0, !dbg !185
  store i8* %call1, i8** %p1, align 8, !dbg !186
  %5 = load %struct._S*, %struct._S** %p, align 8, !dbg !187
  %p12 = getelementptr inbounds %struct._S, %struct._S* %5, i32 0, i32 0, !dbg !189
  %6 = load i8*, i8** %p12, align 8, !dbg !189
  %cmp3 = icmp eq i8* %6, null, !dbg !190
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !191

if.then4:                                         ; preds = %if.end
  %7 = load %struct._S*, %struct._S** %p, align 8, !dbg !192
  %8 = bitcast %struct._S* %7 to i8*, !dbg !192
  call void @free(i8* %8) #5, !dbg !194
  store i32 -1, i32* %retval, align 4, !dbg !195
  br label %return, !dbg !195

if.end5:                                          ; preds = %if.end
  %call6 = call i8* @SAFEMALLOC(i32 10), !dbg !196
  %9 = load %struct._S*, %struct._S** %p, align 8, !dbg !197
  %p2 = getelementptr inbounds %struct._S, %struct._S* %9, i32 0, i32 1, !dbg !198
  store i8* %call6, i8** %p2, align 8, !dbg !199
  %10 = load %struct._S*, %struct._S** %p, align 8, !dbg !200
  %p27 = getelementptr inbounds %struct._S, %struct._S* %10, i32 0, i32 1, !dbg !202
  %11 = load i8*, i8** %p27, align 8, !dbg !202
  %cmp8 = icmp eq i8* %11, null, !dbg !203
  br i1 %cmp8, label %if.then9, label %if.end15, !dbg !204

if.then9:                                         ; preds = %if.end5
  %12 = load %struct._S*, %struct._S** %p, align 8, !dbg !205
  %p110 = getelementptr inbounds %struct._S, %struct._S* %12, i32 0, i32 0, !dbg !208
  %13 = load i8*, i8** %p110, align 8, !dbg !208
  %cmp11 = icmp ne i8* %13, null, !dbg !209
  br i1 %cmp11, label %if.then12, label %if.end14, !dbg !210

if.then12:                                        ; preds = %if.then9
  %14 = load %struct._S*, %struct._S** %p, align 8, !dbg !211
  %p113 = getelementptr inbounds %struct._S, %struct._S* %14, i32 0, i32 0, !dbg !212
  %15 = load i8*, i8** %p113, align 8, !dbg !212
  call void @free(i8* %15) #5, !dbg !213
  br label %if.end14, !dbg !213

if.end14:                                         ; preds = %if.then12, %if.then9
  %16 = load %struct._S*, %struct._S** %p, align 8, !dbg !214
  %17 = bitcast %struct._S* %16 to i8*, !dbg !214
  call void @free(i8* %17) #5, !dbg !215
  store i32 -1, i32* %retval, align 4, !dbg !216
  br label %return, !dbg !216

if.end15:                                         ; preds = %if.end5
  %18 = load %struct._S*, %struct._S** %p, align 8, !dbg !217
  %p116 = getelementptr inbounds %struct._S, %struct._S* %18, i32 0, i32 0, !dbg !218
  %19 = load i8*, i8** %p116, align 8, !dbg !218
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %str1, i64 0, i64 0, !dbg !219
  %call17 = call i8* @strcpy(i8* %19, i8* %arraydecay), !dbg !220
  %20 = load %struct._S*, %struct._S** %p, align 8, !dbg !221
  %p218 = getelementptr inbounds %struct._S, %struct._S* %20, i32 0, i32 1, !dbg !222
  %21 = load i8*, i8** %p218, align 8, !dbg !222
  %arraydecay19 = getelementptr inbounds [10 x i8], [10 x i8]* %str2, i64 0, i64 0, !dbg !223
  %call20 = call i8* @strcpy(i8* %21, i8* %arraydecay19), !dbg !224
  %22 = load %struct._S*, %struct._S** %p, align 8, !dbg !225
  %p121 = getelementptr inbounds %struct._S, %struct._S* %22, i32 0, i32 0, !dbg !226
  %23 = load i8*, i8** %p121, align 8, !dbg !226
  call void @free(i8* %23) #5, !dbg !227
  %24 = load %struct._S*, %struct._S** %p, align 8, !dbg !228
  %p222 = getelementptr inbounds %struct._S, %struct._S* %24, i32 0, i32 1, !dbg !229
  %25 = load i8*, i8** %p222, align 8, !dbg !229
  call void @free(i8* %25) #5, !dbg !230
  %26 = load %struct._S*, %struct._S** %p, align 8, !dbg !231
  %27 = bitcast %struct._S* %26 to i8*, !dbg !231
  call void @free(i8* %27) #5, !dbg !232
  %28 = load i32, i32* %arg1.addr, align 4, !dbg !233
  store i32 %28, i32* %retval, align 4, !dbg !234
  br label %return, !dbg !234

return:                                           ; preds = %if.end15, %if.end14, %if.then4, %if.then
  %29 = load i32, i32* %retval, align 4, !dbg !235
  ret i32 %29, !dbg !235
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

declare dso_local i8* @strcpy(i8*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly nofree nounwind willreturn }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp41.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4, !13, !10}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "S", file: !6, line: 14, baseType: !7)
!6 = !DIFile(filename: "src/mem_leak/sp41.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_S", file: !6, line: 11, size: 128, elements: !8)
!8 = !{!9, !12}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "p1", scope: !7, file: !6, line: 12, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "p2", scope: !7, file: !6, line: 13, baseType: !10, size: 64, offset: 64)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !{i32 7, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{i32 7, !"uwtable", i32 1}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"clang version 13.0.0"}
!20 = distinct !DISubprogram(name: "MUSTALIAS", scope: !21, file: !21, line: 4, type: !22, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!21 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!22 = !DISubroutineType(types: !23)
!23 = !{null, !13, !13}
!24 = !DILocalVariable(name: "p", arg: 1, scope: !20, file: !21, line: 4, type: !13)
!25 = !DILocation(line: 4, column: 22, scope: !20)
!26 = !DILocalVariable(name: "q", arg: 2, scope: !20, file: !21, line: 4, type: !13)
!27 = !DILocation(line: 4, column: 31, scope: !20)
!28 = !DILocation(line: 5, column: 3, scope: !20)
!29 = !DILocation(line: 6, column: 1, scope: !20)
!30 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !21, file: !21, line: 8, type: !22, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!31 = !DILocalVariable(name: "p", arg: 1, scope: !30, file: !21, line: 8, type: !13)
!32 = !DILocation(line: 8, column: 25, scope: !30)
!33 = !DILocalVariable(name: "q", arg: 2, scope: !30, file: !21, line: 8, type: !13)
!34 = !DILocation(line: 8, column: 34, scope: !30)
!35 = !DILocation(line: 9, column: 3, scope: !30)
!36 = !DILocation(line: 10, column: 1, scope: !30)
!37 = distinct !DISubprogram(name: "MAYALIAS", scope: !21, file: !21, line: 12, type: !22, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!38 = !DILocalVariable(name: "p", arg: 1, scope: !37, file: !21, line: 12, type: !13)
!39 = !DILocation(line: 12, column: 21, scope: !37)
!40 = !DILocalVariable(name: "q", arg: 2, scope: !37, file: !21, line: 12, type: !13)
!41 = !DILocation(line: 12, column: 30, scope: !37)
!42 = !DILocation(line: 13, column: 3, scope: !37)
!43 = !DILocation(line: 14, column: 1, scope: !37)
!44 = distinct !DISubprogram(name: "NOALIAS", scope: !21, file: !21, line: 16, type: !22, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!45 = !DILocalVariable(name: "p", arg: 1, scope: !44, file: !21, line: 16, type: !13)
!46 = !DILocation(line: 16, column: 20, scope: !44)
!47 = !DILocalVariable(name: "q", arg: 2, scope: !44, file: !21, line: 16, type: !13)
!48 = !DILocation(line: 16, column: 29, scope: !44)
!49 = !DILocation(line: 17, column: 3, scope: !44)
!50 = !DILocation(line: 18, column: 1, scope: !44)
!51 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !21, file: !21, line: 20, type: !22, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocalVariable(name: "p", arg: 1, scope: !51, file: !21, line: 20, type: !13)
!53 = !DILocation(line: 20, column: 34, scope: !51)
!54 = !DILocalVariable(name: "q", arg: 2, scope: !51, file: !21, line: 20, type: !13)
!55 = !DILocation(line: 20, column: 43, scope: !51)
!56 = !DILocation(line: 21, column: 3, scope: !51)
!57 = !DILocation(line: 22, column: 1, scope: !51)
!58 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !21, file: !21, line: 24, type: !22, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!59 = !DILocalVariable(name: "p", arg: 1, scope: !58, file: !21, line: 24, type: !13)
!60 = !DILocation(line: 24, column: 33, scope: !58)
!61 = !DILocalVariable(name: "q", arg: 2, scope: !58, file: !21, line: 24, type: !13)
!62 = !DILocation(line: 24, column: 42, scope: !58)
!63 = !DILocation(line: 25, column: 3, scope: !58)
!64 = !DILocation(line: 26, column: 1, scope: !58)
!65 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !21, file: !21, line: 29, type: !66, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!66 = !DISubroutineType(types: !67)
!67 = !{!13, !68}
!68 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!69 = !DILocalVariable(name: "n", arg: 1, scope: !65, file: !21, line: 29, type: !68)
!70 = !DILocation(line: 29, column: 22, scope: !65)
!71 = !DILocation(line: 30, column: 17, scope: !65)
!72 = !DILocation(line: 30, column: 10, scope: !65)
!73 = !DILocation(line: 30, column: 3, scope: !65)
!74 = distinct !DISubprogram(name: "PLKMALLOC", scope: !21, file: !21, line: 33, type: !66, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!75 = !DILocalVariable(name: "n", arg: 1, scope: !74, file: !21, line: 33, type: !68)
!76 = !DILocation(line: 33, column: 21, scope: !74)
!77 = !DILocation(line: 34, column: 17, scope: !74)
!78 = !DILocation(line: 34, column: 10, scope: !74)
!79 = !DILocation(line: 34, column: 3, scope: !74)
!80 = distinct !DISubprogram(name: "NFRMALLOC", scope: !21, file: !21, line: 37, type: !66, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!81 = !DILocalVariable(name: "n", arg: 1, scope: !80, file: !21, line: 37, type: !68)
!82 = !DILocation(line: 37, column: 21, scope: !80)
!83 = !DILocation(line: 38, column: 17, scope: !80)
!84 = !DILocation(line: 38, column: 10, scope: !80)
!85 = !DILocation(line: 38, column: 3, scope: !80)
!86 = distinct !DISubprogram(name: "CLKMALLOC", scope: !21, file: !21, line: 41, type: !66, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!87 = !DILocalVariable(name: "n", arg: 1, scope: !86, file: !21, line: 41, type: !68)
!88 = !DILocation(line: 41, column: 21, scope: !86)
!89 = !DILocation(line: 42, column: 17, scope: !86)
!90 = !DILocation(line: 42, column: 10, scope: !86)
!91 = !DILocation(line: 42, column: 3, scope: !86)
!92 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !21, file: !21, line: 45, type: !66, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!93 = !DILocalVariable(name: "n", arg: 1, scope: !92, file: !21, line: 45, type: !68)
!94 = !DILocation(line: 45, column: 21, scope: !92)
!95 = !DILocation(line: 46, column: 17, scope: !92)
!96 = !DILocation(line: 46, column: 10, scope: !92)
!97 = !DILocation(line: 46, column: 3, scope: !92)
!98 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !21, file: !21, line: 49, type: !66, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!99 = !DILocalVariable(name: "n", arg: 1, scope: !98, file: !21, line: 49, type: !68)
!100 = !DILocation(line: 49, column: 21, scope: !98)
!101 = !DILocation(line: 50, column: 17, scope: !98)
!102 = !DILocation(line: 50, column: 10, scope: !98)
!103 = !DILocation(line: 50, column: 3, scope: !98)
!104 = distinct !DISubprogram(name: "LEAKFN", scope: !21, file: !21, line: 53, type: !66, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!105 = !DILocalVariable(name: "n", arg: 1, scope: !104, file: !21, line: 53, type: !68)
!106 = !DILocation(line: 53, column: 18, scope: !104)
!107 = !DILocation(line: 54, column: 17, scope: !104)
!108 = !DILocation(line: 54, column: 10, scope: !104)
!109 = !DILocation(line: 54, column: 3, scope: !104)
!110 = distinct !DISubprogram(name: "RC_ACCESS", scope: !21, file: !21, line: 63, type: !111, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!111 = !DISubroutineType(types: !112)
!112 = !{null, !68, !68}
!113 = !DILocalVariable(name: "id", arg: 1, scope: !110, file: !21, line: 63, type: !68)
!114 = !DILocation(line: 63, column: 20, scope: !110)
!115 = !DILocalVariable(name: "flags", arg: 2, scope: !110, file: !21, line: 63, type: !68)
!116 = !DILocation(line: 63, column: 28, scope: !110)
!117 = !DILocation(line: 64, column: 3, scope: !110)
!118 = !DILocation(line: 65, column: 1, scope: !110)
!119 = distinct !DISubprogram(name: "CXT_THREAD", scope: !21, file: !21, line: 75, type: !120, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!120 = !DISubroutineType(types: !121)
!121 = !{null, !68, !10}
!122 = !DILocalVariable(name: "thdid", arg: 1, scope: !119, file: !21, line: 75, type: !68)
!123 = !DILocation(line: 75, column: 21, scope: !119)
!124 = !DILocalVariable(name: "cxt", arg: 2, scope: !119, file: !21, line: 75, type: !10)
!125 = !DILocation(line: 75, column: 34, scope: !119)
!126 = !DILocation(line: 77, column: 1, scope: !119)
!127 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !21, file: !21, line: 78, type: !120, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!128 = !DILocalVariable(name: "thdid", arg: 1, scope: !127, file: !21, line: 78, type: !68)
!129 = !DILocation(line: 78, column: 21, scope: !127)
!130 = !DILocalVariable(name: "cxt", arg: 2, scope: !127, file: !21, line: 78, type: !10)
!131 = !DILocation(line: 78, column: 33, scope: !127)
!132 = !DILocation(line: 80, column: 1, scope: !127)
!133 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !21, file: !21, line: 81, type: !134, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!134 = !DISubroutineType(types: !135)
!135 = !{null, !68, !10, !10}
!136 = !DILocalVariable(name: "thdid", arg: 1, scope: !133, file: !21, line: 81, type: !68)
!137 = !DILocation(line: 81, column: 26, scope: !133)
!138 = !DILocalVariable(name: "cxt", arg: 2, scope: !133, file: !21, line: 81, type: !10)
!139 = !DILocation(line: 81, column: 38, scope: !133)
!140 = !DILocalVariable(name: "lev", arg: 3, scope: !133, file: !21, line: 81, type: !10)
!141 = !DILocation(line: 81, column: 49, scope: !133)
!142 = !DILocation(line: 83, column: 1, scope: !133)
!143 = distinct !DISubprogram(name: "LOCK", scope: !21, file: !21, line: 85, type: !144, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !10}
!146 = !DILocalVariable(name: "lockname", arg: 1, scope: !143, file: !21, line: 85, type: !10)
!147 = !DILocation(line: 85, column: 17, scope: !143)
!148 = !DILocation(line: 87, column: 1, scope: !143)
!149 = distinct !DISubprogram(name: "PAUSE", scope: !21, file: !21, line: 89, type: !144, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!150 = !DILocalVariable(name: "str", arg: 1, scope: !149, file: !21, line: 89, type: !10)
!151 = !DILocation(line: 89, column: 18, scope: !149)
!152 = !DILocation(line: 90, column: 18, scope: !149)
!153 = !DILocation(line: 90, column: 3, scope: !149)
!154 = !DILocation(line: 91, column: 3, scope: !149)
!155 = !DILocation(line: 92, column: 3, scope: !149)
!156 = !DILocation(line: 93, column: 1, scope: !149)
!157 = distinct !DISubprogram(name: "deref", scope: !21, file: !21, line: 111, type: !158, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!158 = !DISubroutineType(types: !159)
!159 = !{null}
!160 = !DILocation(line: 111, column: 20, scope: !157)
!161 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 16, type: !162, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!162 = !DISubroutineType(types: !163)
!163 = !{!68, !68}
!164 = !DILocalVariable(name: "arg1", arg: 1, scope: !161, file: !6, line: 16, type: !68)
!165 = !DILocation(line: 16, column: 14, scope: !161)
!166 = !DILocalVariable(name: "p", scope: !161, file: !6, line: 17, type: !4)
!167 = !DILocation(line: 17, column: 5, scope: !161)
!168 = !DILocalVariable(name: "str1", scope: !161, file: !6, line: 18, type: !169)
!169 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 80, elements: !170)
!170 = !{!171}
!171 = !DISubrange(count: 10)
!172 = !DILocation(line: 18, column: 7, scope: !161)
!173 = !DILocalVariable(name: "str2", scope: !161, file: !6, line: 19, type: !169)
!174 = !DILocation(line: 19, column: 7, scope: !161)
!175 = !DILocation(line: 21, column: 11, scope: !161)
!176 = !DILocation(line: 21, column: 6, scope: !161)
!177 = !DILocation(line: 21, column: 4, scope: !161)
!178 = !DILocation(line: 22, column: 6, scope: !179)
!179 = distinct !DILexicalBlock(scope: !161, file: !6, line: 22, column: 6)
!180 = !DILocation(line: 22, column: 8, scope: !179)
!181 = !DILocation(line: 22, column: 6, scope: !161)
!182 = !DILocation(line: 23, column: 3, scope: !179)
!183 = !DILocation(line: 25, column: 19, scope: !161)
!184 = !DILocation(line: 25, column: 2, scope: !161)
!185 = !DILocation(line: 25, column: 5, scope: !161)
!186 = !DILocation(line: 25, column: 8, scope: !161)
!187 = !DILocation(line: 26, column: 6, scope: !188)
!188 = distinct !DILexicalBlock(scope: !161, file: !6, line: 26, column: 6)
!189 = !DILocation(line: 26, column: 9, scope: !188)
!190 = !DILocation(line: 26, column: 12, scope: !188)
!191 = !DILocation(line: 26, column: 6, scope: !161)
!192 = !DILocation(line: 27, column: 8, scope: !193)
!193 = distinct !DILexicalBlock(scope: !188, file: !6, line: 26, column: 21)
!194 = !DILocation(line: 27, column: 3, scope: !193)
!195 = !DILocation(line: 28, column: 3, scope: !193)
!196 = !DILocation(line: 31, column: 19, scope: !161)
!197 = !DILocation(line: 31, column: 2, scope: !161)
!198 = !DILocation(line: 31, column: 5, scope: !161)
!199 = !DILocation(line: 31, column: 8, scope: !161)
!200 = !DILocation(line: 32, column: 6, scope: !201)
!201 = distinct !DILexicalBlock(scope: !161, file: !6, line: 32, column: 6)
!202 = !DILocation(line: 32, column: 9, scope: !201)
!203 = !DILocation(line: 32, column: 12, scope: !201)
!204 = !DILocation(line: 32, column: 6, scope: !161)
!205 = !DILocation(line: 33, column: 7, scope: !206)
!206 = distinct !DILexicalBlock(scope: !207, file: !6, line: 33, column: 7)
!207 = distinct !DILexicalBlock(scope: !201, file: !6, line: 32, column: 21)
!208 = !DILocation(line: 33, column: 10, scope: !206)
!209 = !DILocation(line: 33, column: 13, scope: !206)
!210 = !DILocation(line: 33, column: 7, scope: !207)
!211 = !DILocation(line: 34, column: 9, scope: !206)
!212 = !DILocation(line: 34, column: 12, scope: !206)
!213 = !DILocation(line: 34, column: 4, scope: !206)
!214 = !DILocation(line: 35, column: 8, scope: !207)
!215 = !DILocation(line: 35, column: 3, scope: !207)
!216 = !DILocation(line: 36, column: 3, scope: !207)
!217 = !DILocation(line: 39, column: 9, scope: !161)
!218 = !DILocation(line: 39, column: 12, scope: !161)
!219 = !DILocation(line: 39, column: 16, scope: !161)
!220 = !DILocation(line: 39, column: 2, scope: !161)
!221 = !DILocation(line: 40, column: 9, scope: !161)
!222 = !DILocation(line: 40, column: 12, scope: !161)
!223 = !DILocation(line: 40, column: 16, scope: !161)
!224 = !DILocation(line: 40, column: 2, scope: !161)
!225 = !DILocation(line: 42, column: 7, scope: !161)
!226 = !DILocation(line: 42, column: 10, scope: !161)
!227 = !DILocation(line: 42, column: 2, scope: !161)
!228 = !DILocation(line: 43, column: 7, scope: !161)
!229 = !DILocation(line: 43, column: 10, scope: !161)
!230 = !DILocation(line: 43, column: 2, scope: !161)
!231 = !DILocation(line: 44, column: 7, scope: !161)
!232 = !DILocation(line: 44, column: 2, scope: !161)
!233 = !DILocation(line: 45, column: 9, scope: !161)
!234 = !DILocation(line: 45, column: 2, scope: !161)
!235 = !DILocation(line: 46, column: 1, scope: !161)
