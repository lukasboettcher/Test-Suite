; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp12a.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp12a.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@G = dso_local global i32 0, align 4, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !14 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !23
  ret void, !dbg !24
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !25 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !26, metadata !DIExpression()), !dbg !27
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !30
  ret void, !dbg !31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !32 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !33, metadata !DIExpression()), !dbg !34
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !35, metadata !DIExpression()), !dbg !36
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !37
  ret void, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !39 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !40, metadata !DIExpression()), !dbg !41
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !44
  ret void, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !46 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !47, metadata !DIExpression()), !dbg !48
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !51
  ret void, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !53 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !54, metadata !DIExpression()), !dbg !55
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !58
  ret void, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !60 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !63, metadata !DIExpression()), !dbg !64
  %0 = load i32, i32* %n.addr, align 4, !dbg !65
  %conv = sext i32 %0 to i64, !dbg !65
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !66
  ret i8* %call, !dbg !67
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !68 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %0 = load i32, i32* %n.addr, align 4, !dbg !71
  %conv = sext i32 %0 to i64, !dbg !71
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !72
  ret i8* %call, !dbg !73
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !74 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %0 = load i32, i32* %n.addr, align 4, !dbg !77
  %conv = sext i32 %0 to i64, !dbg !77
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !78
  ret i8* %call, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !80 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %0 = load i32, i32* %n.addr, align 4, !dbg !83
  %conv = sext i32 %0 to i64, !dbg !83
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !84
  ret i8* %call, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !86 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %0 = load i32, i32* %n.addr, align 4, !dbg !89
  %conv = sext i32 %0 to i64, !dbg !89
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !90
  ret i8* %call, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !92 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %0 = load i32, i32* %n.addr, align 4, !dbg !95
  %conv = sext i32 %0 to i64, !dbg !95
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !96
  ret i8* %call, !dbg !97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !98 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, i32* %n.addr, align 4, !dbg !101
  %conv = sext i32 %0 to i64, !dbg !101
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !102
  ret i8* %call, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !104 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !107, metadata !DIExpression()), !dbg !108
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !109, metadata !DIExpression()), !dbg !110
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !111
  ret void, !dbg !112
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !113 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !118, metadata !DIExpression()), !dbg !119
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !120, metadata !DIExpression()), !dbg !121
  ret void, !dbg !122
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !123 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !124, metadata !DIExpression()), !dbg !125
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !126, metadata !DIExpression()), !dbg !127
  ret void, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !129 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !132, metadata !DIExpression()), !dbg !133
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !134, metadata !DIExpression()), !dbg !135
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !136, metadata !DIExpression()), !dbg !137
  ret void, !dbg !138
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !139 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !142, metadata !DIExpression()), !dbg !143
  ret void, !dbg !144
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !145 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !146, metadata !DIExpression()), !dbg !147
  %0 = load i8*, i8** %str.addr, align 8, !dbg !148
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !149
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !150
  %call2 = call i32 @getchar(), !dbg !151
  ret void, !dbg !152
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !153 {
entry:
  ret void, !dbg !156
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !157 {
entry:
  %i = alloca i32, align 4
  %p = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !158, metadata !DIExpression()), !dbg !159
  call void @llvm.dbg.declare(metadata i32** %p, metadata !160, metadata !DIExpression()), !dbg !162
  %call = call i8* @PLKMALLOC(i32 100), !dbg !163
  %0 = bitcast i8* %call to i32*, !dbg !163
  store i32* %0, i32** %p, align 8, !dbg !162
  store i32 0, i32* %i, align 4, !dbg !164
  br label %for.cond, !dbg !166

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !167
  %cmp = icmp sle i32 %1, 10, !dbg !169
  br i1 %cmp, label %for.body, label %for.end, !dbg !170

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* @G, align 4, !dbg !171
  %tobool = icmp ne i32 %2, 0, !dbg !171
  br i1 %tobool, label %if.then, label %if.end, !dbg !174

if.then:                                          ; preds = %for.body
  %3 = load i32*, i32** %p, align 8, !dbg !175
  %4 = bitcast i32* %3 to i8*, !dbg !175
  call void @free(i8* %4) #4, !dbg !177
  br label %for.end, !dbg !178

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !179

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !180
  %inc = add nsw i32 %5, 1, !dbg !180
  store i32 %inc, i32* %i, align 4, !dbg !180
  br label %for.cond, !dbg !181, !llvm.loop !182

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !185
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!8, !9, !10, !11, !12}
!llvm.ident = !{!13}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "G", scope: !2, file: !6, line: 10, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp12a.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "src/mem_leak/sp12a.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{i32 7, !"Dwarf Version", i32 4}
!9 = !{i32 2, !"Debug Info Version", i32 3}
!10 = !{i32 1, !"wchar_size", i32 4}
!11 = !{i32 7, !"uwtable", i32 1}
!12 = !{i32 7, !"frame-pointer", i32 2}
!13 = !{!"clang version 13.0.0"}
!14 = distinct !DISubprogram(name: "MUSTALIAS", scope: !15, file: !15, line: 4, type: !16, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!15 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!16 = !DISubroutineType(types: !17)
!17 = !{null, !18, !18}
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!19 = !DILocalVariable(name: "p", arg: 1, scope: !14, file: !15, line: 4, type: !18)
!20 = !DILocation(line: 4, column: 22, scope: !14)
!21 = !DILocalVariable(name: "q", arg: 2, scope: !14, file: !15, line: 4, type: !18)
!22 = !DILocation(line: 4, column: 31, scope: !14)
!23 = !DILocation(line: 5, column: 3, scope: !14)
!24 = !DILocation(line: 6, column: 1, scope: !14)
!25 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !15, file: !15, line: 8, type: !16, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!26 = !DILocalVariable(name: "p", arg: 1, scope: !25, file: !15, line: 8, type: !18)
!27 = !DILocation(line: 8, column: 25, scope: !25)
!28 = !DILocalVariable(name: "q", arg: 2, scope: !25, file: !15, line: 8, type: !18)
!29 = !DILocation(line: 8, column: 34, scope: !25)
!30 = !DILocation(line: 9, column: 3, scope: !25)
!31 = !DILocation(line: 10, column: 1, scope: !25)
!32 = distinct !DISubprogram(name: "MAYALIAS", scope: !15, file: !15, line: 12, type: !16, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!33 = !DILocalVariable(name: "p", arg: 1, scope: !32, file: !15, line: 12, type: !18)
!34 = !DILocation(line: 12, column: 21, scope: !32)
!35 = !DILocalVariable(name: "q", arg: 2, scope: !32, file: !15, line: 12, type: !18)
!36 = !DILocation(line: 12, column: 30, scope: !32)
!37 = !DILocation(line: 13, column: 3, scope: !32)
!38 = !DILocation(line: 14, column: 1, scope: !32)
!39 = distinct !DISubprogram(name: "NOALIAS", scope: !15, file: !15, line: 16, type: !16, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!40 = !DILocalVariable(name: "p", arg: 1, scope: !39, file: !15, line: 16, type: !18)
!41 = !DILocation(line: 16, column: 20, scope: !39)
!42 = !DILocalVariable(name: "q", arg: 2, scope: !39, file: !15, line: 16, type: !18)
!43 = !DILocation(line: 16, column: 29, scope: !39)
!44 = !DILocation(line: 17, column: 3, scope: !39)
!45 = !DILocation(line: 18, column: 1, scope: !39)
!46 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !15, file: !15, line: 20, type: !16, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!47 = !DILocalVariable(name: "p", arg: 1, scope: !46, file: !15, line: 20, type: !18)
!48 = !DILocation(line: 20, column: 34, scope: !46)
!49 = !DILocalVariable(name: "q", arg: 2, scope: !46, file: !15, line: 20, type: !18)
!50 = !DILocation(line: 20, column: 43, scope: !46)
!51 = !DILocation(line: 21, column: 3, scope: !46)
!52 = !DILocation(line: 22, column: 1, scope: !46)
!53 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !15, file: !15, line: 24, type: !16, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!54 = !DILocalVariable(name: "p", arg: 1, scope: !53, file: !15, line: 24, type: !18)
!55 = !DILocation(line: 24, column: 33, scope: !53)
!56 = !DILocalVariable(name: "q", arg: 2, scope: !53, file: !15, line: 24, type: !18)
!57 = !DILocation(line: 24, column: 42, scope: !53)
!58 = !DILocation(line: 25, column: 3, scope: !53)
!59 = !DILocation(line: 26, column: 1, scope: !53)
!60 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !15, file: !15, line: 29, type: !61, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!61 = !DISubroutineType(types: !62)
!62 = !{!18, !7}
!63 = !DILocalVariable(name: "n", arg: 1, scope: !60, file: !15, line: 29, type: !7)
!64 = !DILocation(line: 29, column: 22, scope: !60)
!65 = !DILocation(line: 30, column: 17, scope: !60)
!66 = !DILocation(line: 30, column: 10, scope: !60)
!67 = !DILocation(line: 30, column: 3, scope: !60)
!68 = distinct !DISubprogram(name: "PLKMALLOC", scope: !15, file: !15, line: 33, type: !61, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!69 = !DILocalVariable(name: "n", arg: 1, scope: !68, file: !15, line: 33, type: !7)
!70 = !DILocation(line: 33, column: 21, scope: !68)
!71 = !DILocation(line: 34, column: 17, scope: !68)
!72 = !DILocation(line: 34, column: 10, scope: !68)
!73 = !DILocation(line: 34, column: 3, scope: !68)
!74 = distinct !DISubprogram(name: "NFRMALLOC", scope: !15, file: !15, line: 37, type: !61, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!75 = !DILocalVariable(name: "n", arg: 1, scope: !74, file: !15, line: 37, type: !7)
!76 = !DILocation(line: 37, column: 21, scope: !74)
!77 = !DILocation(line: 38, column: 17, scope: !74)
!78 = !DILocation(line: 38, column: 10, scope: !74)
!79 = !DILocation(line: 38, column: 3, scope: !74)
!80 = distinct !DISubprogram(name: "CLKMALLOC", scope: !15, file: !15, line: 41, type: !61, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!81 = !DILocalVariable(name: "n", arg: 1, scope: !80, file: !15, line: 41, type: !7)
!82 = !DILocation(line: 41, column: 21, scope: !80)
!83 = !DILocation(line: 42, column: 17, scope: !80)
!84 = !DILocation(line: 42, column: 10, scope: !80)
!85 = !DILocation(line: 42, column: 3, scope: !80)
!86 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !15, file: !15, line: 45, type: !61, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!87 = !DILocalVariable(name: "n", arg: 1, scope: !86, file: !15, line: 45, type: !7)
!88 = !DILocation(line: 45, column: 21, scope: !86)
!89 = !DILocation(line: 46, column: 17, scope: !86)
!90 = !DILocation(line: 46, column: 10, scope: !86)
!91 = !DILocation(line: 46, column: 3, scope: !86)
!92 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !15, file: !15, line: 49, type: !61, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!93 = !DILocalVariable(name: "n", arg: 1, scope: !92, file: !15, line: 49, type: !7)
!94 = !DILocation(line: 49, column: 21, scope: !92)
!95 = !DILocation(line: 50, column: 17, scope: !92)
!96 = !DILocation(line: 50, column: 10, scope: !92)
!97 = !DILocation(line: 50, column: 3, scope: !92)
!98 = distinct !DISubprogram(name: "LEAKFN", scope: !15, file: !15, line: 53, type: !61, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!99 = !DILocalVariable(name: "n", arg: 1, scope: !98, file: !15, line: 53, type: !7)
!100 = !DILocation(line: 53, column: 18, scope: !98)
!101 = !DILocation(line: 54, column: 17, scope: !98)
!102 = !DILocation(line: 54, column: 10, scope: !98)
!103 = !DILocation(line: 54, column: 3, scope: !98)
!104 = distinct !DISubprogram(name: "RC_ACCESS", scope: !15, file: !15, line: 63, type: !105, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !7, !7}
!107 = !DILocalVariable(name: "id", arg: 1, scope: !104, file: !15, line: 63, type: !7)
!108 = !DILocation(line: 63, column: 20, scope: !104)
!109 = !DILocalVariable(name: "flags", arg: 2, scope: !104, file: !15, line: 63, type: !7)
!110 = !DILocation(line: 63, column: 28, scope: !104)
!111 = !DILocation(line: 64, column: 3, scope: !104)
!112 = !DILocation(line: 65, column: 1, scope: !104)
!113 = distinct !DISubprogram(name: "CXT_THREAD", scope: !15, file: !15, line: 75, type: !114, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!114 = !DISubroutineType(types: !115)
!115 = !{null, !7, !116}
!116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !117, size: 64)
!117 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!118 = !DILocalVariable(name: "thdid", arg: 1, scope: !113, file: !15, line: 75, type: !7)
!119 = !DILocation(line: 75, column: 21, scope: !113)
!120 = !DILocalVariable(name: "cxt", arg: 2, scope: !113, file: !15, line: 75, type: !116)
!121 = !DILocation(line: 75, column: 34, scope: !113)
!122 = !DILocation(line: 77, column: 1, scope: !113)
!123 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !15, file: !15, line: 78, type: !114, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!124 = !DILocalVariable(name: "thdid", arg: 1, scope: !123, file: !15, line: 78, type: !7)
!125 = !DILocation(line: 78, column: 21, scope: !123)
!126 = !DILocalVariable(name: "cxt", arg: 2, scope: !123, file: !15, line: 78, type: !116)
!127 = !DILocation(line: 78, column: 33, scope: !123)
!128 = !DILocation(line: 80, column: 1, scope: !123)
!129 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !15, file: !15, line: 81, type: !130, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!130 = !DISubroutineType(types: !131)
!131 = !{null, !7, !116, !116}
!132 = !DILocalVariable(name: "thdid", arg: 1, scope: !129, file: !15, line: 81, type: !7)
!133 = !DILocation(line: 81, column: 26, scope: !129)
!134 = !DILocalVariable(name: "cxt", arg: 2, scope: !129, file: !15, line: 81, type: !116)
!135 = !DILocation(line: 81, column: 38, scope: !129)
!136 = !DILocalVariable(name: "lev", arg: 3, scope: !129, file: !15, line: 81, type: !116)
!137 = !DILocation(line: 81, column: 49, scope: !129)
!138 = !DILocation(line: 83, column: 1, scope: !129)
!139 = distinct !DISubprogram(name: "LOCK", scope: !15, file: !15, line: 85, type: !140, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !116}
!142 = !DILocalVariable(name: "lockname", arg: 1, scope: !139, file: !15, line: 85, type: !116)
!143 = !DILocation(line: 85, column: 17, scope: !139)
!144 = !DILocation(line: 87, column: 1, scope: !139)
!145 = distinct !DISubprogram(name: "PAUSE", scope: !15, file: !15, line: 89, type: !140, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!146 = !DILocalVariable(name: "str", arg: 1, scope: !145, file: !15, line: 89, type: !116)
!147 = !DILocation(line: 89, column: 18, scope: !145)
!148 = !DILocation(line: 90, column: 18, scope: !145)
!149 = !DILocation(line: 90, column: 3, scope: !145)
!150 = !DILocation(line: 91, column: 3, scope: !145)
!151 = !DILocation(line: 92, column: 3, scope: !145)
!152 = !DILocation(line: 93, column: 1, scope: !145)
!153 = distinct !DISubprogram(name: "deref", scope: !15, file: !15, line: 111, type: !154, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!154 = !DISubroutineType(types: !155)
!155 = !{null}
!156 = !DILocation(line: 111, column: 20, scope: !153)
!157 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 11, type: !154, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!158 = !DILocalVariable(name: "i", scope: !157, file: !6, line: 12, type: !7)
!159 = !DILocation(line: 12, column: 6, scope: !157)
!160 = !DILocalVariable(name: "p", scope: !157, file: !6, line: 12, type: !161)
!161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!162 = !DILocation(line: 12, column: 10, scope: !157)
!163 = !DILocation(line: 12, column: 14, scope: !157)
!164 = !DILocation(line: 13, column: 9, scope: !165)
!165 = distinct !DILexicalBlock(scope: !157, file: !6, line: 13, column: 2)
!166 = !DILocation(line: 13, column: 7, scope: !165)
!167 = !DILocation(line: 13, column: 14, scope: !168)
!168 = distinct !DILexicalBlock(scope: !165, file: !6, line: 13, column: 2)
!169 = !DILocation(line: 13, column: 16, scope: !168)
!170 = !DILocation(line: 13, column: 2, scope: !165)
!171 = !DILocation(line: 14, column: 7, scope: !172)
!172 = distinct !DILexicalBlock(scope: !173, file: !6, line: 14, column: 7)
!173 = distinct !DILexicalBlock(scope: !168, file: !6, line: 13, column: 28)
!174 = !DILocation(line: 14, column: 7, scope: !173)
!175 = !DILocation(line: 15, column: 9, scope: !176)
!176 = distinct !DILexicalBlock(scope: !172, file: !6, line: 14, column: 10)
!177 = !DILocation(line: 15, column: 4, scope: !176)
!178 = !DILocation(line: 16, column: 4, scope: !176)
!179 = !DILocation(line: 18, column: 2, scope: !173)
!180 = !DILocation(line: 13, column: 24, scope: !168)
!181 = !DILocation(line: 13, column: 2, scope: !168)
!182 = distinct !{!182, !170, !183, !184}
!183 = !DILocation(line: 18, column: 2, scope: !165)
!184 = !{!"llvm.loop.mustprogress"}
!185 = !DILocation(line: 19, column: 1, scope: !157)
