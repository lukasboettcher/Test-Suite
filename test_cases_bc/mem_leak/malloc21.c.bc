; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc21.c'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc21.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.FOO = type { i32*, i32*, i32* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"%d,%d,%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !10 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !15, metadata !DIExpression()), !dbg !16
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !17, metadata !DIExpression()), !dbg !18
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !19
  ret void, !dbg !20
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !21 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !22, metadata !DIExpression()), !dbg !23
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !26
  ret void, !dbg !27
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !28 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !29, metadata !DIExpression()), !dbg !30
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !33
  ret void, !dbg !34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !35 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !36, metadata !DIExpression()), !dbg !37
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !40
  ret void, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !42 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !43, metadata !DIExpression()), !dbg !44
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !47
  ret void, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !49 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !56 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %0 = load i32, i32* %n.addr, align 4, !dbg !61
  %conv = sext i32 %0 to i64, !dbg !61
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !62
  ret i8* %call, !dbg !63
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !64 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !65, metadata !DIExpression()), !dbg !66
  %0 = load i32, i32* %n.addr, align 4, !dbg !67
  %conv = sext i32 %0 to i64, !dbg !67
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !68
  ret i8* %call, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !70 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %0 = load i32, i32* %n.addr, align 4, !dbg !73
  %conv = sext i32 %0 to i64, !dbg !73
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !74
  ret i8* %call, !dbg !75
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !76 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !77, metadata !DIExpression()), !dbg !78
  %0 = load i32, i32* %n.addr, align 4, !dbg !79
  %conv = sext i32 %0 to i64, !dbg !79
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !80
  ret i8* %call, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !82 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %0 = load i32, i32* %n.addr, align 4, !dbg !85
  %conv = sext i32 %0 to i64, !dbg !85
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !86
  ret i8* %call, !dbg !87
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !88 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %0 = load i32, i32* %n.addr, align 4, !dbg !91
  %conv = sext i32 %0 to i64, !dbg !91
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !92
  ret i8* %call, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !94 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %0 = load i32, i32* %n.addr, align 4, !dbg !97
  %conv = sext i32 %0 to i64, !dbg !97
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !98
  ret i8* %call, !dbg !99
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !100 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !103, metadata !DIExpression()), !dbg !104
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !107
  ret void, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !109 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !114, metadata !DIExpression()), !dbg !115
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !116, metadata !DIExpression()), !dbg !117
  ret void, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !119 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !120, metadata !DIExpression()), !dbg !121
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !122, metadata !DIExpression()), !dbg !123
  ret void, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !125 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !128, metadata !DIExpression()), !dbg !129
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !130, metadata !DIExpression()), !dbg !131
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !132, metadata !DIExpression()), !dbg !133
  ret void, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !135 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !138, metadata !DIExpression()), !dbg !139
  ret void, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !141 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !142, metadata !DIExpression()), !dbg !143
  %0 = load i8*, i8** %str.addr, align 8, !dbg !144
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !145
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !146
  %call2 = call i32 @getchar(), !dbg !147
  ret void, !dbg !148
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !149 {
entry:
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @getfree(%struct.FOO* %net) #0 !dbg !153 {
entry:
  %net.addr = alloca %struct.FOO*, align 8
  store %struct.FOO* %net, %struct.FOO** %net.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.FOO** %net.addr, metadata !164, metadata !DIExpression()), !dbg !165
  %0 = load %struct.FOO*, %struct.FOO** %net.addr, align 8, !dbg !166
  %f1 = getelementptr inbounds %struct.FOO, %struct.FOO* %0, i32 0, i32 0, !dbg !167
  %1 = load i32*, i32** %f1, align 8, !dbg !167
  %2 = bitcast i32* %1 to i8*, !dbg !166
  call void @free(i8* %2) #4, !dbg !168
  %3 = load %struct.FOO*, %struct.FOO** %net.addr, align 8, !dbg !169
  %f2 = getelementptr inbounds %struct.FOO, %struct.FOO* %3, i32 0, i32 1, !dbg !170
  %4 = load i32*, i32** %f2, align 8, !dbg !170
  %5 = bitcast i32* %4 to i8*, !dbg !169
  call void @free(i8* %5) #4, !dbg !171
  %6 = load %struct.FOO*, %struct.FOO** %net.addr, align 8, !dbg !172
  %f3 = getelementptr inbounds %struct.FOO, %struct.FOO* %6, i32 0, i32 2, !dbg !173
  %7 = load i32*, i32** %f3, align 8, !dbg !173
  %8 = bitcast i32* %7 to i8*, !dbg !172
  call void @free(i8* %8) #4, !dbg !174
  ret void, !dbg !175
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @readmin() #0 !dbg !176 {
entry:
  %net1 = alloca %struct.FOO, align 8
  call void @llvm.dbg.declare(metadata %struct.FOO* %net1, metadata !177, metadata !DIExpression()), !dbg !178
  %call = call i8* @NFRMALLOC(i32 4), !dbg !179
  %0 = bitcast i8* %call to i32*, !dbg !180
  %f1 = getelementptr inbounds %struct.FOO, %struct.FOO* %net1, i32 0, i32 0, !dbg !181
  store i32* %0, i32** %f1, align 8, !dbg !182
  %call1 = call i8* @NFRMALLOC(i32 2), !dbg !183
  %1 = bitcast i8* %call1 to i32*, !dbg !184
  %f2 = getelementptr inbounds %struct.FOO, %struct.FOO* %net1, i32 0, i32 1, !dbg !185
  store i32* %1, i32** %f2, align 8, !dbg !186
  %call2 = call i8* @NFRMALLOC(i32 3), !dbg !187
  %2 = bitcast i8* %call2 to i32*, !dbg !188
  %f3 = getelementptr inbounds %struct.FOO, %struct.FOO* %net1, i32 0, i32 2, !dbg !189
  store i32* %2, i32** %f3, align 8, !dbg !190
  %f13 = getelementptr inbounds %struct.FOO, %struct.FOO* %net1, i32 0, i32 0, !dbg !191
  %3 = load i32*, i32** %f13, align 8, !dbg !191
  %f24 = getelementptr inbounds %struct.FOO, %struct.FOO* %net1, i32 0, i32 1, !dbg !192
  %4 = load i32*, i32** %f24, align 8, !dbg !192
  %f35 = getelementptr inbounds %struct.FOO, %struct.FOO* %net1, i32 0, i32 2, !dbg !193
  %5 = load i32*, i32** %f35, align 8, !dbg !193
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i32* %3, i32* %4, i32* %5), !dbg !194
  ret void, !dbg !195
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !196 {
entry:
  call void @readmin(), !dbg !199
  ret i32 0, !dbg !200
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 11.0.0-2~ubuntu20.04.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc21.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !{i32 7, !"Dwarf Version", i32 4}
!7 = !{i32 2, !"Debug Info Version", i32 3}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{!"Ubuntu clang version 11.0.0-2~ubuntu20.04.1"}
!10 = distinct !DISubprogram(name: "MUSTALIAS", scope: !11, file: !11, line: 4, type: !12, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!11 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!12 = !DISubroutineType(types: !13)
!13 = !{null, !14, !14}
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!15 = !DILocalVariable(name: "p", arg: 1, scope: !10, file: !11, line: 4, type: !14)
!16 = !DILocation(line: 4, column: 22, scope: !10)
!17 = !DILocalVariable(name: "q", arg: 2, scope: !10, file: !11, line: 4, type: !14)
!18 = !DILocation(line: 4, column: 31, scope: !10)
!19 = !DILocation(line: 5, column: 3, scope: !10)
!20 = !DILocation(line: 6, column: 1, scope: !10)
!21 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !11, file: !11, line: 8, type: !12, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!22 = !DILocalVariable(name: "p", arg: 1, scope: !21, file: !11, line: 8, type: !14)
!23 = !DILocation(line: 8, column: 25, scope: !21)
!24 = !DILocalVariable(name: "q", arg: 2, scope: !21, file: !11, line: 8, type: !14)
!25 = !DILocation(line: 8, column: 34, scope: !21)
!26 = !DILocation(line: 9, column: 3, scope: !21)
!27 = !DILocation(line: 10, column: 1, scope: !21)
!28 = distinct !DISubprogram(name: "MAYALIAS", scope: !11, file: !11, line: 12, type: !12, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!29 = !DILocalVariable(name: "p", arg: 1, scope: !28, file: !11, line: 12, type: !14)
!30 = !DILocation(line: 12, column: 21, scope: !28)
!31 = !DILocalVariable(name: "q", arg: 2, scope: !28, file: !11, line: 12, type: !14)
!32 = !DILocation(line: 12, column: 30, scope: !28)
!33 = !DILocation(line: 13, column: 3, scope: !28)
!34 = !DILocation(line: 14, column: 1, scope: !28)
!35 = distinct !DISubprogram(name: "NOALIAS", scope: !11, file: !11, line: 16, type: !12, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!36 = !DILocalVariable(name: "p", arg: 1, scope: !35, file: !11, line: 16, type: !14)
!37 = !DILocation(line: 16, column: 20, scope: !35)
!38 = !DILocalVariable(name: "q", arg: 2, scope: !35, file: !11, line: 16, type: !14)
!39 = !DILocation(line: 16, column: 29, scope: !35)
!40 = !DILocation(line: 17, column: 3, scope: !35)
!41 = !DILocation(line: 18, column: 1, scope: !35)
!42 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !11, file: !11, line: 20, type: !12, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!43 = !DILocalVariable(name: "p", arg: 1, scope: !42, file: !11, line: 20, type: !14)
!44 = !DILocation(line: 20, column: 34, scope: !42)
!45 = !DILocalVariable(name: "q", arg: 2, scope: !42, file: !11, line: 20, type: !14)
!46 = !DILocation(line: 20, column: 43, scope: !42)
!47 = !DILocation(line: 21, column: 3, scope: !42)
!48 = !DILocation(line: 22, column: 1, scope: !42)
!49 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !11, file: !11, line: 24, type: !12, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!50 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !11, line: 24, type: !14)
!51 = !DILocation(line: 24, column: 33, scope: !49)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !11, line: 24, type: !14)
!53 = !DILocation(line: 24, column: 42, scope: !49)
!54 = !DILocation(line: 25, column: 3, scope: !49)
!55 = !DILocation(line: 26, column: 1, scope: !49)
!56 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !11, file: !11, line: 29, type: !57, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!57 = !DISubroutineType(types: !58)
!58 = !{!14, !5}
!59 = !DILocalVariable(name: "n", arg: 1, scope: !56, file: !11, line: 29, type: !5)
!60 = !DILocation(line: 29, column: 22, scope: !56)
!61 = !DILocation(line: 30, column: 17, scope: !56)
!62 = !DILocation(line: 30, column: 10, scope: !56)
!63 = !DILocation(line: 30, column: 3, scope: !56)
!64 = distinct !DISubprogram(name: "PLKMALLOC", scope: !11, file: !11, line: 33, type: !57, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!65 = !DILocalVariable(name: "n", arg: 1, scope: !64, file: !11, line: 33, type: !5)
!66 = !DILocation(line: 33, column: 21, scope: !64)
!67 = !DILocation(line: 34, column: 17, scope: !64)
!68 = !DILocation(line: 34, column: 10, scope: !64)
!69 = !DILocation(line: 34, column: 3, scope: !64)
!70 = distinct !DISubprogram(name: "NFRMALLOC", scope: !11, file: !11, line: 37, type: !57, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!71 = !DILocalVariable(name: "n", arg: 1, scope: !70, file: !11, line: 37, type: !5)
!72 = !DILocation(line: 37, column: 21, scope: !70)
!73 = !DILocation(line: 38, column: 17, scope: !70)
!74 = !DILocation(line: 38, column: 10, scope: !70)
!75 = !DILocation(line: 38, column: 3, scope: !70)
!76 = distinct !DISubprogram(name: "CLKMALLOC", scope: !11, file: !11, line: 41, type: !57, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!77 = !DILocalVariable(name: "n", arg: 1, scope: !76, file: !11, line: 41, type: !5)
!78 = !DILocation(line: 41, column: 21, scope: !76)
!79 = !DILocation(line: 42, column: 17, scope: !76)
!80 = !DILocation(line: 42, column: 10, scope: !76)
!81 = !DILocation(line: 42, column: 3, scope: !76)
!82 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !11, file: !11, line: 45, type: !57, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!83 = !DILocalVariable(name: "n", arg: 1, scope: !82, file: !11, line: 45, type: !5)
!84 = !DILocation(line: 45, column: 21, scope: !82)
!85 = !DILocation(line: 46, column: 17, scope: !82)
!86 = !DILocation(line: 46, column: 10, scope: !82)
!87 = !DILocation(line: 46, column: 3, scope: !82)
!88 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !11, file: !11, line: 49, type: !57, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!89 = !DILocalVariable(name: "n", arg: 1, scope: !88, file: !11, line: 49, type: !5)
!90 = !DILocation(line: 49, column: 21, scope: !88)
!91 = !DILocation(line: 50, column: 17, scope: !88)
!92 = !DILocation(line: 50, column: 10, scope: !88)
!93 = !DILocation(line: 50, column: 3, scope: !88)
!94 = distinct !DISubprogram(name: "LEAKFN", scope: !11, file: !11, line: 53, type: !57, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!95 = !DILocalVariable(name: "n", arg: 1, scope: !94, file: !11, line: 53, type: !5)
!96 = !DILocation(line: 53, column: 18, scope: !94)
!97 = !DILocation(line: 54, column: 17, scope: !94)
!98 = !DILocation(line: 54, column: 10, scope: !94)
!99 = !DILocation(line: 54, column: 3, scope: !94)
!100 = distinct !DISubprogram(name: "RC_ACCESS", scope: !11, file: !11, line: 63, type: !101, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !5, !5}
!103 = !DILocalVariable(name: "id", arg: 1, scope: !100, file: !11, line: 63, type: !5)
!104 = !DILocation(line: 63, column: 20, scope: !100)
!105 = !DILocalVariable(name: "flags", arg: 2, scope: !100, file: !11, line: 63, type: !5)
!106 = !DILocation(line: 63, column: 28, scope: !100)
!107 = !DILocation(line: 64, column: 3, scope: !100)
!108 = !DILocation(line: 65, column: 1, scope: !100)
!109 = distinct !DISubprogram(name: "CXT_THREAD", scope: !11, file: !11, line: 75, type: !110, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!110 = !DISubroutineType(types: !111)
!111 = !{null, !5, !112}
!112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !113, size: 64)
!113 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!114 = !DILocalVariable(name: "thdid", arg: 1, scope: !109, file: !11, line: 75, type: !5)
!115 = !DILocation(line: 75, column: 21, scope: !109)
!116 = !DILocalVariable(name: "cxt", arg: 2, scope: !109, file: !11, line: 75, type: !112)
!117 = !DILocation(line: 75, column: 34, scope: !109)
!118 = !DILocation(line: 77, column: 1, scope: !109)
!119 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !11, file: !11, line: 78, type: !110, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!120 = !DILocalVariable(name: "thdid", arg: 1, scope: !119, file: !11, line: 78, type: !5)
!121 = !DILocation(line: 78, column: 21, scope: !119)
!122 = !DILocalVariable(name: "cxt", arg: 2, scope: !119, file: !11, line: 78, type: !112)
!123 = !DILocation(line: 78, column: 33, scope: !119)
!124 = !DILocation(line: 80, column: 1, scope: !119)
!125 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !11, file: !11, line: 81, type: !126, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!126 = !DISubroutineType(types: !127)
!127 = !{null, !5, !112, !112}
!128 = !DILocalVariable(name: "thdid", arg: 1, scope: !125, file: !11, line: 81, type: !5)
!129 = !DILocation(line: 81, column: 26, scope: !125)
!130 = !DILocalVariable(name: "cxt", arg: 2, scope: !125, file: !11, line: 81, type: !112)
!131 = !DILocation(line: 81, column: 38, scope: !125)
!132 = !DILocalVariable(name: "lev", arg: 3, scope: !125, file: !11, line: 81, type: !112)
!133 = !DILocation(line: 81, column: 49, scope: !125)
!134 = !DILocation(line: 83, column: 1, scope: !125)
!135 = distinct !DISubprogram(name: "LOCK", scope: !11, file: !11, line: 85, type: !136, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !112}
!138 = !DILocalVariable(name: "lockname", arg: 1, scope: !135, file: !11, line: 85, type: !112)
!139 = !DILocation(line: 85, column: 17, scope: !135)
!140 = !DILocation(line: 87, column: 1, scope: !135)
!141 = distinct !DISubprogram(name: "PAUSE", scope: !11, file: !11, line: 89, type: !136, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!142 = !DILocalVariable(name: "str", arg: 1, scope: !141, file: !11, line: 89, type: !112)
!143 = !DILocation(line: 89, column: 18, scope: !141)
!144 = !DILocation(line: 90, column: 18, scope: !141)
!145 = !DILocation(line: 90, column: 3, scope: !141)
!146 = !DILocation(line: 91, column: 3, scope: !141)
!147 = !DILocation(line: 92, column: 3, scope: !141)
!148 = !DILocation(line: 93, column: 1, scope: !141)
!149 = distinct !DISubprogram(name: "deref", scope: !11, file: !11, line: 111, type: !150, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!150 = !DISubroutineType(types: !151)
!151 = !{null}
!152 = !DILocation(line: 111, column: 20, scope: !149)
!153 = distinct !DISubprogram(name: "getfree", scope: !154, file: !154, line: 18, type: !155, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!154 = !DIFile(filename: "src/mem_leak/malloc21.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!155 = !DISubroutineType(types: !156)
!156 = !{null, !157}
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!158 = !DIDerivedType(tag: DW_TAG_typedef, name: "FOO", file: !154, line: 14, baseType: !159)
!159 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !154, line: 10, size: 192, elements: !160)
!160 = !{!161, !162, !163}
!161 = !DIDerivedType(tag: DW_TAG_member, name: "f1", scope: !159, file: !154, line: 11, baseType: !4, size: 64)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "f2", scope: !159, file: !154, line: 12, baseType: !4, size: 64, offset: 64)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "f3", scope: !159, file: !154, line: 13, baseType: !4, size: 64, offset: 128)
!164 = !DILocalVariable(name: "net", arg: 1, scope: !153, file: !154, line: 18, type: !157)
!165 = !DILocation(line: 18, column: 19, scope: !153)
!166 = !DILocation(line: 20, column: 7, scope: !153)
!167 = !DILocation(line: 20, column: 12, scope: !153)
!168 = !DILocation(line: 20, column: 2, scope: !153)
!169 = !DILocation(line: 21, column: 7, scope: !153)
!170 = !DILocation(line: 21, column: 12, scope: !153)
!171 = !DILocation(line: 21, column: 2, scope: !153)
!172 = !DILocation(line: 22, column: 7, scope: !153)
!173 = !DILocation(line: 22, column: 12, scope: !153)
!174 = !DILocation(line: 22, column: 2, scope: !153)
!175 = !DILocation(line: 23, column: 1, scope: !153)
!176 = distinct !DISubprogram(name: "readmin", scope: !154, file: !154, line: 25, type: !150, scopeLine: 25, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!177 = !DILocalVariable(name: "net1", scope: !176, file: !154, line: 26, type: !158)
!178 = !DILocation(line: 26, column: 6, scope: !176)
!179 = !DILocation(line: 27, column: 18, scope: !176)
!180 = !DILocation(line: 27, column: 12, scope: !176)
!181 = !DILocation(line: 27, column: 7, scope: !176)
!182 = !DILocation(line: 27, column: 10, scope: !176)
!183 = !DILocation(line: 28, column: 18, scope: !176)
!184 = !DILocation(line: 28, column: 12, scope: !176)
!185 = !DILocation(line: 28, column: 7, scope: !176)
!186 = !DILocation(line: 28, column: 10, scope: !176)
!187 = !DILocation(line: 29, column: 18, scope: !176)
!188 = !DILocation(line: 29, column: 12, scope: !176)
!189 = !DILocation(line: 29, column: 7, scope: !176)
!190 = !DILocation(line: 29, column: 10, scope: !176)
!191 = !DILocation(line: 30, column: 25, scope: !176)
!192 = !DILocation(line: 30, column: 33, scope: !176)
!193 = !DILocation(line: 30, column: 41, scope: !176)
!194 = !DILocation(line: 30, column: 2, scope: !176)
!195 = !DILocation(line: 32, column: 1, scope: !176)
!196 = distinct !DISubprogram(name: "main", scope: !154, file: !154, line: 34, type: !197, scopeLine: 34, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!197 = !DISubroutineType(types: !198)
!198 = !{!5}
!199 = !DILocation(line: 36, column: 2, scope: !196)
!200 = !DILocation(line: 38, column: 1, scope: !196)
