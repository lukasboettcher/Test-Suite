; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp4.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp4.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._S = type { i8*, i8* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@__const.main.str1 = private unnamed_addr constant [10 x i8] c"STRING 1\00\00", align 1
@__const.main.str2 = private unnamed_addr constant [10 x i8] c"STRING 2\00\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !18 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !22, metadata !DIExpression()), !dbg !23
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !26
  ret void, !dbg !27
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !28 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !29, metadata !DIExpression()), !dbg !30
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !33
  ret void, !dbg !34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !35 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !36, metadata !DIExpression()), !dbg !37
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !40
  ret void, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !42 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !43, metadata !DIExpression()), !dbg !44
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !47
  ret void, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !49 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !56 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !63 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %0 = load i32, i32* %n.addr, align 4, !dbg !69
  %conv = sext i32 %0 to i64, !dbg !69
  %call = call noalias i8* @malloc(i64 %conv) #5, !dbg !70
  ret i8* %call, !dbg !71
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !72 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %0 = load i32, i32* %n.addr, align 4, !dbg !75
  %conv = sext i32 %0 to i64, !dbg !75
  %call = call noalias i8* @malloc(i64 %conv) #5, !dbg !76
  ret i8* %call, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !78 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %0 = load i32, i32* %n.addr, align 4, !dbg !81
  %conv = sext i32 %0 to i64, !dbg !81
  %call = call noalias i8* @malloc(i64 %conv) #5, !dbg !82
  ret i8* %call, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !84 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %0 = load i32, i32* %n.addr, align 4, !dbg !87
  %conv = sext i32 %0 to i64, !dbg !87
  %call = call noalias i8* @malloc(i64 %conv) #5, !dbg !88
  ret i8* %call, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !90 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %0 = load i32, i32* %n.addr, align 4, !dbg !93
  %conv = sext i32 %0 to i64, !dbg !93
  %call = call noalias i8* @malloc(i64 %conv) #5, !dbg !94
  ret i8* %call, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !96 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, i32* %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias i8* @malloc(i64 %conv) #5, !dbg !100
  ret i8* %call, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !102 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, i32* %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias i8* @malloc(i64 %conv) #5, !dbg !106
  ret i8* %call, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !108 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !111, metadata !DIExpression()), !dbg !112
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !115
  ret void, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !117 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !120, metadata !DIExpression()), !dbg !121
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !122, metadata !DIExpression()), !dbg !123
  ret void, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !125 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !126, metadata !DIExpression()), !dbg !127
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !128, metadata !DIExpression()), !dbg !129
  ret void, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !131 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !134, metadata !DIExpression()), !dbg !135
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !136, metadata !DIExpression()), !dbg !137
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !138, metadata !DIExpression()), !dbg !139
  ret void, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !141 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !144, metadata !DIExpression()), !dbg !145
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !147 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !148, metadata !DIExpression()), !dbg !149
  %0 = load i8*, i8** %str.addr, align 8, !dbg !150
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !151
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !152
  %call2 = call i32 @getchar(), !dbg !153
  ret void, !dbg !154
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !155 {
entry:
  ret void, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %arg1) #0 !dbg !159 {
entry:
  %retval = alloca i32, align 4
  %arg1.addr = alloca i32, align 4
  %p = alloca %struct._S*, align 8
  %str1 = alloca [10 x i8], align 1
  %str2 = alloca [10 x i8], align 1
  store i32 0, i32* %retval, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %arg1.addr, metadata !162, metadata !DIExpression()), !dbg !163
  call void @llvm.dbg.declare(metadata %struct._S** %p, metadata !164, metadata !DIExpression()), !dbg !165
  call void @llvm.dbg.declare(metadata [10 x i8]* %str1, metadata !166, metadata !DIExpression()), !dbg !170
  %0 = bitcast [10 x i8]* %str1 to i8*, !dbg !170
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.main.str1, i32 0, i32 0), i64 10, i1 false), !dbg !170
  call void @llvm.dbg.declare(metadata [10 x i8]* %str2, metadata !171, metadata !DIExpression()), !dbg !172
  %1 = bitcast [10 x i8]* %str2 to i8*, !dbg !172
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.main.str2, i32 0, i32 0), i64 10, i1 false), !dbg !172
  %call = call i8* @SAFEMALLOC(i32 16), !dbg !173
  %2 = bitcast i8* %call to %struct._S*, !dbg !174
  store %struct._S* %2, %struct._S** %p, align 8, !dbg !175
  %3 = load %struct._S*, %struct._S** %p, align 8, !dbg !176
  %cmp = icmp eq %struct._S* %3, null, !dbg !178
  br i1 %cmp, label %if.then, label %if.end, !dbg !179

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !180
  br label %return, !dbg !180

if.end:                                           ; preds = %entry
  %call1 = call i8* @PLKLEAKFP(i32 10), !dbg !181
  %4 = load %struct._S*, %struct._S** %p, align 8, !dbg !182
  %p1 = getelementptr inbounds %struct._S, %struct._S* %4, i32 0, i32 0, !dbg !183
  store i8* %call1, i8** %p1, align 8, !dbg !184
  %5 = load %struct._S*, %struct._S** %p, align 8, !dbg !185
  %p12 = getelementptr inbounds %struct._S, %struct._S* %5, i32 0, i32 0, !dbg !187
  %6 = load i8*, i8** %p12, align 8, !dbg !187
  %cmp3 = icmp eq i8* %6, null, !dbg !188
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !189

if.then4:                                         ; preds = %if.end
  %7 = load %struct._S*, %struct._S** %p, align 8, !dbg !190
  %8 = bitcast %struct._S* %7 to i8*, !dbg !190
  call void @free(i8* %8) #5, !dbg !192
  store i32 -1, i32* %retval, align 4, !dbg !193
  br label %return, !dbg !193

if.end5:                                          ; preds = %if.end
  %9 = load %struct._S*, %struct._S** %p, align 8, !dbg !194
  %p16 = getelementptr inbounds %struct._S, %struct._S* %9, i32 0, i32 0, !dbg !195
  %10 = load i8*, i8** %p16, align 8, !dbg !195
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %str1, i64 0, i64 0, !dbg !196
  %call7 = call i8* @strcpy(i8* %10, i8* %arraydecay), !dbg !197
  %11 = load %struct._S*, %struct._S** %p, align 8, !dbg !198
  %p2 = getelementptr inbounds %struct._S, %struct._S* %11, i32 0, i32 1, !dbg !199
  %12 = load i8*, i8** %p2, align 8, !dbg !199
  %arraydecay8 = getelementptr inbounds [10 x i8], [10 x i8]* %str2, i64 0, i64 0, !dbg !200
  %call9 = call i8* @strcpy(i8* %12, i8* %arraydecay8), !dbg !201
  %13 = load %struct._S*, %struct._S** %p, align 8, !dbg !202
  %p110 = getelementptr inbounds %struct._S, %struct._S* %13, i32 0, i32 0, !dbg !203
  %14 = load i8*, i8** %p110, align 8, !dbg !203
  call void @free(i8* %14) #5, !dbg !204
  %15 = load %struct._S*, %struct._S** %p, align 8, !dbg !205
  %p211 = getelementptr inbounds %struct._S, %struct._S* %15, i32 0, i32 1, !dbg !206
  %16 = load i8*, i8** %p211, align 8, !dbg !206
  call void @free(i8* %16) #5, !dbg !207
  %17 = load %struct._S*, %struct._S** %p, align 8, !dbg !208
  %18 = bitcast %struct._S* %17 to i8*, !dbg !208
  call void @free(i8* %18) #5, !dbg !209
  %19 = load i32, i32* %arg1.addr, align 4, !dbg !210
  store i32 %19, i32* %retval, align 4, !dbg !211
  br label %return, !dbg !211

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !212
  ret i32 %20, !dbg !212
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

declare dso_local i8* @strcpy(i8*, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nosync nounwind willreturn }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!14, !15, !16}
!llvm.ident = !{!17}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 12.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp4.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4, !13, !10}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_typedef, name: "S", file: !6, line: 15, baseType: !7)
!6 = !DIFile(filename: "src/mem_leak/sp4.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_S", file: !6, line: 12, size: 128, elements: !8)
!8 = !{!9, !12}
!9 = !DIDerivedType(tag: DW_TAG_member, name: "p1", scope: !7, file: !6, line: 13, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "p2", scope: !7, file: !6, line: 14, baseType: !10, size: 64, offset: 64)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !{i32 7, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{!"clang version 12.0.0"}
!18 = distinct !DISubprogram(name: "MUSTALIAS", scope: !19, file: !19, line: 4, type: !20, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!19 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!20 = !DISubroutineType(types: !21)
!21 = !{null, !13, !13}
!22 = !DILocalVariable(name: "p", arg: 1, scope: !18, file: !19, line: 4, type: !13)
!23 = !DILocation(line: 4, column: 22, scope: !18)
!24 = !DILocalVariable(name: "q", arg: 2, scope: !18, file: !19, line: 4, type: !13)
!25 = !DILocation(line: 4, column: 31, scope: !18)
!26 = !DILocation(line: 5, column: 3, scope: !18)
!27 = !DILocation(line: 6, column: 1, scope: !18)
!28 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !19, file: !19, line: 8, type: !20, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!29 = !DILocalVariable(name: "p", arg: 1, scope: !28, file: !19, line: 8, type: !13)
!30 = !DILocation(line: 8, column: 25, scope: !28)
!31 = !DILocalVariable(name: "q", arg: 2, scope: !28, file: !19, line: 8, type: !13)
!32 = !DILocation(line: 8, column: 34, scope: !28)
!33 = !DILocation(line: 9, column: 3, scope: !28)
!34 = !DILocation(line: 10, column: 1, scope: !28)
!35 = distinct !DISubprogram(name: "MAYALIAS", scope: !19, file: !19, line: 12, type: !20, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!36 = !DILocalVariable(name: "p", arg: 1, scope: !35, file: !19, line: 12, type: !13)
!37 = !DILocation(line: 12, column: 21, scope: !35)
!38 = !DILocalVariable(name: "q", arg: 2, scope: !35, file: !19, line: 12, type: !13)
!39 = !DILocation(line: 12, column: 30, scope: !35)
!40 = !DILocation(line: 13, column: 3, scope: !35)
!41 = !DILocation(line: 14, column: 1, scope: !35)
!42 = distinct !DISubprogram(name: "NOALIAS", scope: !19, file: !19, line: 16, type: !20, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!43 = !DILocalVariable(name: "p", arg: 1, scope: !42, file: !19, line: 16, type: !13)
!44 = !DILocation(line: 16, column: 20, scope: !42)
!45 = !DILocalVariable(name: "q", arg: 2, scope: !42, file: !19, line: 16, type: !13)
!46 = !DILocation(line: 16, column: 29, scope: !42)
!47 = !DILocation(line: 17, column: 3, scope: !42)
!48 = !DILocation(line: 18, column: 1, scope: !42)
!49 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !19, file: !19, line: 20, type: !20, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!50 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !19, line: 20, type: !13)
!51 = !DILocation(line: 20, column: 34, scope: !49)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !19, line: 20, type: !13)
!53 = !DILocation(line: 20, column: 43, scope: !49)
!54 = !DILocation(line: 21, column: 3, scope: !49)
!55 = !DILocation(line: 22, column: 1, scope: !49)
!56 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !19, file: !19, line: 24, type: !20, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!57 = !DILocalVariable(name: "p", arg: 1, scope: !56, file: !19, line: 24, type: !13)
!58 = !DILocation(line: 24, column: 33, scope: !56)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !56, file: !19, line: 24, type: !13)
!60 = !DILocation(line: 24, column: 42, scope: !56)
!61 = !DILocation(line: 25, column: 3, scope: !56)
!62 = !DILocation(line: 26, column: 1, scope: !56)
!63 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !19, file: !19, line: 29, type: !64, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!64 = !DISubroutineType(types: !65)
!65 = !{!13, !66}
!66 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!67 = !DILocalVariable(name: "n", arg: 1, scope: !63, file: !19, line: 29, type: !66)
!68 = !DILocation(line: 29, column: 22, scope: !63)
!69 = !DILocation(line: 30, column: 17, scope: !63)
!70 = !DILocation(line: 30, column: 10, scope: !63)
!71 = !DILocation(line: 30, column: 3, scope: !63)
!72 = distinct !DISubprogram(name: "PLKMALLOC", scope: !19, file: !19, line: 33, type: !64, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!73 = !DILocalVariable(name: "n", arg: 1, scope: !72, file: !19, line: 33, type: !66)
!74 = !DILocation(line: 33, column: 21, scope: !72)
!75 = !DILocation(line: 34, column: 17, scope: !72)
!76 = !DILocation(line: 34, column: 10, scope: !72)
!77 = !DILocation(line: 34, column: 3, scope: !72)
!78 = distinct !DISubprogram(name: "NFRMALLOC", scope: !19, file: !19, line: 37, type: !64, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!79 = !DILocalVariable(name: "n", arg: 1, scope: !78, file: !19, line: 37, type: !66)
!80 = !DILocation(line: 37, column: 21, scope: !78)
!81 = !DILocation(line: 38, column: 17, scope: !78)
!82 = !DILocation(line: 38, column: 10, scope: !78)
!83 = !DILocation(line: 38, column: 3, scope: !78)
!84 = distinct !DISubprogram(name: "CLKMALLOC", scope: !19, file: !19, line: 41, type: !64, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!85 = !DILocalVariable(name: "n", arg: 1, scope: !84, file: !19, line: 41, type: !66)
!86 = !DILocation(line: 41, column: 21, scope: !84)
!87 = !DILocation(line: 42, column: 17, scope: !84)
!88 = !DILocation(line: 42, column: 10, scope: !84)
!89 = !DILocation(line: 42, column: 3, scope: !84)
!90 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !19, file: !19, line: 45, type: !64, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!91 = !DILocalVariable(name: "n", arg: 1, scope: !90, file: !19, line: 45, type: !66)
!92 = !DILocation(line: 45, column: 21, scope: !90)
!93 = !DILocation(line: 46, column: 17, scope: !90)
!94 = !DILocation(line: 46, column: 10, scope: !90)
!95 = !DILocation(line: 46, column: 3, scope: !90)
!96 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !19, file: !19, line: 49, type: !64, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!97 = !DILocalVariable(name: "n", arg: 1, scope: !96, file: !19, line: 49, type: !66)
!98 = !DILocation(line: 49, column: 21, scope: !96)
!99 = !DILocation(line: 50, column: 17, scope: !96)
!100 = !DILocation(line: 50, column: 10, scope: !96)
!101 = !DILocation(line: 50, column: 3, scope: !96)
!102 = distinct !DISubprogram(name: "LEAKFN", scope: !19, file: !19, line: 53, type: !64, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !102, file: !19, line: 53, type: !66)
!104 = !DILocation(line: 53, column: 18, scope: !102)
!105 = !DILocation(line: 54, column: 17, scope: !102)
!106 = !DILocation(line: 54, column: 10, scope: !102)
!107 = !DILocation(line: 54, column: 3, scope: !102)
!108 = distinct !DISubprogram(name: "RC_ACCESS", scope: !19, file: !19, line: 63, type: !109, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!109 = !DISubroutineType(types: !110)
!110 = !{null, !66, !66}
!111 = !DILocalVariable(name: "id", arg: 1, scope: !108, file: !19, line: 63, type: !66)
!112 = !DILocation(line: 63, column: 20, scope: !108)
!113 = !DILocalVariable(name: "flags", arg: 2, scope: !108, file: !19, line: 63, type: !66)
!114 = !DILocation(line: 63, column: 28, scope: !108)
!115 = !DILocation(line: 64, column: 3, scope: !108)
!116 = !DILocation(line: 65, column: 1, scope: !108)
!117 = distinct !DISubprogram(name: "CXT_THREAD", scope: !19, file: !19, line: 75, type: !118, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!118 = !DISubroutineType(types: !119)
!119 = !{null, !66, !10}
!120 = !DILocalVariable(name: "thdid", arg: 1, scope: !117, file: !19, line: 75, type: !66)
!121 = !DILocation(line: 75, column: 21, scope: !117)
!122 = !DILocalVariable(name: "cxt", arg: 2, scope: !117, file: !19, line: 75, type: !10)
!123 = !DILocation(line: 75, column: 34, scope: !117)
!124 = !DILocation(line: 77, column: 1, scope: !117)
!125 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !19, file: !19, line: 78, type: !118, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!126 = !DILocalVariable(name: "thdid", arg: 1, scope: !125, file: !19, line: 78, type: !66)
!127 = !DILocation(line: 78, column: 21, scope: !125)
!128 = !DILocalVariable(name: "cxt", arg: 2, scope: !125, file: !19, line: 78, type: !10)
!129 = !DILocation(line: 78, column: 33, scope: !125)
!130 = !DILocation(line: 80, column: 1, scope: !125)
!131 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !19, file: !19, line: 81, type: !132, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!132 = !DISubroutineType(types: !133)
!133 = !{null, !66, !10, !10}
!134 = !DILocalVariable(name: "thdid", arg: 1, scope: !131, file: !19, line: 81, type: !66)
!135 = !DILocation(line: 81, column: 26, scope: !131)
!136 = !DILocalVariable(name: "cxt", arg: 2, scope: !131, file: !19, line: 81, type: !10)
!137 = !DILocation(line: 81, column: 38, scope: !131)
!138 = !DILocalVariable(name: "lev", arg: 3, scope: !131, file: !19, line: 81, type: !10)
!139 = !DILocation(line: 81, column: 49, scope: !131)
!140 = !DILocation(line: 83, column: 1, scope: !131)
!141 = distinct !DISubprogram(name: "LOCK", scope: !19, file: !19, line: 85, type: !142, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !10}
!144 = !DILocalVariable(name: "lockname", arg: 1, scope: !141, file: !19, line: 85, type: !10)
!145 = !DILocation(line: 85, column: 17, scope: !141)
!146 = !DILocation(line: 87, column: 1, scope: !141)
!147 = distinct !DISubprogram(name: "PAUSE", scope: !19, file: !19, line: 89, type: !142, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!148 = !DILocalVariable(name: "str", arg: 1, scope: !147, file: !19, line: 89, type: !10)
!149 = !DILocation(line: 89, column: 18, scope: !147)
!150 = !DILocation(line: 90, column: 18, scope: !147)
!151 = !DILocation(line: 90, column: 3, scope: !147)
!152 = !DILocation(line: 91, column: 3, scope: !147)
!153 = !DILocation(line: 92, column: 3, scope: !147)
!154 = !DILocation(line: 93, column: 1, scope: !147)
!155 = distinct !DISubprogram(name: "deref", scope: !19, file: !19, line: 111, type: !156, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!156 = !DISubroutineType(types: !157)
!157 = !{null}
!158 = !DILocation(line: 111, column: 20, scope: !155)
!159 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 17, type: !160, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!160 = !DISubroutineType(types: !161)
!161 = !{!66, !66}
!162 = !DILocalVariable(name: "arg1", arg: 1, scope: !159, file: !6, line: 17, type: !66)
!163 = !DILocation(line: 17, column: 14, scope: !159)
!164 = !DILocalVariable(name: "p", scope: !159, file: !6, line: 19, type: !4)
!165 = !DILocation(line: 19, column: 5, scope: !159)
!166 = !DILocalVariable(name: "str1", scope: !159, file: !6, line: 20, type: !167)
!167 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 80, elements: !168)
!168 = !{!169}
!169 = !DISubrange(count: 10)
!170 = !DILocation(line: 20, column: 7, scope: !159)
!171 = !DILocalVariable(name: "str2", scope: !159, file: !6, line: 21, type: !167)
!172 = !DILocation(line: 21, column: 7, scope: !159)
!173 = !DILocation(line: 23, column: 10, scope: !159)
!174 = !DILocation(line: 23, column: 6, scope: !159)
!175 = !DILocation(line: 23, column: 4, scope: !159)
!176 = !DILocation(line: 24, column: 6, scope: !177)
!177 = distinct !DILexicalBlock(scope: !159, file: !6, line: 24, column: 6)
!178 = !DILocation(line: 24, column: 8, scope: !177)
!179 = !DILocation(line: 24, column: 6, scope: !159)
!180 = !DILocation(line: 25, column: 4, scope: !177)
!181 = !DILocation(line: 27, column: 18, scope: !159)
!182 = !DILocation(line: 27, column: 2, scope: !159)
!183 = !DILocation(line: 27, column: 5, scope: !159)
!184 = !DILocation(line: 27, column: 8, scope: !159)
!185 = !DILocation(line: 28, column: 6, scope: !186)
!186 = distinct !DILexicalBlock(scope: !159, file: !6, line: 28, column: 6)
!187 = !DILocation(line: 28, column: 9, scope: !186)
!188 = !DILocation(line: 28, column: 12, scope: !186)
!189 = !DILocation(line: 28, column: 6, scope: !159)
!190 = !DILocation(line: 29, column: 9, scope: !191)
!191 = distinct !DILexicalBlock(scope: !186, file: !6, line: 28, column: 21)
!192 = !DILocation(line: 29, column: 4, scope: !191)
!193 = !DILocation(line: 30, column: 4, scope: !191)
!194 = !DILocation(line: 41, column: 10, scope: !159)
!195 = !DILocation(line: 41, column: 13, scope: !159)
!196 = !DILocation(line: 41, column: 17, scope: !159)
!197 = !DILocation(line: 41, column: 3, scope: !159)
!198 = !DILocation(line: 42, column: 10, scope: !159)
!199 = !DILocation(line: 42, column: 13, scope: !159)
!200 = !DILocation(line: 42, column: 17, scope: !159)
!201 = !DILocation(line: 42, column: 3, scope: !159)
!202 = !DILocation(line: 44, column: 8, scope: !159)
!203 = !DILocation(line: 44, column: 11, scope: !159)
!204 = !DILocation(line: 44, column: 3, scope: !159)
!205 = !DILocation(line: 45, column: 8, scope: !159)
!206 = !DILocation(line: 45, column: 11, scope: !159)
!207 = !DILocation(line: 45, column: 3, scope: !159)
!208 = !DILocation(line: 46, column: 8, scope: !159)
!209 = !DILocation(line: 46, column: 3, scope: !159)
!210 = !DILocation(line: 47, column: 10, scope: !159)
!211 = !DILocation(line: 47, column: 3, scope: !159)
!212 = !DILocation(line: 48, column: 1, scope: !159)
