; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc58.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc58.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@cimage = dso_local global i8** null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !19 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !24, metadata !DIExpression()), !dbg !25
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !28
  ret void, !dbg !29
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !30 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !31, metadata !DIExpression()), !dbg !32
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !35
  ret void, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !37 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !38, metadata !DIExpression()), !dbg !39
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !42
  ret void, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !44 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !45, metadata !DIExpression()), !dbg !46
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !49
  ret void, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !51 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !58 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !59, metadata !DIExpression()), !dbg !60
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !63
  ret void, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !65 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %0 = load i32, i32* %n.addr, align 4, !dbg !71
  %conv = sext i32 %0 to i64, !dbg !71
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !72
  ret i8* %call, !dbg !73
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !74 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %0 = load i32, i32* %n.addr, align 4, !dbg !77
  %conv = sext i32 %0 to i64, !dbg !77
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !78
  ret i8* %call, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !80 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %0 = load i32, i32* %n.addr, align 4, !dbg !83
  %conv = sext i32 %0 to i64, !dbg !83
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !84
  ret i8* %call, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !86 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %0 = load i32, i32* %n.addr, align 4, !dbg !89
  %conv = sext i32 %0 to i64, !dbg !89
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !90
  ret i8* %call, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !92 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %0 = load i32, i32* %n.addr, align 4, !dbg !95
  %conv = sext i32 %0 to i64, !dbg !95
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !96
  ret i8* %call, !dbg !97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !98 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, i32* %n.addr, align 4, !dbg !101
  %conv = sext i32 %0 to i64, !dbg !101
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !102
  ret i8* %call, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !104 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %0 = load i32, i32* %n.addr, align 4, !dbg !107
  %conv = sext i32 %0 to i64, !dbg !107
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !108
  ret i8* %call, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !110 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !113, metadata !DIExpression()), !dbg !114
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !117
  ret void, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !119 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !122, metadata !DIExpression()), !dbg !123
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !124, metadata !DIExpression()), !dbg !125
  ret void, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !127 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !128, metadata !DIExpression()), !dbg !129
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !130, metadata !DIExpression()), !dbg !131
  ret void, !dbg !132
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !133 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !136, metadata !DIExpression()), !dbg !137
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !138, metadata !DIExpression()), !dbg !139
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !140, metadata !DIExpression()), !dbg !141
  ret void, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !143 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !146, metadata !DIExpression()), !dbg !147
  ret void, !dbg !148
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !149 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !150, metadata !DIExpression()), !dbg !151
  %0 = load i8*, i8** %str.addr, align 8, !dbg !152
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !153
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !154
  %call2 = call i32 @getchar(), !dbg !155
  ret void, !dbg !156
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !157 {
entry:
  ret void, !dbg !160
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !161 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %superbuffer = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !164, metadata !DIExpression()), !dbg !165
  call void @llvm.dbg.declare(metadata i32* %j, metadata !166, metadata !DIExpression()), !dbg !167
  call void @llvm.dbg.declare(metadata i8** %superbuffer, metadata !168, metadata !DIExpression()), !dbg !169
  %call = call i8* @NFRMALLOC(i32 100), !dbg !170
  store i8* %call, i8** %superbuffer, align 8, !dbg !169
  %call1 = call i8* @SAFEMALLOC(i32 80), !dbg !171
  %0 = bitcast i8* %call1 to i8**, !dbg !172
  store i8** %0, i8*** @cimage, align 8, !dbg !173
  store i32 0, i32* %i, align 4, !dbg !174
  br label %for.cond, !dbg !176

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !177
  %cmp = icmp slt i32 %1, 10, !dbg !179
  br i1 %cmp, label %for.body, label %for.end, !dbg !180

for.body:                                         ; preds = %for.cond
  %call2 = call i8* @SAFEMALLOC(i32 10), !dbg !181
  %2 = load i8**, i8*** @cimage, align 8, !dbg !183
  %3 = load i32, i32* %i, align 4, !dbg !184
  %idxprom = sext i32 %3 to i64, !dbg !183
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom, !dbg !183
  store i8* %call2, i8** %arrayidx, align 8, !dbg !185
  br label %for.inc, !dbg !186

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !187
  %inc = add nsw i32 %4, 1, !dbg !187
  store i32 %inc, i32* %i, align 4, !dbg !187
  br label %for.cond, !dbg !188, !llvm.loop !189

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !192
  br label %for.cond3, !dbg !194

for.cond3:                                        ; preds = %for.inc18, %for.end
  %5 = load i32, i32* %i, align 4, !dbg !195
  %cmp4 = icmp slt i32 %5, 10, !dbg !197
  br i1 %cmp4, label %for.body5, label %for.end20, !dbg !198

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4, !dbg !199
  br label %for.cond6, !dbg !202

for.cond6:                                        ; preds = %for.inc15, %for.body5
  %6 = load i32, i32* %j, align 4, !dbg !203
  %cmp7 = icmp slt i32 %6, 10, !dbg !205
  br i1 %cmp7, label %for.body8, label %for.end17, !dbg !206

for.body8:                                        ; preds = %for.cond6
  %7 = load i8*, i8** %superbuffer, align 8, !dbg !207
  %8 = load i32, i32* %i, align 4, !dbg !209
  %mul = mul nsw i32 %8, 10, !dbg !210
  %9 = load i32, i32* %j, align 4, !dbg !211
  %add = add nsw i32 %mul, %9, !dbg !212
  %idxprom9 = sext i32 %add to i64, !dbg !207
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i64 %idxprom9, !dbg !207
  %10 = load i8, i8* %arrayidx10, align 1, !dbg !207
  %11 = load i8**, i8*** @cimage, align 8, !dbg !213
  %12 = load i32, i32* %i, align 4, !dbg !214
  %idxprom11 = sext i32 %12 to i64, !dbg !213
  %arrayidx12 = getelementptr inbounds i8*, i8** %11, i64 %idxprom11, !dbg !213
  %13 = load i8*, i8** %arrayidx12, align 8, !dbg !213
  %14 = load i32, i32* %j, align 4, !dbg !215
  %idxprom13 = sext i32 %14 to i64, !dbg !213
  %arrayidx14 = getelementptr inbounds i8, i8* %13, i64 %idxprom13, !dbg !213
  store i8 %10, i8* %arrayidx14, align 1, !dbg !216
  br label %for.inc15, !dbg !217

for.inc15:                                        ; preds = %for.body8
  %15 = load i32, i32* %j, align 4, !dbg !218
  %inc16 = add nsw i32 %15, 1, !dbg !218
  store i32 %inc16, i32* %j, align 4, !dbg !218
  br label %for.cond6, !dbg !219, !llvm.loop !220

for.end17:                                        ; preds = %for.cond6
  br label %for.inc18, !dbg !222

for.inc18:                                        ; preds = %for.end17
  %16 = load i32, i32* %i, align 4, !dbg !223
  %inc19 = add nsw i32 %16, 1, !dbg !223
  store i32 %inc19, i32* %i, align 4, !dbg !223
  br label %for.cond3, !dbg !224, !llvm.loop !225

for.end20:                                        ; preds = %for.cond3
  ret i32 0, !dbg !227
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!13, !14, !15, !16, !17}
!llvm.ident = !{!18}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "cimage", scope: !2, file: !12, line: 10, type: !8, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !11, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc58.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!6, !8, !9}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!11 = !{!0}
!12 = !DIFile(filename: "src/mem_leak/malloc58.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!13 = !{i32 7, !"Dwarf Version", i32 4}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{i32 7, !"uwtable", i32 1}
!17 = !{i32 7, !"frame-pointer", i32 2}
!18 = !{!"clang version 13.0.0"}
!19 = distinct !DISubprogram(name: "MUSTALIAS", scope: !20, file: !20, line: 4, type: !21, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!20 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!21 = !DISubroutineType(types: !22)
!22 = !{null, !23, !23}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!24 = !DILocalVariable(name: "p", arg: 1, scope: !19, file: !20, line: 4, type: !23)
!25 = !DILocation(line: 4, column: 22, scope: !19)
!26 = !DILocalVariable(name: "q", arg: 2, scope: !19, file: !20, line: 4, type: !23)
!27 = !DILocation(line: 4, column: 31, scope: !19)
!28 = !DILocation(line: 5, column: 3, scope: !19)
!29 = !DILocation(line: 6, column: 1, scope: !19)
!30 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !20, file: !20, line: 8, type: !21, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!31 = !DILocalVariable(name: "p", arg: 1, scope: !30, file: !20, line: 8, type: !23)
!32 = !DILocation(line: 8, column: 25, scope: !30)
!33 = !DILocalVariable(name: "q", arg: 2, scope: !30, file: !20, line: 8, type: !23)
!34 = !DILocation(line: 8, column: 34, scope: !30)
!35 = !DILocation(line: 9, column: 3, scope: !30)
!36 = !DILocation(line: 10, column: 1, scope: !30)
!37 = distinct !DISubprogram(name: "MAYALIAS", scope: !20, file: !20, line: 12, type: !21, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!38 = !DILocalVariable(name: "p", arg: 1, scope: !37, file: !20, line: 12, type: !23)
!39 = !DILocation(line: 12, column: 21, scope: !37)
!40 = !DILocalVariable(name: "q", arg: 2, scope: !37, file: !20, line: 12, type: !23)
!41 = !DILocation(line: 12, column: 30, scope: !37)
!42 = !DILocation(line: 13, column: 3, scope: !37)
!43 = !DILocation(line: 14, column: 1, scope: !37)
!44 = distinct !DISubprogram(name: "NOALIAS", scope: !20, file: !20, line: 16, type: !21, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!45 = !DILocalVariable(name: "p", arg: 1, scope: !44, file: !20, line: 16, type: !23)
!46 = !DILocation(line: 16, column: 20, scope: !44)
!47 = !DILocalVariable(name: "q", arg: 2, scope: !44, file: !20, line: 16, type: !23)
!48 = !DILocation(line: 16, column: 29, scope: !44)
!49 = !DILocation(line: 17, column: 3, scope: !44)
!50 = !DILocation(line: 18, column: 1, scope: !44)
!51 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !20, file: !20, line: 20, type: !21, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!52 = !DILocalVariable(name: "p", arg: 1, scope: !51, file: !20, line: 20, type: !23)
!53 = !DILocation(line: 20, column: 34, scope: !51)
!54 = !DILocalVariable(name: "q", arg: 2, scope: !51, file: !20, line: 20, type: !23)
!55 = !DILocation(line: 20, column: 43, scope: !51)
!56 = !DILocation(line: 21, column: 3, scope: !51)
!57 = !DILocation(line: 22, column: 1, scope: !51)
!58 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !20, file: !20, line: 24, type: !21, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!59 = !DILocalVariable(name: "p", arg: 1, scope: !58, file: !20, line: 24, type: !23)
!60 = !DILocation(line: 24, column: 33, scope: !58)
!61 = !DILocalVariable(name: "q", arg: 2, scope: !58, file: !20, line: 24, type: !23)
!62 = !DILocation(line: 24, column: 42, scope: !58)
!63 = !DILocation(line: 25, column: 3, scope: !58)
!64 = !DILocation(line: 26, column: 1, scope: !58)
!65 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !20, file: !20, line: 29, type: !66, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!66 = !DISubroutineType(types: !67)
!67 = !{!23, !68}
!68 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!69 = !DILocalVariable(name: "n", arg: 1, scope: !65, file: !20, line: 29, type: !68)
!70 = !DILocation(line: 29, column: 22, scope: !65)
!71 = !DILocation(line: 30, column: 17, scope: !65)
!72 = !DILocation(line: 30, column: 10, scope: !65)
!73 = !DILocation(line: 30, column: 3, scope: !65)
!74 = distinct !DISubprogram(name: "PLKMALLOC", scope: !20, file: !20, line: 33, type: !66, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!75 = !DILocalVariable(name: "n", arg: 1, scope: !74, file: !20, line: 33, type: !68)
!76 = !DILocation(line: 33, column: 21, scope: !74)
!77 = !DILocation(line: 34, column: 17, scope: !74)
!78 = !DILocation(line: 34, column: 10, scope: !74)
!79 = !DILocation(line: 34, column: 3, scope: !74)
!80 = distinct !DISubprogram(name: "NFRMALLOC", scope: !20, file: !20, line: 37, type: !66, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!81 = !DILocalVariable(name: "n", arg: 1, scope: !80, file: !20, line: 37, type: !68)
!82 = !DILocation(line: 37, column: 21, scope: !80)
!83 = !DILocation(line: 38, column: 17, scope: !80)
!84 = !DILocation(line: 38, column: 10, scope: !80)
!85 = !DILocation(line: 38, column: 3, scope: !80)
!86 = distinct !DISubprogram(name: "CLKMALLOC", scope: !20, file: !20, line: 41, type: !66, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!87 = !DILocalVariable(name: "n", arg: 1, scope: !86, file: !20, line: 41, type: !68)
!88 = !DILocation(line: 41, column: 21, scope: !86)
!89 = !DILocation(line: 42, column: 17, scope: !86)
!90 = !DILocation(line: 42, column: 10, scope: !86)
!91 = !DILocation(line: 42, column: 3, scope: !86)
!92 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !20, file: !20, line: 45, type: !66, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!93 = !DILocalVariable(name: "n", arg: 1, scope: !92, file: !20, line: 45, type: !68)
!94 = !DILocation(line: 45, column: 21, scope: !92)
!95 = !DILocation(line: 46, column: 17, scope: !92)
!96 = !DILocation(line: 46, column: 10, scope: !92)
!97 = !DILocation(line: 46, column: 3, scope: !92)
!98 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !20, file: !20, line: 49, type: !66, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!99 = !DILocalVariable(name: "n", arg: 1, scope: !98, file: !20, line: 49, type: !68)
!100 = !DILocation(line: 49, column: 21, scope: !98)
!101 = !DILocation(line: 50, column: 17, scope: !98)
!102 = !DILocation(line: 50, column: 10, scope: !98)
!103 = !DILocation(line: 50, column: 3, scope: !98)
!104 = distinct !DISubprogram(name: "LEAKFN", scope: !20, file: !20, line: 53, type: !66, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!105 = !DILocalVariable(name: "n", arg: 1, scope: !104, file: !20, line: 53, type: !68)
!106 = !DILocation(line: 53, column: 18, scope: !104)
!107 = !DILocation(line: 54, column: 17, scope: !104)
!108 = !DILocation(line: 54, column: 10, scope: !104)
!109 = !DILocation(line: 54, column: 3, scope: !104)
!110 = distinct !DISubprogram(name: "RC_ACCESS", scope: !20, file: !20, line: 63, type: !111, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!111 = !DISubroutineType(types: !112)
!112 = !{null, !68, !68}
!113 = !DILocalVariable(name: "id", arg: 1, scope: !110, file: !20, line: 63, type: !68)
!114 = !DILocation(line: 63, column: 20, scope: !110)
!115 = !DILocalVariable(name: "flags", arg: 2, scope: !110, file: !20, line: 63, type: !68)
!116 = !DILocation(line: 63, column: 28, scope: !110)
!117 = !DILocation(line: 64, column: 3, scope: !110)
!118 = !DILocation(line: 65, column: 1, scope: !110)
!119 = distinct !DISubprogram(name: "CXT_THREAD", scope: !20, file: !20, line: 75, type: !120, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!120 = !DISubroutineType(types: !121)
!121 = !{null, !68, !6}
!122 = !DILocalVariable(name: "thdid", arg: 1, scope: !119, file: !20, line: 75, type: !68)
!123 = !DILocation(line: 75, column: 21, scope: !119)
!124 = !DILocalVariable(name: "cxt", arg: 2, scope: !119, file: !20, line: 75, type: !6)
!125 = !DILocation(line: 75, column: 34, scope: !119)
!126 = !DILocation(line: 77, column: 1, scope: !119)
!127 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !20, file: !20, line: 78, type: !120, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!128 = !DILocalVariable(name: "thdid", arg: 1, scope: !127, file: !20, line: 78, type: !68)
!129 = !DILocation(line: 78, column: 21, scope: !127)
!130 = !DILocalVariable(name: "cxt", arg: 2, scope: !127, file: !20, line: 78, type: !6)
!131 = !DILocation(line: 78, column: 33, scope: !127)
!132 = !DILocation(line: 80, column: 1, scope: !127)
!133 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !20, file: !20, line: 81, type: !134, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!134 = !DISubroutineType(types: !135)
!135 = !{null, !68, !6, !6}
!136 = !DILocalVariable(name: "thdid", arg: 1, scope: !133, file: !20, line: 81, type: !68)
!137 = !DILocation(line: 81, column: 26, scope: !133)
!138 = !DILocalVariable(name: "cxt", arg: 2, scope: !133, file: !20, line: 81, type: !6)
!139 = !DILocation(line: 81, column: 38, scope: !133)
!140 = !DILocalVariable(name: "lev", arg: 3, scope: !133, file: !20, line: 81, type: !6)
!141 = !DILocation(line: 81, column: 49, scope: !133)
!142 = !DILocation(line: 83, column: 1, scope: !133)
!143 = distinct !DISubprogram(name: "LOCK", scope: !20, file: !20, line: 85, type: !144, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !6}
!146 = !DILocalVariable(name: "lockname", arg: 1, scope: !143, file: !20, line: 85, type: !6)
!147 = !DILocation(line: 85, column: 17, scope: !143)
!148 = !DILocation(line: 87, column: 1, scope: !143)
!149 = distinct !DISubprogram(name: "PAUSE", scope: !20, file: !20, line: 89, type: !144, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!150 = !DILocalVariable(name: "str", arg: 1, scope: !149, file: !20, line: 89, type: !6)
!151 = !DILocation(line: 89, column: 18, scope: !149)
!152 = !DILocation(line: 90, column: 18, scope: !149)
!153 = !DILocation(line: 90, column: 3, scope: !149)
!154 = !DILocation(line: 91, column: 3, scope: !149)
!155 = !DILocation(line: 92, column: 3, scope: !149)
!156 = !DILocation(line: 93, column: 1, scope: !149)
!157 = distinct !DISubprogram(name: "deref", scope: !20, file: !20, line: 111, type: !158, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!158 = !DISubroutineType(types: !159)
!159 = !{null}
!160 = !DILocation(line: 111, column: 20, scope: !157)
!161 = distinct !DISubprogram(name: "main", scope: !12, file: !12, line: 11, type: !162, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!162 = !DISubroutineType(types: !163)
!163 = !{!68}
!164 = !DILocalVariable(name: "i", scope: !161, file: !12, line: 12, type: !68)
!165 = !DILocation(line: 12, column: 9, scope: !161)
!166 = !DILocalVariable(name: "j", scope: !161, file: !12, line: 12, type: !68)
!167 = !DILocation(line: 12, column: 11, scope: !161)
!168 = !DILocalVariable(name: "superbuffer", scope: !161, file: !12, line: 13, type: !6)
!169 = !DILocation(line: 13, column: 11, scope: !161)
!170 = !DILocation(line: 13, column: 33, scope: !161)
!171 = !DILocation(line: 14, column: 33, scope: !161)
!172 = !DILocation(line: 14, column: 14, scope: !161)
!173 = !DILocation(line: 14, column: 12, scope: !161)
!174 = !DILocation(line: 15, column: 11, scope: !175)
!175 = distinct !DILexicalBlock(scope: !161, file: !12, line: 15, column: 5)
!176 = !DILocation(line: 15, column: 10, scope: !175)
!177 = !DILocation(line: 15, column: 14, scope: !178)
!178 = distinct !DILexicalBlock(scope: !175, file: !12, line: 15, column: 5)
!179 = !DILocation(line: 15, column: 15, scope: !178)
!180 = !DILocation(line: 15, column: 5, scope: !175)
!181 = !DILocation(line: 17, column: 39, scope: !182)
!182 = distinct !DILexicalBlock(scope: !178, file: !12, line: 16, column: 5)
!183 = !DILocation(line: 17, column: 9, scope: !182)
!184 = !DILocation(line: 17, column: 16, scope: !182)
!185 = !DILocation(line: 17, column: 19, scope: !182)
!186 = !DILocation(line: 18, column: 5, scope: !182)
!187 = !DILocation(line: 15, column: 20, scope: !178)
!188 = !DILocation(line: 15, column: 5, scope: !178)
!189 = distinct !{!189, !180, !190, !191}
!190 = !DILocation(line: 18, column: 5, scope: !175)
!191 = !{!"llvm.loop.mustprogress"}
!192 = !DILocation(line: 20, column: 11, scope: !193)
!193 = distinct !DILexicalBlock(scope: !161, file: !12, line: 20, column: 5)
!194 = !DILocation(line: 20, column: 10, scope: !193)
!195 = !DILocation(line: 20, column: 14, scope: !196)
!196 = distinct !DILexicalBlock(scope: !193, file: !12, line: 20, column: 5)
!197 = !DILocation(line: 20, column: 15, scope: !196)
!198 = !DILocation(line: 20, column: 5, scope: !193)
!199 = !DILocation(line: 22, column: 15, scope: !200)
!200 = distinct !DILexicalBlock(scope: !201, file: !12, line: 22, column: 9)
!201 = distinct !DILexicalBlock(scope: !196, file: !12, line: 21, column: 5)
!202 = !DILocation(line: 22, column: 14, scope: !200)
!203 = !DILocation(line: 22, column: 18, scope: !204)
!204 = distinct !DILexicalBlock(scope: !200, file: !12, line: 22, column: 9)
!205 = !DILocation(line: 22, column: 19, scope: !204)
!206 = !DILocation(line: 22, column: 9, scope: !200)
!207 = !DILocation(line: 24, column: 28, scope: !208)
!208 = distinct !DILexicalBlock(scope: !204, file: !12, line: 23, column: 9)
!209 = !DILocation(line: 24, column: 40, scope: !208)
!210 = !DILocation(line: 24, column: 41, scope: !208)
!211 = !DILocation(line: 24, column: 47, scope: !208)
!212 = !DILocation(line: 24, column: 45, scope: !208)
!213 = !DILocation(line: 24, column: 13, scope: !208)
!214 = !DILocation(line: 24, column: 20, scope: !208)
!215 = !DILocation(line: 24, column: 23, scope: !208)
!216 = !DILocation(line: 24, column: 26, scope: !208)
!217 = !DILocation(line: 25, column: 9, scope: !208)
!218 = !DILocation(line: 22, column: 24, scope: !204)
!219 = !DILocation(line: 22, column: 9, scope: !204)
!220 = distinct !{!220, !206, !221, !191}
!221 = !DILocation(line: 25, column: 9, scope: !200)
!222 = !DILocation(line: 26, column: 5, scope: !201)
!223 = !DILocation(line: 20, column: 20, scope: !196)
!224 = !DILocation(line: 20, column: 5, scope: !196)
!225 = distinct !{!225, !198, !226, !191}
!226 = !DILocation(line: 26, column: 5, scope: !193)
!227 = !DILocation(line: 28, column: 5, scope: !161)
