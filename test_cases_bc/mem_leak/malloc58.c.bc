; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc58.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc58.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@cimage = dso_local global i8** null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !17 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !22, metadata !DIExpression()), !dbg !23
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !24, metadata !DIExpression()), !dbg !25
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !26
  ret void, !dbg !27
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !28 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !29, metadata !DIExpression()), !dbg !30
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !31, metadata !DIExpression()), !dbg !32
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !33
  ret void, !dbg !34
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !35 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !36, metadata !DIExpression()), !dbg !37
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !40
  ret void, !dbg !41
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !42 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !43, metadata !DIExpression()), !dbg !44
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !47
  ret void, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !49 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !56 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !63 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %0 = load i32, i32* %n.addr, align 4, !dbg !69
  %conv = sext i32 %0 to i64, !dbg !69
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !70
  ret i8* %call, !dbg !71
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !72 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %0 = load i32, i32* %n.addr, align 4, !dbg !75
  %conv = sext i32 %0 to i64, !dbg !75
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !76
  ret i8* %call, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !78 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %0 = load i32, i32* %n.addr, align 4, !dbg !81
  %conv = sext i32 %0 to i64, !dbg !81
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !82
  ret i8* %call, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !84 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %0 = load i32, i32* %n.addr, align 4, !dbg !87
  %conv = sext i32 %0 to i64, !dbg !87
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !88
  ret i8* %call, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !90 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %0 = load i32, i32* %n.addr, align 4, !dbg !93
  %conv = sext i32 %0 to i64, !dbg !93
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !94
  ret i8* %call, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !96 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, i32* %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !100
  ret i8* %call, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !102 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !103, metadata !DIExpression()), !dbg !104
  %0 = load i32, i32* %n.addr, align 4, !dbg !105
  %conv = sext i32 %0 to i64, !dbg !105
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !106
  ret i8* %call, !dbg !107
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !108 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !111, metadata !DIExpression()), !dbg !112
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !113, metadata !DIExpression()), !dbg !114
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !115
  ret void, !dbg !116
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !117 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !120, metadata !DIExpression()), !dbg !121
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !122, metadata !DIExpression()), !dbg !123
  ret void, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !125 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !126, metadata !DIExpression()), !dbg !127
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !128, metadata !DIExpression()), !dbg !129
  ret void, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !131 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !134, metadata !DIExpression()), !dbg !135
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !136, metadata !DIExpression()), !dbg !137
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !138, metadata !DIExpression()), !dbg !139
  ret void, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !141 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !144, metadata !DIExpression()), !dbg !145
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !147 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !148, metadata !DIExpression()), !dbg !149
  %0 = load i8*, i8** %str.addr, align 8, !dbg !150
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !151
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !152
  %call2 = call i32 @getchar(), !dbg !153
  ret void, !dbg !154
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !155 {
entry:
  ret void, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !159 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %superbuffer = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !162, metadata !DIExpression()), !dbg !163
  call void @llvm.dbg.declare(metadata i32* %j, metadata !164, metadata !DIExpression()), !dbg !165
  call void @llvm.dbg.declare(metadata i8** %superbuffer, metadata !166, metadata !DIExpression()), !dbg !167
  %call = call i8* @NFRMALLOC(i32 100), !dbg !168
  store i8* %call, i8** %superbuffer, align 8, !dbg !167
  %call1 = call i8* @SAFEMALLOC(i32 80), !dbg !169
  %0 = bitcast i8* %call1 to i8**, !dbg !170
  store i8** %0, i8*** @cimage, align 8, !dbg !171
  store i32 0, i32* %i, align 4, !dbg !172
  br label %for.cond, !dbg !174

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !175
  %cmp = icmp slt i32 %1, 10, !dbg !177
  br i1 %cmp, label %for.body, label %for.end, !dbg !178

for.body:                                         ; preds = %for.cond
  %call2 = call i8* @SAFEMALLOC(i32 10), !dbg !179
  %2 = load i8**, i8*** @cimage, align 8, !dbg !181
  %3 = load i32, i32* %i, align 4, !dbg !182
  %idxprom = sext i32 %3 to i64, !dbg !181
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom, !dbg !181
  store i8* %call2, i8** %arrayidx, align 8, !dbg !183
  br label %for.inc, !dbg !184

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !185
  %inc = add nsw i32 %4, 1, !dbg !185
  store i32 %inc, i32* %i, align 4, !dbg !185
  br label %for.cond, !dbg !186, !llvm.loop !187

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !190
  br label %for.cond3, !dbg !192

for.cond3:                                        ; preds = %for.inc18, %for.end
  %5 = load i32, i32* %i, align 4, !dbg !193
  %cmp4 = icmp slt i32 %5, 10, !dbg !195
  br i1 %cmp4, label %for.body5, label %for.end20, !dbg !196

for.body5:                                        ; preds = %for.cond3
  store i32 0, i32* %j, align 4, !dbg !197
  br label %for.cond6, !dbg !200

for.cond6:                                        ; preds = %for.inc15, %for.body5
  %6 = load i32, i32* %j, align 4, !dbg !201
  %cmp7 = icmp slt i32 %6, 10, !dbg !203
  br i1 %cmp7, label %for.body8, label %for.end17, !dbg !204

for.body8:                                        ; preds = %for.cond6
  %7 = load i8*, i8** %superbuffer, align 8, !dbg !205
  %8 = load i32, i32* %i, align 4, !dbg !207
  %mul = mul nsw i32 %8, 10, !dbg !208
  %9 = load i32, i32* %j, align 4, !dbg !209
  %add = add nsw i32 %mul, %9, !dbg !210
  %idxprom9 = sext i32 %add to i64, !dbg !205
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i64 %idxprom9, !dbg !205
  %10 = load i8, i8* %arrayidx10, align 1, !dbg !205
  %11 = load i8**, i8*** @cimage, align 8, !dbg !211
  %12 = load i32, i32* %i, align 4, !dbg !212
  %idxprom11 = sext i32 %12 to i64, !dbg !211
  %arrayidx12 = getelementptr inbounds i8*, i8** %11, i64 %idxprom11, !dbg !211
  %13 = load i8*, i8** %arrayidx12, align 8, !dbg !211
  %14 = load i32, i32* %j, align 4, !dbg !213
  %idxprom13 = sext i32 %14 to i64, !dbg !211
  %arrayidx14 = getelementptr inbounds i8, i8* %13, i64 %idxprom13, !dbg !211
  store i8 %10, i8* %arrayidx14, align 1, !dbg !214
  br label %for.inc15, !dbg !215

for.inc15:                                        ; preds = %for.body8
  %15 = load i32, i32* %j, align 4, !dbg !216
  %inc16 = add nsw i32 %15, 1, !dbg !216
  store i32 %inc16, i32* %j, align 4, !dbg !216
  br label %for.cond6, !dbg !217, !llvm.loop !218

for.end17:                                        ; preds = %for.cond6
  br label %for.inc18, !dbg !220

for.inc18:                                        ; preds = %for.end17
  %16 = load i32, i32* %i, align 4, !dbg !221
  %inc19 = add nsw i32 %16, 1, !dbg !221
  store i32 %inc19, i32* %i, align 4, !dbg !221
  br label %for.cond3, !dbg !222, !llvm.loop !223

for.end20:                                        ; preds = %for.cond3
  ret i32 0, !dbg !225
}

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!13, !14, !15}
!llvm.ident = !{!16}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "cimage", scope: !2, file: !12, line: 10, type: !8, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 12.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !11, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc58.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!6, !8, !9}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!11 = !{!0}
!12 = !DIFile(filename: "src/mem_leak/malloc58.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!13 = !{i32 7, !"Dwarf Version", i32 4}
!14 = !{i32 2, !"Debug Info Version", i32 3}
!15 = !{i32 1, !"wchar_size", i32 4}
!16 = !{!"clang version 12.0.0"}
!17 = distinct !DISubprogram(name: "MUSTALIAS", scope: !18, file: !18, line: 4, type: !19, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!18 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!19 = !DISubroutineType(types: !20)
!20 = !{null, !21, !21}
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!22 = !DILocalVariable(name: "p", arg: 1, scope: !17, file: !18, line: 4, type: !21)
!23 = !DILocation(line: 4, column: 22, scope: !17)
!24 = !DILocalVariable(name: "q", arg: 2, scope: !17, file: !18, line: 4, type: !21)
!25 = !DILocation(line: 4, column: 31, scope: !17)
!26 = !DILocation(line: 5, column: 3, scope: !17)
!27 = !DILocation(line: 6, column: 1, scope: !17)
!28 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !18, file: !18, line: 8, type: !19, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!29 = !DILocalVariable(name: "p", arg: 1, scope: !28, file: !18, line: 8, type: !21)
!30 = !DILocation(line: 8, column: 25, scope: !28)
!31 = !DILocalVariable(name: "q", arg: 2, scope: !28, file: !18, line: 8, type: !21)
!32 = !DILocation(line: 8, column: 34, scope: !28)
!33 = !DILocation(line: 9, column: 3, scope: !28)
!34 = !DILocation(line: 10, column: 1, scope: !28)
!35 = distinct !DISubprogram(name: "MAYALIAS", scope: !18, file: !18, line: 12, type: !19, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!36 = !DILocalVariable(name: "p", arg: 1, scope: !35, file: !18, line: 12, type: !21)
!37 = !DILocation(line: 12, column: 21, scope: !35)
!38 = !DILocalVariable(name: "q", arg: 2, scope: !35, file: !18, line: 12, type: !21)
!39 = !DILocation(line: 12, column: 30, scope: !35)
!40 = !DILocation(line: 13, column: 3, scope: !35)
!41 = !DILocation(line: 14, column: 1, scope: !35)
!42 = distinct !DISubprogram(name: "NOALIAS", scope: !18, file: !18, line: 16, type: !19, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!43 = !DILocalVariable(name: "p", arg: 1, scope: !42, file: !18, line: 16, type: !21)
!44 = !DILocation(line: 16, column: 20, scope: !42)
!45 = !DILocalVariable(name: "q", arg: 2, scope: !42, file: !18, line: 16, type: !21)
!46 = !DILocation(line: 16, column: 29, scope: !42)
!47 = !DILocation(line: 17, column: 3, scope: !42)
!48 = !DILocation(line: 18, column: 1, scope: !42)
!49 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !18, file: !18, line: 20, type: !19, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!50 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !18, line: 20, type: !21)
!51 = !DILocation(line: 20, column: 34, scope: !49)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !18, line: 20, type: !21)
!53 = !DILocation(line: 20, column: 43, scope: !49)
!54 = !DILocation(line: 21, column: 3, scope: !49)
!55 = !DILocation(line: 22, column: 1, scope: !49)
!56 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !18, file: !18, line: 24, type: !19, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!57 = !DILocalVariable(name: "p", arg: 1, scope: !56, file: !18, line: 24, type: !21)
!58 = !DILocation(line: 24, column: 33, scope: !56)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !56, file: !18, line: 24, type: !21)
!60 = !DILocation(line: 24, column: 42, scope: !56)
!61 = !DILocation(line: 25, column: 3, scope: !56)
!62 = !DILocation(line: 26, column: 1, scope: !56)
!63 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !18, file: !18, line: 29, type: !64, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!64 = !DISubroutineType(types: !65)
!65 = !{!21, !66}
!66 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!67 = !DILocalVariable(name: "n", arg: 1, scope: !63, file: !18, line: 29, type: !66)
!68 = !DILocation(line: 29, column: 22, scope: !63)
!69 = !DILocation(line: 30, column: 17, scope: !63)
!70 = !DILocation(line: 30, column: 10, scope: !63)
!71 = !DILocation(line: 30, column: 3, scope: !63)
!72 = distinct !DISubprogram(name: "PLKMALLOC", scope: !18, file: !18, line: 33, type: !64, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!73 = !DILocalVariable(name: "n", arg: 1, scope: !72, file: !18, line: 33, type: !66)
!74 = !DILocation(line: 33, column: 21, scope: !72)
!75 = !DILocation(line: 34, column: 17, scope: !72)
!76 = !DILocation(line: 34, column: 10, scope: !72)
!77 = !DILocation(line: 34, column: 3, scope: !72)
!78 = distinct !DISubprogram(name: "NFRMALLOC", scope: !18, file: !18, line: 37, type: !64, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!79 = !DILocalVariable(name: "n", arg: 1, scope: !78, file: !18, line: 37, type: !66)
!80 = !DILocation(line: 37, column: 21, scope: !78)
!81 = !DILocation(line: 38, column: 17, scope: !78)
!82 = !DILocation(line: 38, column: 10, scope: !78)
!83 = !DILocation(line: 38, column: 3, scope: !78)
!84 = distinct !DISubprogram(name: "CLKMALLOC", scope: !18, file: !18, line: 41, type: !64, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!85 = !DILocalVariable(name: "n", arg: 1, scope: !84, file: !18, line: 41, type: !66)
!86 = !DILocation(line: 41, column: 21, scope: !84)
!87 = !DILocation(line: 42, column: 17, scope: !84)
!88 = !DILocation(line: 42, column: 10, scope: !84)
!89 = !DILocation(line: 42, column: 3, scope: !84)
!90 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !18, file: !18, line: 45, type: !64, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!91 = !DILocalVariable(name: "n", arg: 1, scope: !90, file: !18, line: 45, type: !66)
!92 = !DILocation(line: 45, column: 21, scope: !90)
!93 = !DILocation(line: 46, column: 17, scope: !90)
!94 = !DILocation(line: 46, column: 10, scope: !90)
!95 = !DILocation(line: 46, column: 3, scope: !90)
!96 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !18, file: !18, line: 49, type: !64, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!97 = !DILocalVariable(name: "n", arg: 1, scope: !96, file: !18, line: 49, type: !66)
!98 = !DILocation(line: 49, column: 21, scope: !96)
!99 = !DILocation(line: 50, column: 17, scope: !96)
!100 = !DILocation(line: 50, column: 10, scope: !96)
!101 = !DILocation(line: 50, column: 3, scope: !96)
!102 = distinct !DISubprogram(name: "LEAKFN", scope: !18, file: !18, line: 53, type: !64, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!103 = !DILocalVariable(name: "n", arg: 1, scope: !102, file: !18, line: 53, type: !66)
!104 = !DILocation(line: 53, column: 18, scope: !102)
!105 = !DILocation(line: 54, column: 17, scope: !102)
!106 = !DILocation(line: 54, column: 10, scope: !102)
!107 = !DILocation(line: 54, column: 3, scope: !102)
!108 = distinct !DISubprogram(name: "RC_ACCESS", scope: !18, file: !18, line: 63, type: !109, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!109 = !DISubroutineType(types: !110)
!110 = !{null, !66, !66}
!111 = !DILocalVariable(name: "id", arg: 1, scope: !108, file: !18, line: 63, type: !66)
!112 = !DILocation(line: 63, column: 20, scope: !108)
!113 = !DILocalVariable(name: "flags", arg: 2, scope: !108, file: !18, line: 63, type: !66)
!114 = !DILocation(line: 63, column: 28, scope: !108)
!115 = !DILocation(line: 64, column: 3, scope: !108)
!116 = !DILocation(line: 65, column: 1, scope: !108)
!117 = distinct !DISubprogram(name: "CXT_THREAD", scope: !18, file: !18, line: 75, type: !118, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!118 = !DISubroutineType(types: !119)
!119 = !{null, !66, !6}
!120 = !DILocalVariable(name: "thdid", arg: 1, scope: !117, file: !18, line: 75, type: !66)
!121 = !DILocation(line: 75, column: 21, scope: !117)
!122 = !DILocalVariable(name: "cxt", arg: 2, scope: !117, file: !18, line: 75, type: !6)
!123 = !DILocation(line: 75, column: 34, scope: !117)
!124 = !DILocation(line: 77, column: 1, scope: !117)
!125 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !18, file: !18, line: 78, type: !118, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!126 = !DILocalVariable(name: "thdid", arg: 1, scope: !125, file: !18, line: 78, type: !66)
!127 = !DILocation(line: 78, column: 21, scope: !125)
!128 = !DILocalVariable(name: "cxt", arg: 2, scope: !125, file: !18, line: 78, type: !6)
!129 = !DILocation(line: 78, column: 33, scope: !125)
!130 = !DILocation(line: 80, column: 1, scope: !125)
!131 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !18, file: !18, line: 81, type: !132, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!132 = !DISubroutineType(types: !133)
!133 = !{null, !66, !6, !6}
!134 = !DILocalVariable(name: "thdid", arg: 1, scope: !131, file: !18, line: 81, type: !66)
!135 = !DILocation(line: 81, column: 26, scope: !131)
!136 = !DILocalVariable(name: "cxt", arg: 2, scope: !131, file: !18, line: 81, type: !6)
!137 = !DILocation(line: 81, column: 38, scope: !131)
!138 = !DILocalVariable(name: "lev", arg: 3, scope: !131, file: !18, line: 81, type: !6)
!139 = !DILocation(line: 81, column: 49, scope: !131)
!140 = !DILocation(line: 83, column: 1, scope: !131)
!141 = distinct !DISubprogram(name: "LOCK", scope: !18, file: !18, line: 85, type: !142, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !6}
!144 = !DILocalVariable(name: "lockname", arg: 1, scope: !141, file: !18, line: 85, type: !6)
!145 = !DILocation(line: 85, column: 17, scope: !141)
!146 = !DILocation(line: 87, column: 1, scope: !141)
!147 = distinct !DISubprogram(name: "PAUSE", scope: !18, file: !18, line: 89, type: !142, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!148 = !DILocalVariable(name: "str", arg: 1, scope: !147, file: !18, line: 89, type: !6)
!149 = !DILocation(line: 89, column: 18, scope: !147)
!150 = !DILocation(line: 90, column: 18, scope: !147)
!151 = !DILocation(line: 90, column: 3, scope: !147)
!152 = !DILocation(line: 91, column: 3, scope: !147)
!153 = !DILocation(line: 92, column: 3, scope: !147)
!154 = !DILocation(line: 93, column: 1, scope: !147)
!155 = distinct !DISubprogram(name: "deref", scope: !18, file: !18, line: 111, type: !156, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!156 = !DISubroutineType(types: !157)
!157 = !{null}
!158 = !DILocation(line: 111, column: 20, scope: !155)
!159 = distinct !DISubprogram(name: "main", scope: !12, file: !12, line: 11, type: !160, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!160 = !DISubroutineType(types: !161)
!161 = !{!66}
!162 = !DILocalVariable(name: "i", scope: !159, file: !12, line: 12, type: !66)
!163 = !DILocation(line: 12, column: 9, scope: !159)
!164 = !DILocalVariable(name: "j", scope: !159, file: !12, line: 12, type: !66)
!165 = !DILocation(line: 12, column: 11, scope: !159)
!166 = !DILocalVariable(name: "superbuffer", scope: !159, file: !12, line: 13, type: !6)
!167 = !DILocation(line: 13, column: 11, scope: !159)
!168 = !DILocation(line: 13, column: 33, scope: !159)
!169 = !DILocation(line: 14, column: 33, scope: !159)
!170 = !DILocation(line: 14, column: 14, scope: !159)
!171 = !DILocation(line: 14, column: 12, scope: !159)
!172 = !DILocation(line: 15, column: 11, scope: !173)
!173 = distinct !DILexicalBlock(scope: !159, file: !12, line: 15, column: 5)
!174 = !DILocation(line: 15, column: 10, scope: !173)
!175 = !DILocation(line: 15, column: 14, scope: !176)
!176 = distinct !DILexicalBlock(scope: !173, file: !12, line: 15, column: 5)
!177 = !DILocation(line: 15, column: 15, scope: !176)
!178 = !DILocation(line: 15, column: 5, scope: !173)
!179 = !DILocation(line: 17, column: 39, scope: !180)
!180 = distinct !DILexicalBlock(scope: !176, file: !12, line: 16, column: 5)
!181 = !DILocation(line: 17, column: 9, scope: !180)
!182 = !DILocation(line: 17, column: 16, scope: !180)
!183 = !DILocation(line: 17, column: 19, scope: !180)
!184 = !DILocation(line: 18, column: 5, scope: !180)
!185 = !DILocation(line: 15, column: 20, scope: !176)
!186 = !DILocation(line: 15, column: 5, scope: !176)
!187 = distinct !{!187, !178, !188, !189}
!188 = !DILocation(line: 18, column: 5, scope: !173)
!189 = !{!"llvm.loop.mustprogress"}
!190 = !DILocation(line: 20, column: 11, scope: !191)
!191 = distinct !DILexicalBlock(scope: !159, file: !12, line: 20, column: 5)
!192 = !DILocation(line: 20, column: 10, scope: !191)
!193 = !DILocation(line: 20, column: 14, scope: !194)
!194 = distinct !DILexicalBlock(scope: !191, file: !12, line: 20, column: 5)
!195 = !DILocation(line: 20, column: 15, scope: !194)
!196 = !DILocation(line: 20, column: 5, scope: !191)
!197 = !DILocation(line: 22, column: 15, scope: !198)
!198 = distinct !DILexicalBlock(scope: !199, file: !12, line: 22, column: 9)
!199 = distinct !DILexicalBlock(scope: !194, file: !12, line: 21, column: 5)
!200 = !DILocation(line: 22, column: 14, scope: !198)
!201 = !DILocation(line: 22, column: 18, scope: !202)
!202 = distinct !DILexicalBlock(scope: !198, file: !12, line: 22, column: 9)
!203 = !DILocation(line: 22, column: 19, scope: !202)
!204 = !DILocation(line: 22, column: 9, scope: !198)
!205 = !DILocation(line: 24, column: 28, scope: !206)
!206 = distinct !DILexicalBlock(scope: !202, file: !12, line: 23, column: 9)
!207 = !DILocation(line: 24, column: 40, scope: !206)
!208 = !DILocation(line: 24, column: 41, scope: !206)
!209 = !DILocation(line: 24, column: 47, scope: !206)
!210 = !DILocation(line: 24, column: 45, scope: !206)
!211 = !DILocation(line: 24, column: 13, scope: !206)
!212 = !DILocation(line: 24, column: 20, scope: !206)
!213 = !DILocation(line: 24, column: 23, scope: !206)
!214 = !DILocation(line: 24, column: 26, scope: !206)
!215 = !DILocation(line: 25, column: 9, scope: !206)
!216 = !DILocation(line: 22, column: 24, scope: !202)
!217 = !DILocation(line: 22, column: 9, scope: !202)
!218 = distinct !{!218, !204, !219, !189}
!219 = !DILocation(line: 25, column: 9, scope: !198)
!220 = !DILocation(line: 26, column: 5, scope: !199)
!221 = !DILocation(line: 20, column: 20, scope: !194)
!222 = !DILocation(line: 20, column: 5, scope: !194)
!223 = distinct !{!223, !196, !224, !189}
!224 = !DILocation(line: 26, column: 5, scope: !191)
!225 = !DILocation(line: 28, column: 5, scope: !159)
