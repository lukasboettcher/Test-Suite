; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc9.c'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc9.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.s_rr_node = type { i16, i16, i16, i16, i16, i16, i32*, i16*, float, float }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@rr_node = dso_local global %struct.s_rr_node* null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !29 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !34, metadata !DIExpression()), !dbg !35
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !36, metadata !DIExpression()), !dbg !37
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !38
  ret void, !dbg !39
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !40 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !41, metadata !DIExpression()), !dbg !42
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !45
  ret void, !dbg !46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !47 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !48, metadata !DIExpression()), !dbg !49
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !52
  ret void, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !54 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !55, metadata !DIExpression()), !dbg !56
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !59
  ret void, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !61 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !62, metadata !DIExpression()), !dbg !63
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !66
  ret void, !dbg !67
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !68 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !69, metadata !DIExpression()), !dbg !70
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !73
  ret void, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !75 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !78, metadata !DIExpression()), !dbg !79
  %0 = load i32, i32* %n.addr, align 4, !dbg !80
  %conv = sext i32 %0 to i64, !dbg !80
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !81
  ret i8* %call, !dbg !82
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !83 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !84, metadata !DIExpression()), !dbg !85
  %0 = load i32, i32* %n.addr, align 4, !dbg !86
  %conv = sext i32 %0 to i64, !dbg !86
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !87
  ret i8* %call, !dbg !88
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !89 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !90, metadata !DIExpression()), !dbg !91
  %0 = load i32, i32* %n.addr, align 4, !dbg !92
  %conv = sext i32 %0 to i64, !dbg !92
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !93
  ret i8* %call, !dbg !94
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !95 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !96, metadata !DIExpression()), !dbg !97
  %0 = load i32, i32* %n.addr, align 4, !dbg !98
  %conv = sext i32 %0 to i64, !dbg !98
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !99
  ret i8* %call, !dbg !100
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !101 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !102, metadata !DIExpression()), !dbg !103
  %0 = load i32, i32* %n.addr, align 4, !dbg !104
  %conv = sext i32 %0 to i64, !dbg !104
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !105
  ret i8* %call, !dbg !106
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !107 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %0 = load i32, i32* %n.addr, align 4, !dbg !110
  %conv = sext i32 %0 to i64, !dbg !110
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !111
  ret i8* %call, !dbg !112
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !113 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %0 = load i32, i32* %n.addr, align 4, !dbg !116
  %conv = sext i32 %0 to i64, !dbg !116
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !117
  ret i8* %call, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !119 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !122, metadata !DIExpression()), !dbg !123
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !124, metadata !DIExpression()), !dbg !125
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !126
  ret void, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !128 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !133, metadata !DIExpression()), !dbg !134
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !135, metadata !DIExpression()), !dbg !136
  ret void, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !138 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !139, metadata !DIExpression()), !dbg !140
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !141, metadata !DIExpression()), !dbg !142
  ret void, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !144 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !147, metadata !DIExpression()), !dbg !148
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !149, metadata !DIExpression()), !dbg !150
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !151, metadata !DIExpression()), !dbg !152
  ret void, !dbg !153
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !154 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !157, metadata !DIExpression()), !dbg !158
  ret void, !dbg !159
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !160 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !161, metadata !DIExpression()), !dbg !162
  %0 = load i8*, i8** %str.addr, align 8, !dbg !163
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !164
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !165
  %call2 = call i32 @getchar(), !dbg !166
  ret void, !dbg !167
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !168 {
entry:
  ret void, !dbg !171
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @alloc() #0 !dbg !172 {
entry:
  %call = call i8* @NFRMALLOC(i32 10), !dbg !175
  %0 = bitcast i8* %call to i32*, !dbg !175
  ret i32* %0, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !177 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !180, metadata !DIExpression()), !dbg !181
  %call = call i32* @alloc(), !dbg !182
  %0 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8, !dbg !183
  %1 = load i32, i32* %i, align 4, !dbg !184
  %idxprom = sext i32 %1 to i64, !dbg !183
  %arrayidx = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %0, i64 %idxprom, !dbg !183
  %edges = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %arrayidx, i32 0, i32 6, !dbg !185
  store i32* %call, i32** %edges, align 8, !dbg !186
  ret i32 0, !dbg !187
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!25, !26, !27}
!llvm.ident = !{!28}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "rr_node", scope: !2, file: !6, line: 17, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "Ubuntu clang version 11.0.0-2~ubuntu20.04.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc9.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "src/mem_leak/malloc9.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "s_rr_node", file: !6, line: 10, size: 320, elements: !9)
!9 = !{!10, !12, !13, !14, !15, !16, !17, !20, !22, !24}
!10 = !DIDerivedType(tag: DW_TAG_member, name: "xlow", scope: !8, file: !6, line: 11, baseType: !11, size: 16)
!11 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "xhigh", scope: !8, file: !6, line: 11, baseType: !11, size: 16, offset: 16)
!13 = !DIDerivedType(tag: DW_TAG_member, name: "ylow", scope: !8, file: !6, line: 11, baseType: !11, size: 16, offset: 32)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "yhigh", scope: !8, file: !6, line: 11, baseType: !11, size: 16, offset: 48)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "ptc_num", scope: !8, file: !6, line: 12, baseType: !11, size: 16, offset: 64)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "num_edges", scope: !8, file: !6, line: 12, baseType: !11, size: 16, offset: 80)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "edges", scope: !8, file: !6, line: 13, baseType: !18, size: 64, offset: 128)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "switches", scope: !8, file: !6, line: 14, baseType: !21, size: 64, offset: 192)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "R", scope: !8, file: !6, line: 14, baseType: !23, size: 32, offset: 256)
!23 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "C", scope: !8, file: !6, line: 14, baseType: !23, size: 32, offset: 288)
!25 = !{i32 7, !"Dwarf Version", i32 4}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{!"Ubuntu clang version 11.0.0-2~ubuntu20.04.1"}
!29 = distinct !DISubprogram(name: "MUSTALIAS", scope: !30, file: !30, line: 4, type: !31, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!30 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!31 = !DISubroutineType(types: !32)
!32 = !{null, !33, !33}
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!34 = !DILocalVariable(name: "p", arg: 1, scope: !29, file: !30, line: 4, type: !33)
!35 = !DILocation(line: 4, column: 22, scope: !29)
!36 = !DILocalVariable(name: "q", arg: 2, scope: !29, file: !30, line: 4, type: !33)
!37 = !DILocation(line: 4, column: 31, scope: !29)
!38 = !DILocation(line: 5, column: 3, scope: !29)
!39 = !DILocation(line: 6, column: 1, scope: !29)
!40 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !30, file: !30, line: 8, type: !31, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!41 = !DILocalVariable(name: "p", arg: 1, scope: !40, file: !30, line: 8, type: !33)
!42 = !DILocation(line: 8, column: 25, scope: !40)
!43 = !DILocalVariable(name: "q", arg: 2, scope: !40, file: !30, line: 8, type: !33)
!44 = !DILocation(line: 8, column: 34, scope: !40)
!45 = !DILocation(line: 9, column: 3, scope: !40)
!46 = !DILocation(line: 10, column: 1, scope: !40)
!47 = distinct !DISubprogram(name: "MAYALIAS", scope: !30, file: !30, line: 12, type: !31, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!48 = !DILocalVariable(name: "p", arg: 1, scope: !47, file: !30, line: 12, type: !33)
!49 = !DILocation(line: 12, column: 21, scope: !47)
!50 = !DILocalVariable(name: "q", arg: 2, scope: !47, file: !30, line: 12, type: !33)
!51 = !DILocation(line: 12, column: 30, scope: !47)
!52 = !DILocation(line: 13, column: 3, scope: !47)
!53 = !DILocation(line: 14, column: 1, scope: !47)
!54 = distinct !DISubprogram(name: "NOALIAS", scope: !30, file: !30, line: 16, type: !31, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!55 = !DILocalVariable(name: "p", arg: 1, scope: !54, file: !30, line: 16, type: !33)
!56 = !DILocation(line: 16, column: 20, scope: !54)
!57 = !DILocalVariable(name: "q", arg: 2, scope: !54, file: !30, line: 16, type: !33)
!58 = !DILocation(line: 16, column: 29, scope: !54)
!59 = !DILocation(line: 17, column: 3, scope: !54)
!60 = !DILocation(line: 18, column: 1, scope: !54)
!61 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !30, file: !30, line: 20, type: !31, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!62 = !DILocalVariable(name: "p", arg: 1, scope: !61, file: !30, line: 20, type: !33)
!63 = !DILocation(line: 20, column: 34, scope: !61)
!64 = !DILocalVariable(name: "q", arg: 2, scope: !61, file: !30, line: 20, type: !33)
!65 = !DILocation(line: 20, column: 43, scope: !61)
!66 = !DILocation(line: 21, column: 3, scope: !61)
!67 = !DILocation(line: 22, column: 1, scope: !61)
!68 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !30, file: !30, line: 24, type: !31, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!69 = !DILocalVariable(name: "p", arg: 1, scope: !68, file: !30, line: 24, type: !33)
!70 = !DILocation(line: 24, column: 33, scope: !68)
!71 = !DILocalVariable(name: "q", arg: 2, scope: !68, file: !30, line: 24, type: !33)
!72 = !DILocation(line: 24, column: 42, scope: !68)
!73 = !DILocation(line: 25, column: 3, scope: !68)
!74 = !DILocation(line: 26, column: 1, scope: !68)
!75 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !30, file: !30, line: 29, type: !76, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!76 = !DISubroutineType(types: !77)
!77 = !{!33, !19}
!78 = !DILocalVariable(name: "n", arg: 1, scope: !75, file: !30, line: 29, type: !19)
!79 = !DILocation(line: 29, column: 22, scope: !75)
!80 = !DILocation(line: 30, column: 17, scope: !75)
!81 = !DILocation(line: 30, column: 10, scope: !75)
!82 = !DILocation(line: 30, column: 3, scope: !75)
!83 = distinct !DISubprogram(name: "PLKMALLOC", scope: !30, file: !30, line: 33, type: !76, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!84 = !DILocalVariable(name: "n", arg: 1, scope: !83, file: !30, line: 33, type: !19)
!85 = !DILocation(line: 33, column: 21, scope: !83)
!86 = !DILocation(line: 34, column: 17, scope: !83)
!87 = !DILocation(line: 34, column: 10, scope: !83)
!88 = !DILocation(line: 34, column: 3, scope: !83)
!89 = distinct !DISubprogram(name: "NFRMALLOC", scope: !30, file: !30, line: 37, type: !76, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!90 = !DILocalVariable(name: "n", arg: 1, scope: !89, file: !30, line: 37, type: !19)
!91 = !DILocation(line: 37, column: 21, scope: !89)
!92 = !DILocation(line: 38, column: 17, scope: !89)
!93 = !DILocation(line: 38, column: 10, scope: !89)
!94 = !DILocation(line: 38, column: 3, scope: !89)
!95 = distinct !DISubprogram(name: "CLKMALLOC", scope: !30, file: !30, line: 41, type: !76, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!96 = !DILocalVariable(name: "n", arg: 1, scope: !95, file: !30, line: 41, type: !19)
!97 = !DILocation(line: 41, column: 21, scope: !95)
!98 = !DILocation(line: 42, column: 17, scope: !95)
!99 = !DILocation(line: 42, column: 10, scope: !95)
!100 = !DILocation(line: 42, column: 3, scope: !95)
!101 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !30, file: !30, line: 45, type: !76, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!102 = !DILocalVariable(name: "n", arg: 1, scope: !101, file: !30, line: 45, type: !19)
!103 = !DILocation(line: 45, column: 21, scope: !101)
!104 = !DILocation(line: 46, column: 17, scope: !101)
!105 = !DILocation(line: 46, column: 10, scope: !101)
!106 = !DILocation(line: 46, column: 3, scope: !101)
!107 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !30, file: !30, line: 49, type: !76, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!108 = !DILocalVariable(name: "n", arg: 1, scope: !107, file: !30, line: 49, type: !19)
!109 = !DILocation(line: 49, column: 21, scope: !107)
!110 = !DILocation(line: 50, column: 17, scope: !107)
!111 = !DILocation(line: 50, column: 10, scope: !107)
!112 = !DILocation(line: 50, column: 3, scope: !107)
!113 = distinct !DISubprogram(name: "LEAKFN", scope: !30, file: !30, line: 53, type: !76, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!114 = !DILocalVariable(name: "n", arg: 1, scope: !113, file: !30, line: 53, type: !19)
!115 = !DILocation(line: 53, column: 18, scope: !113)
!116 = !DILocation(line: 54, column: 17, scope: !113)
!117 = !DILocation(line: 54, column: 10, scope: !113)
!118 = !DILocation(line: 54, column: 3, scope: !113)
!119 = distinct !DISubprogram(name: "RC_ACCESS", scope: !30, file: !30, line: 63, type: !120, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!120 = !DISubroutineType(types: !121)
!121 = !{null, !19, !19}
!122 = !DILocalVariable(name: "id", arg: 1, scope: !119, file: !30, line: 63, type: !19)
!123 = !DILocation(line: 63, column: 20, scope: !119)
!124 = !DILocalVariable(name: "flags", arg: 2, scope: !119, file: !30, line: 63, type: !19)
!125 = !DILocation(line: 63, column: 28, scope: !119)
!126 = !DILocation(line: 64, column: 3, scope: !119)
!127 = !DILocation(line: 65, column: 1, scope: !119)
!128 = distinct !DISubprogram(name: "CXT_THREAD", scope: !30, file: !30, line: 75, type: !129, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!129 = !DISubroutineType(types: !130)
!130 = !{null, !19, !131}
!131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !132, size: 64)
!132 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!133 = !DILocalVariable(name: "thdid", arg: 1, scope: !128, file: !30, line: 75, type: !19)
!134 = !DILocation(line: 75, column: 21, scope: !128)
!135 = !DILocalVariable(name: "cxt", arg: 2, scope: !128, file: !30, line: 75, type: !131)
!136 = !DILocation(line: 75, column: 34, scope: !128)
!137 = !DILocation(line: 77, column: 1, scope: !128)
!138 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !30, file: !30, line: 78, type: !129, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!139 = !DILocalVariable(name: "thdid", arg: 1, scope: !138, file: !30, line: 78, type: !19)
!140 = !DILocation(line: 78, column: 21, scope: !138)
!141 = !DILocalVariable(name: "cxt", arg: 2, scope: !138, file: !30, line: 78, type: !131)
!142 = !DILocation(line: 78, column: 33, scope: !138)
!143 = !DILocation(line: 80, column: 1, scope: !138)
!144 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !30, file: !30, line: 81, type: !145, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !19, !131, !131}
!147 = !DILocalVariable(name: "thdid", arg: 1, scope: !144, file: !30, line: 81, type: !19)
!148 = !DILocation(line: 81, column: 26, scope: !144)
!149 = !DILocalVariable(name: "cxt", arg: 2, scope: !144, file: !30, line: 81, type: !131)
!150 = !DILocation(line: 81, column: 38, scope: !144)
!151 = !DILocalVariable(name: "lev", arg: 3, scope: !144, file: !30, line: 81, type: !131)
!152 = !DILocation(line: 81, column: 49, scope: !144)
!153 = !DILocation(line: 83, column: 1, scope: !144)
!154 = distinct !DISubprogram(name: "LOCK", scope: !30, file: !30, line: 85, type: !155, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!155 = !DISubroutineType(types: !156)
!156 = !{null, !131}
!157 = !DILocalVariable(name: "lockname", arg: 1, scope: !154, file: !30, line: 85, type: !131)
!158 = !DILocation(line: 85, column: 17, scope: !154)
!159 = !DILocation(line: 87, column: 1, scope: !154)
!160 = distinct !DISubprogram(name: "PAUSE", scope: !30, file: !30, line: 89, type: !155, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!161 = !DILocalVariable(name: "str", arg: 1, scope: !160, file: !30, line: 89, type: !131)
!162 = !DILocation(line: 89, column: 18, scope: !160)
!163 = !DILocation(line: 90, column: 18, scope: !160)
!164 = !DILocation(line: 90, column: 3, scope: !160)
!165 = !DILocation(line: 91, column: 3, scope: !160)
!166 = !DILocation(line: 92, column: 3, scope: !160)
!167 = !DILocation(line: 93, column: 1, scope: !160)
!168 = distinct !DISubprogram(name: "deref", scope: !30, file: !30, line: 111, type: !169, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!169 = !DISubroutineType(types: !170)
!170 = !{null}
!171 = !DILocation(line: 111, column: 20, scope: !168)
!172 = distinct !DISubprogram(name: "alloc", scope: !6, file: !6, line: 19, type: !173, scopeLine: 19, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!173 = !DISubroutineType(types: !174)
!174 = !{!18}
!175 = !DILocation(line: 21, column: 9, scope: !172)
!176 = !DILocation(line: 21, column: 2, scope: !172)
!177 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 24, type: !178, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!178 = !DISubroutineType(types: !179)
!179 = !{!19}
!180 = !DILocalVariable(name: "i", scope: !177, file: !6, line: 26, type: !19)
!181 = !DILocation(line: 26, column: 6, scope: !177)
!182 = !DILocation(line: 27, column: 21, scope: !177)
!183 = !DILocation(line: 27, column: 2, scope: !177)
!184 = !DILocation(line: 27, column: 10, scope: !177)
!185 = !DILocation(line: 27, column: 13, scope: !177)
!186 = !DILocation(line: 27, column: 19, scope: !177)
!187 = !DILocation(line: 31, column: 1, scope: !177)
