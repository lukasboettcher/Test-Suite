; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc9.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc9.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.s_rr_node = type { i16, i16, i16, i16, i16, i16, i32*, i16*, float, float }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@rr_node = dso_local global %struct.s_rr_node* null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !31 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !36, metadata !DIExpression()), !dbg !37
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !38, metadata !DIExpression()), !dbg !39
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !40
  ret void, !dbg !41
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !42 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !43, metadata !DIExpression()), !dbg !44
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !45, metadata !DIExpression()), !dbg !46
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !47
  ret void, !dbg !48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !49 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !50, metadata !DIExpression()), !dbg !51
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !52, metadata !DIExpression()), !dbg !53
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !54
  ret void, !dbg !55
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !56 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !57, metadata !DIExpression()), !dbg !58
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !61
  ret void, !dbg !62
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !63 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !64, metadata !DIExpression()), !dbg !65
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !66, metadata !DIExpression()), !dbg !67
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !68
  ret void, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !70 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !71, metadata !DIExpression()), !dbg !72
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !75
  ret void, !dbg !76
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !77 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %0 = load i32, i32* %n.addr, align 4, !dbg !82
  %conv = sext i32 %0 to i64, !dbg !82
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !83
  ret i8* %call, !dbg !84
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !85 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %0 = load i32, i32* %n.addr, align 4, !dbg !88
  %conv = sext i32 %0 to i64, !dbg !88
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !89
  ret i8* %call, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !91 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %0 = load i32, i32* %n.addr, align 4, !dbg !94
  %conv = sext i32 %0 to i64, !dbg !94
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !95
  ret i8* %call, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !97 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %0 = load i32, i32* %n.addr, align 4, !dbg !100
  %conv = sext i32 %0 to i64, !dbg !100
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !101
  ret i8* %call, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !103 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !104, metadata !DIExpression()), !dbg !105
  %0 = load i32, i32* %n.addr, align 4, !dbg !106
  %conv = sext i32 %0 to i64, !dbg !106
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !107
  ret i8* %call, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !109 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %0 = load i32, i32* %n.addr, align 4, !dbg !112
  %conv = sext i32 %0 to i64, !dbg !112
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !113
  ret i8* %call, !dbg !114
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !115 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !116, metadata !DIExpression()), !dbg !117
  %0 = load i32, i32* %n.addr, align 4, !dbg !118
  %conv = sext i32 %0 to i64, !dbg !118
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !119
  ret i8* %call, !dbg !120
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !121 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !124, metadata !DIExpression()), !dbg !125
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !126, metadata !DIExpression()), !dbg !127
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !128
  ret void, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !130 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !135, metadata !DIExpression()), !dbg !136
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !137, metadata !DIExpression()), !dbg !138
  ret void, !dbg !139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !140 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !141, metadata !DIExpression()), !dbg !142
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !143, metadata !DIExpression()), !dbg !144
  ret void, !dbg !145
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !146 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !149, metadata !DIExpression()), !dbg !150
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !151, metadata !DIExpression()), !dbg !152
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !153, metadata !DIExpression()), !dbg !154
  ret void, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !156 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !159, metadata !DIExpression()), !dbg !160
  ret void, !dbg !161
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !162 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !163, metadata !DIExpression()), !dbg !164
  %0 = load i8*, i8** %str.addr, align 8, !dbg !165
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !166
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !167
  %call2 = call i32 @getchar(), !dbg !168
  ret void, !dbg !169
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !170 {
entry:
  ret void, !dbg !173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @alloc() #0 !dbg !174 {
entry:
  %call = call i8* @NFRMALLOC(i32 10), !dbg !177
  %0 = bitcast i8* %call to i32*, !dbg !177
  ret i32* %0, !dbg !178
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !179 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !182, metadata !DIExpression()), !dbg !183
  %call = call i32* @alloc(), !dbg !184
  %0 = load %struct.s_rr_node*, %struct.s_rr_node** @rr_node, align 8, !dbg !185
  %1 = load i32, i32* %i, align 4, !dbg !186
  %idxprom = sext i32 %1 to i64, !dbg !185
  %arrayidx = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %0, i64 %idxprom, !dbg !185
  %edges = getelementptr inbounds %struct.s_rr_node, %struct.s_rr_node* %arrayidx, i32 0, i32 6, !dbg !187
  store i32* %call, i32** %edges, align 8, !dbg !188
  ret i32 0, !dbg !189
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!25, !26, !27, !28, !29}
!llvm.ident = !{!30}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "rr_node", scope: !2, file: !6, line: 17, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc9.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "src/mem_leak/malloc9.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "s_rr_node", file: !6, line: 10, size: 320, elements: !9)
!9 = !{!10, !12, !13, !14, !15, !16, !17, !20, !22, !24}
!10 = !DIDerivedType(tag: DW_TAG_member, name: "xlow", scope: !8, file: !6, line: 11, baseType: !11, size: 16)
!11 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "xhigh", scope: !8, file: !6, line: 11, baseType: !11, size: 16, offset: 16)
!13 = !DIDerivedType(tag: DW_TAG_member, name: "ylow", scope: !8, file: !6, line: 11, baseType: !11, size: 16, offset: 32)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "yhigh", scope: !8, file: !6, line: 11, baseType: !11, size: 16, offset: 48)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "ptc_num", scope: !8, file: !6, line: 12, baseType: !11, size: 16, offset: 64)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "num_edges", scope: !8, file: !6, line: 12, baseType: !11, size: 16, offset: 80)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "edges", scope: !8, file: !6, line: 13, baseType: !18, size: 64, offset: 128)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "switches", scope: !8, file: !6, line: 14, baseType: !21, size: 64, offset: 192)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "R", scope: !8, file: !6, line: 14, baseType: !23, size: 32, offset: 256)
!23 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "C", scope: !8, file: !6, line: 14, baseType: !23, size: 32, offset: 288)
!25 = !{i32 7, !"Dwarf Version", i32 4}
!26 = !{i32 2, !"Debug Info Version", i32 3}
!27 = !{i32 1, !"wchar_size", i32 4}
!28 = !{i32 7, !"uwtable", i32 1}
!29 = !{i32 7, !"frame-pointer", i32 2}
!30 = !{!"clang version 13.0.0"}
!31 = distinct !DISubprogram(name: "MUSTALIAS", scope: !32, file: !32, line: 4, type: !33, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!32 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!33 = !DISubroutineType(types: !34)
!34 = !{null, !35, !35}
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!36 = !DILocalVariable(name: "p", arg: 1, scope: !31, file: !32, line: 4, type: !35)
!37 = !DILocation(line: 4, column: 22, scope: !31)
!38 = !DILocalVariable(name: "q", arg: 2, scope: !31, file: !32, line: 4, type: !35)
!39 = !DILocation(line: 4, column: 31, scope: !31)
!40 = !DILocation(line: 5, column: 3, scope: !31)
!41 = !DILocation(line: 6, column: 1, scope: !31)
!42 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !32, file: !32, line: 8, type: !33, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!43 = !DILocalVariable(name: "p", arg: 1, scope: !42, file: !32, line: 8, type: !35)
!44 = !DILocation(line: 8, column: 25, scope: !42)
!45 = !DILocalVariable(name: "q", arg: 2, scope: !42, file: !32, line: 8, type: !35)
!46 = !DILocation(line: 8, column: 34, scope: !42)
!47 = !DILocation(line: 9, column: 3, scope: !42)
!48 = !DILocation(line: 10, column: 1, scope: !42)
!49 = distinct !DISubprogram(name: "MAYALIAS", scope: !32, file: !32, line: 12, type: !33, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!50 = !DILocalVariable(name: "p", arg: 1, scope: !49, file: !32, line: 12, type: !35)
!51 = !DILocation(line: 12, column: 21, scope: !49)
!52 = !DILocalVariable(name: "q", arg: 2, scope: !49, file: !32, line: 12, type: !35)
!53 = !DILocation(line: 12, column: 30, scope: !49)
!54 = !DILocation(line: 13, column: 3, scope: !49)
!55 = !DILocation(line: 14, column: 1, scope: !49)
!56 = distinct !DISubprogram(name: "NOALIAS", scope: !32, file: !32, line: 16, type: !33, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!57 = !DILocalVariable(name: "p", arg: 1, scope: !56, file: !32, line: 16, type: !35)
!58 = !DILocation(line: 16, column: 20, scope: !56)
!59 = !DILocalVariable(name: "q", arg: 2, scope: !56, file: !32, line: 16, type: !35)
!60 = !DILocation(line: 16, column: 29, scope: !56)
!61 = !DILocation(line: 17, column: 3, scope: !56)
!62 = !DILocation(line: 18, column: 1, scope: !56)
!63 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !32, file: !32, line: 20, type: !33, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!64 = !DILocalVariable(name: "p", arg: 1, scope: !63, file: !32, line: 20, type: !35)
!65 = !DILocation(line: 20, column: 34, scope: !63)
!66 = !DILocalVariable(name: "q", arg: 2, scope: !63, file: !32, line: 20, type: !35)
!67 = !DILocation(line: 20, column: 43, scope: !63)
!68 = !DILocation(line: 21, column: 3, scope: !63)
!69 = !DILocation(line: 22, column: 1, scope: !63)
!70 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !32, file: !32, line: 24, type: !33, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!71 = !DILocalVariable(name: "p", arg: 1, scope: !70, file: !32, line: 24, type: !35)
!72 = !DILocation(line: 24, column: 33, scope: !70)
!73 = !DILocalVariable(name: "q", arg: 2, scope: !70, file: !32, line: 24, type: !35)
!74 = !DILocation(line: 24, column: 42, scope: !70)
!75 = !DILocation(line: 25, column: 3, scope: !70)
!76 = !DILocation(line: 26, column: 1, scope: !70)
!77 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !32, file: !32, line: 29, type: !78, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!78 = !DISubroutineType(types: !79)
!79 = !{!35, !19}
!80 = !DILocalVariable(name: "n", arg: 1, scope: !77, file: !32, line: 29, type: !19)
!81 = !DILocation(line: 29, column: 22, scope: !77)
!82 = !DILocation(line: 30, column: 17, scope: !77)
!83 = !DILocation(line: 30, column: 10, scope: !77)
!84 = !DILocation(line: 30, column: 3, scope: !77)
!85 = distinct !DISubprogram(name: "PLKMALLOC", scope: !32, file: !32, line: 33, type: !78, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!86 = !DILocalVariable(name: "n", arg: 1, scope: !85, file: !32, line: 33, type: !19)
!87 = !DILocation(line: 33, column: 21, scope: !85)
!88 = !DILocation(line: 34, column: 17, scope: !85)
!89 = !DILocation(line: 34, column: 10, scope: !85)
!90 = !DILocation(line: 34, column: 3, scope: !85)
!91 = distinct !DISubprogram(name: "NFRMALLOC", scope: !32, file: !32, line: 37, type: !78, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!92 = !DILocalVariable(name: "n", arg: 1, scope: !91, file: !32, line: 37, type: !19)
!93 = !DILocation(line: 37, column: 21, scope: !91)
!94 = !DILocation(line: 38, column: 17, scope: !91)
!95 = !DILocation(line: 38, column: 10, scope: !91)
!96 = !DILocation(line: 38, column: 3, scope: !91)
!97 = distinct !DISubprogram(name: "CLKMALLOC", scope: !32, file: !32, line: 41, type: !78, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!98 = !DILocalVariable(name: "n", arg: 1, scope: !97, file: !32, line: 41, type: !19)
!99 = !DILocation(line: 41, column: 21, scope: !97)
!100 = !DILocation(line: 42, column: 17, scope: !97)
!101 = !DILocation(line: 42, column: 10, scope: !97)
!102 = !DILocation(line: 42, column: 3, scope: !97)
!103 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !32, file: !32, line: 45, type: !78, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!104 = !DILocalVariable(name: "n", arg: 1, scope: !103, file: !32, line: 45, type: !19)
!105 = !DILocation(line: 45, column: 21, scope: !103)
!106 = !DILocation(line: 46, column: 17, scope: !103)
!107 = !DILocation(line: 46, column: 10, scope: !103)
!108 = !DILocation(line: 46, column: 3, scope: !103)
!109 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !32, file: !32, line: 49, type: !78, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!110 = !DILocalVariable(name: "n", arg: 1, scope: !109, file: !32, line: 49, type: !19)
!111 = !DILocation(line: 49, column: 21, scope: !109)
!112 = !DILocation(line: 50, column: 17, scope: !109)
!113 = !DILocation(line: 50, column: 10, scope: !109)
!114 = !DILocation(line: 50, column: 3, scope: !109)
!115 = distinct !DISubprogram(name: "LEAKFN", scope: !32, file: !32, line: 53, type: !78, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!116 = !DILocalVariable(name: "n", arg: 1, scope: !115, file: !32, line: 53, type: !19)
!117 = !DILocation(line: 53, column: 18, scope: !115)
!118 = !DILocation(line: 54, column: 17, scope: !115)
!119 = !DILocation(line: 54, column: 10, scope: !115)
!120 = !DILocation(line: 54, column: 3, scope: !115)
!121 = distinct !DISubprogram(name: "RC_ACCESS", scope: !32, file: !32, line: 63, type: !122, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!122 = !DISubroutineType(types: !123)
!123 = !{null, !19, !19}
!124 = !DILocalVariable(name: "id", arg: 1, scope: !121, file: !32, line: 63, type: !19)
!125 = !DILocation(line: 63, column: 20, scope: !121)
!126 = !DILocalVariable(name: "flags", arg: 2, scope: !121, file: !32, line: 63, type: !19)
!127 = !DILocation(line: 63, column: 28, scope: !121)
!128 = !DILocation(line: 64, column: 3, scope: !121)
!129 = !DILocation(line: 65, column: 1, scope: !121)
!130 = distinct !DISubprogram(name: "CXT_THREAD", scope: !32, file: !32, line: 75, type: !131, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!131 = !DISubroutineType(types: !132)
!132 = !{null, !19, !133}
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!135 = !DILocalVariable(name: "thdid", arg: 1, scope: !130, file: !32, line: 75, type: !19)
!136 = !DILocation(line: 75, column: 21, scope: !130)
!137 = !DILocalVariable(name: "cxt", arg: 2, scope: !130, file: !32, line: 75, type: !133)
!138 = !DILocation(line: 75, column: 34, scope: !130)
!139 = !DILocation(line: 77, column: 1, scope: !130)
!140 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !32, file: !32, line: 78, type: !131, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!141 = !DILocalVariable(name: "thdid", arg: 1, scope: !140, file: !32, line: 78, type: !19)
!142 = !DILocation(line: 78, column: 21, scope: !140)
!143 = !DILocalVariable(name: "cxt", arg: 2, scope: !140, file: !32, line: 78, type: !133)
!144 = !DILocation(line: 78, column: 33, scope: !140)
!145 = !DILocation(line: 80, column: 1, scope: !140)
!146 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !32, file: !32, line: 81, type: !147, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!147 = !DISubroutineType(types: !148)
!148 = !{null, !19, !133, !133}
!149 = !DILocalVariable(name: "thdid", arg: 1, scope: !146, file: !32, line: 81, type: !19)
!150 = !DILocation(line: 81, column: 26, scope: !146)
!151 = !DILocalVariable(name: "cxt", arg: 2, scope: !146, file: !32, line: 81, type: !133)
!152 = !DILocation(line: 81, column: 38, scope: !146)
!153 = !DILocalVariable(name: "lev", arg: 3, scope: !146, file: !32, line: 81, type: !133)
!154 = !DILocation(line: 81, column: 49, scope: !146)
!155 = !DILocation(line: 83, column: 1, scope: !146)
!156 = distinct !DISubprogram(name: "LOCK", scope: !32, file: !32, line: 85, type: !157, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!157 = !DISubroutineType(types: !158)
!158 = !{null, !133}
!159 = !DILocalVariable(name: "lockname", arg: 1, scope: !156, file: !32, line: 85, type: !133)
!160 = !DILocation(line: 85, column: 17, scope: !156)
!161 = !DILocation(line: 87, column: 1, scope: !156)
!162 = distinct !DISubprogram(name: "PAUSE", scope: !32, file: !32, line: 89, type: !157, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!163 = !DILocalVariable(name: "str", arg: 1, scope: !162, file: !32, line: 89, type: !133)
!164 = !DILocation(line: 89, column: 18, scope: !162)
!165 = !DILocation(line: 90, column: 18, scope: !162)
!166 = !DILocation(line: 90, column: 3, scope: !162)
!167 = !DILocation(line: 91, column: 3, scope: !162)
!168 = !DILocation(line: 92, column: 3, scope: !162)
!169 = !DILocation(line: 93, column: 1, scope: !162)
!170 = distinct !DISubprogram(name: "deref", scope: !32, file: !32, line: 111, type: !171, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!171 = !DISubroutineType(types: !172)
!172 = !{null}
!173 = !DILocation(line: 111, column: 20, scope: !170)
!174 = distinct !DISubprogram(name: "alloc", scope: !6, file: !6, line: 19, type: !175, scopeLine: 19, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!175 = !DISubroutineType(types: !176)
!176 = !{!18}
!177 = !DILocation(line: 21, column: 9, scope: !174)
!178 = !DILocation(line: 21, column: 2, scope: !174)
!179 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 24, type: !180, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!180 = !DISubroutineType(types: !181)
!181 = !{!19}
!182 = !DILocalVariable(name: "i", scope: !179, file: !6, line: 26, type: !19)
!183 = !DILocation(line: 26, column: 6, scope: !179)
!184 = !DILocation(line: 27, column: 21, scope: !179)
!185 = !DILocation(line: 27, column: 2, scope: !179)
!186 = !DILocation(line: 27, column: 10, scope: !179)
!187 = !DILocation(line: 27, column: 13, scope: !179)
!188 = !DILocation(line: 27, column: 19, scope: !179)
!189 = !DILocation(line: 31, column: 1, scope: !179)
