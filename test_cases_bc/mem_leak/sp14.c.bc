; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp14.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp14.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !9 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !14, metadata !DIExpression()), !dbg !15
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !16, metadata !DIExpression()), !dbg !17
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret void, !dbg !19
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !20 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !21, metadata !DIExpression()), !dbg !22
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !25
  ret void, !dbg !26
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !27 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !28, metadata !DIExpression()), !dbg !29
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !32
  ret void, !dbg !33
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !34 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !35, metadata !DIExpression()), !dbg !36
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !39
  ret void, !dbg !40
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !41 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !42, metadata !DIExpression()), !dbg !43
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !44, metadata !DIExpression()), !dbg !45
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !46
  ret void, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !48 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !49, metadata !DIExpression()), !dbg !50
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !53
  ret void, !dbg !54
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !55 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !59, metadata !DIExpression()), !dbg !60
  %0 = load i32, i32* %n.addr, align 4, !dbg !61
  %conv = sext i32 %0 to i64, !dbg !61
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !62
  ret i8* %call, !dbg !63
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !64 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !65, metadata !DIExpression()), !dbg !66
  %0 = load i32, i32* %n.addr, align 4, !dbg !67
  %conv = sext i32 %0 to i64, !dbg !67
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !68
  ret i8* %call, !dbg !69
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !70 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %0 = load i32, i32* %n.addr, align 4, !dbg !73
  %conv = sext i32 %0 to i64, !dbg !73
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !74
  ret i8* %call, !dbg !75
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !76 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !77, metadata !DIExpression()), !dbg !78
  %0 = load i32, i32* %n.addr, align 4, !dbg !79
  %conv = sext i32 %0 to i64, !dbg !79
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !80
  ret i8* %call, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !82 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %0 = load i32, i32* %n.addr, align 4, !dbg !85
  %conv = sext i32 %0 to i64, !dbg !85
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !86
  ret i8* %call, !dbg !87
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !88 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %0 = load i32, i32* %n.addr, align 4, !dbg !91
  %conv = sext i32 %0 to i64, !dbg !91
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !92
  ret i8* %call, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !94 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %0 = load i32, i32* %n.addr, align 4, !dbg !97
  %conv = sext i32 %0 to i64, !dbg !97
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !98
  ret i8* %call, !dbg !99
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !100 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !103, metadata !DIExpression()), !dbg !104
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !107
  ret void, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !109 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !114, metadata !DIExpression()), !dbg !115
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !116, metadata !DIExpression()), !dbg !117
  ret void, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !119 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !120, metadata !DIExpression()), !dbg !121
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !122, metadata !DIExpression()), !dbg !123
  ret void, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !125 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !128, metadata !DIExpression()), !dbg !129
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !130, metadata !DIExpression()), !dbg !131
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !132, metadata !DIExpression()), !dbg !133
  ret void, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !135 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !138, metadata !DIExpression()), !dbg !139
  ret void, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !141 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !142, metadata !DIExpression()), !dbg !143
  %0 = load i8*, i8** %str.addr, align 8, !dbg !144
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !145
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !146
  %call2 = call i32 @getchar(), !dbg !147
  ret void, !dbg !148
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !149 {
entry:
  ret void, !dbg !152
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @make(i32 %n) #0 !dbg !153 {
entry:
  %retval = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %y = alloca i32*, align 8
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !158, metadata !DIExpression()), !dbg !159
  call void @llvm.dbg.declare(metadata i32** %y, metadata !160, metadata !DIExpression()), !dbg !161
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !162
  %0 = bitcast i8* %call to i32*, !dbg !162
  store i32* %0, i32** %y, align 8, !dbg !161
  %1 = load i32, i32* %n.addr, align 4, !dbg !163
  %cmp = icmp sgt i32 %1, 0, !dbg !165
  br i1 %cmp, label %if.then, label %if.else, !dbg !166

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %y, align 8, !dbg !167
  %3 = bitcast i32* %2 to i8*, !dbg !167
  call void @free(i8* %3) #4, !dbg !169
  %4 = load i32, i32* %n.addr, align 4, !dbg !170
  %sub = sub nsw i32 %4, 1, !dbg !171
  %call1 = call i32* @make(i32 %sub), !dbg !172
  store i32* %call1, i32** %retval, align 8, !dbg !173
  br label %return, !dbg !173

if.else:                                          ; preds = %entry
  %5 = load i32*, i32** %y, align 8, !dbg !174
  %6 = bitcast i32* %5 to i8*, !dbg !174
  call void @free(i8* %6) #4, !dbg !176
  %call2 = call i8* @SAFEMALLOC(i32 10), !dbg !177
  %7 = bitcast i8* %call2 to i32*, !dbg !177
  store i32* %7, i32** %retval, align 8, !dbg !178
  br label %return, !dbg !178

return:                                           ; preds = %if.else, %if.then
  %8 = load i32*, i32** %retval, align 8, !dbg !179
  ret i32* %8, !dbg !179
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !180 {
entry:
  %x = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %x, metadata !181, metadata !DIExpression()), !dbg !182
  %call = call i32* @make(i32 10), !dbg !183
  store i32* %call, i32** %x, align 8, !dbg !182
  %0 = load i32*, i32** %x, align 8, !dbg !184
  %1 = bitcast i32* %0 to i8*, !dbg !184
  call void @free(i8* %1) #4, !dbg !185
  ret void, !dbg !186
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp14.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"uwtable", i32 1}
!7 = !{i32 7, !"frame-pointer", i32 2}
!8 = !{!"clang version 13.0.0"}
!9 = distinct !DISubprogram(name: "MUSTALIAS", scope: !10, file: !10, line: 4, type: !11, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!10 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!11 = !DISubroutineType(types: !12)
!12 = !{null, !13, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !DILocalVariable(name: "p", arg: 1, scope: !9, file: !10, line: 4, type: !13)
!15 = !DILocation(line: 4, column: 22, scope: !9)
!16 = !DILocalVariable(name: "q", arg: 2, scope: !9, file: !10, line: 4, type: !13)
!17 = !DILocation(line: 4, column: 31, scope: !9)
!18 = !DILocation(line: 5, column: 3, scope: !9)
!19 = !DILocation(line: 6, column: 1, scope: !9)
!20 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !10, file: !10, line: 8, type: !11, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!21 = !DILocalVariable(name: "p", arg: 1, scope: !20, file: !10, line: 8, type: !13)
!22 = !DILocation(line: 8, column: 25, scope: !20)
!23 = !DILocalVariable(name: "q", arg: 2, scope: !20, file: !10, line: 8, type: !13)
!24 = !DILocation(line: 8, column: 34, scope: !20)
!25 = !DILocation(line: 9, column: 3, scope: !20)
!26 = !DILocation(line: 10, column: 1, scope: !20)
!27 = distinct !DISubprogram(name: "MAYALIAS", scope: !10, file: !10, line: 12, type: !11, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!28 = !DILocalVariable(name: "p", arg: 1, scope: !27, file: !10, line: 12, type: !13)
!29 = !DILocation(line: 12, column: 21, scope: !27)
!30 = !DILocalVariable(name: "q", arg: 2, scope: !27, file: !10, line: 12, type: !13)
!31 = !DILocation(line: 12, column: 30, scope: !27)
!32 = !DILocation(line: 13, column: 3, scope: !27)
!33 = !DILocation(line: 14, column: 1, scope: !27)
!34 = distinct !DISubprogram(name: "NOALIAS", scope: !10, file: !10, line: 16, type: !11, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!35 = !DILocalVariable(name: "p", arg: 1, scope: !34, file: !10, line: 16, type: !13)
!36 = !DILocation(line: 16, column: 20, scope: !34)
!37 = !DILocalVariable(name: "q", arg: 2, scope: !34, file: !10, line: 16, type: !13)
!38 = !DILocation(line: 16, column: 29, scope: !34)
!39 = !DILocation(line: 17, column: 3, scope: !34)
!40 = !DILocation(line: 18, column: 1, scope: !34)
!41 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !10, file: !10, line: 20, type: !11, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!42 = !DILocalVariable(name: "p", arg: 1, scope: !41, file: !10, line: 20, type: !13)
!43 = !DILocation(line: 20, column: 34, scope: !41)
!44 = !DILocalVariable(name: "q", arg: 2, scope: !41, file: !10, line: 20, type: !13)
!45 = !DILocation(line: 20, column: 43, scope: !41)
!46 = !DILocation(line: 21, column: 3, scope: !41)
!47 = !DILocation(line: 22, column: 1, scope: !41)
!48 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !10, file: !10, line: 24, type: !11, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!49 = !DILocalVariable(name: "p", arg: 1, scope: !48, file: !10, line: 24, type: !13)
!50 = !DILocation(line: 24, column: 33, scope: !48)
!51 = !DILocalVariable(name: "q", arg: 2, scope: !48, file: !10, line: 24, type: !13)
!52 = !DILocation(line: 24, column: 42, scope: !48)
!53 = !DILocation(line: 25, column: 3, scope: !48)
!54 = !DILocation(line: 26, column: 1, scope: !48)
!55 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !10, file: !10, line: 29, type: !56, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!56 = !DISubroutineType(types: !57)
!57 = !{!13, !58}
!58 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!59 = !DILocalVariable(name: "n", arg: 1, scope: !55, file: !10, line: 29, type: !58)
!60 = !DILocation(line: 29, column: 22, scope: !55)
!61 = !DILocation(line: 30, column: 17, scope: !55)
!62 = !DILocation(line: 30, column: 10, scope: !55)
!63 = !DILocation(line: 30, column: 3, scope: !55)
!64 = distinct !DISubprogram(name: "PLKMALLOC", scope: !10, file: !10, line: 33, type: !56, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!65 = !DILocalVariable(name: "n", arg: 1, scope: !64, file: !10, line: 33, type: !58)
!66 = !DILocation(line: 33, column: 21, scope: !64)
!67 = !DILocation(line: 34, column: 17, scope: !64)
!68 = !DILocation(line: 34, column: 10, scope: !64)
!69 = !DILocation(line: 34, column: 3, scope: !64)
!70 = distinct !DISubprogram(name: "NFRMALLOC", scope: !10, file: !10, line: 37, type: !56, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!71 = !DILocalVariable(name: "n", arg: 1, scope: !70, file: !10, line: 37, type: !58)
!72 = !DILocation(line: 37, column: 21, scope: !70)
!73 = !DILocation(line: 38, column: 17, scope: !70)
!74 = !DILocation(line: 38, column: 10, scope: !70)
!75 = !DILocation(line: 38, column: 3, scope: !70)
!76 = distinct !DISubprogram(name: "CLKMALLOC", scope: !10, file: !10, line: 41, type: !56, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!77 = !DILocalVariable(name: "n", arg: 1, scope: !76, file: !10, line: 41, type: !58)
!78 = !DILocation(line: 41, column: 21, scope: !76)
!79 = !DILocation(line: 42, column: 17, scope: !76)
!80 = !DILocation(line: 42, column: 10, scope: !76)
!81 = !DILocation(line: 42, column: 3, scope: !76)
!82 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !10, file: !10, line: 45, type: !56, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!83 = !DILocalVariable(name: "n", arg: 1, scope: !82, file: !10, line: 45, type: !58)
!84 = !DILocation(line: 45, column: 21, scope: !82)
!85 = !DILocation(line: 46, column: 17, scope: !82)
!86 = !DILocation(line: 46, column: 10, scope: !82)
!87 = !DILocation(line: 46, column: 3, scope: !82)
!88 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !10, file: !10, line: 49, type: !56, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!89 = !DILocalVariable(name: "n", arg: 1, scope: !88, file: !10, line: 49, type: !58)
!90 = !DILocation(line: 49, column: 21, scope: !88)
!91 = !DILocation(line: 50, column: 17, scope: !88)
!92 = !DILocation(line: 50, column: 10, scope: !88)
!93 = !DILocation(line: 50, column: 3, scope: !88)
!94 = distinct !DISubprogram(name: "LEAKFN", scope: !10, file: !10, line: 53, type: !56, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!95 = !DILocalVariable(name: "n", arg: 1, scope: !94, file: !10, line: 53, type: !58)
!96 = !DILocation(line: 53, column: 18, scope: !94)
!97 = !DILocation(line: 54, column: 17, scope: !94)
!98 = !DILocation(line: 54, column: 10, scope: !94)
!99 = !DILocation(line: 54, column: 3, scope: !94)
!100 = distinct !DISubprogram(name: "RC_ACCESS", scope: !10, file: !10, line: 63, type: !101, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !58, !58}
!103 = !DILocalVariable(name: "id", arg: 1, scope: !100, file: !10, line: 63, type: !58)
!104 = !DILocation(line: 63, column: 20, scope: !100)
!105 = !DILocalVariable(name: "flags", arg: 2, scope: !100, file: !10, line: 63, type: !58)
!106 = !DILocation(line: 63, column: 28, scope: !100)
!107 = !DILocation(line: 64, column: 3, scope: !100)
!108 = !DILocation(line: 65, column: 1, scope: !100)
!109 = distinct !DISubprogram(name: "CXT_THREAD", scope: !10, file: !10, line: 75, type: !110, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!110 = !DISubroutineType(types: !111)
!111 = !{null, !58, !112}
!112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !113, size: 64)
!113 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!114 = !DILocalVariable(name: "thdid", arg: 1, scope: !109, file: !10, line: 75, type: !58)
!115 = !DILocation(line: 75, column: 21, scope: !109)
!116 = !DILocalVariable(name: "cxt", arg: 2, scope: !109, file: !10, line: 75, type: !112)
!117 = !DILocation(line: 75, column: 34, scope: !109)
!118 = !DILocation(line: 77, column: 1, scope: !109)
!119 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !10, file: !10, line: 78, type: !110, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!120 = !DILocalVariable(name: "thdid", arg: 1, scope: !119, file: !10, line: 78, type: !58)
!121 = !DILocation(line: 78, column: 21, scope: !119)
!122 = !DILocalVariable(name: "cxt", arg: 2, scope: !119, file: !10, line: 78, type: !112)
!123 = !DILocation(line: 78, column: 33, scope: !119)
!124 = !DILocation(line: 80, column: 1, scope: !119)
!125 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !10, file: !10, line: 81, type: !126, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!126 = !DISubroutineType(types: !127)
!127 = !{null, !58, !112, !112}
!128 = !DILocalVariable(name: "thdid", arg: 1, scope: !125, file: !10, line: 81, type: !58)
!129 = !DILocation(line: 81, column: 26, scope: !125)
!130 = !DILocalVariable(name: "cxt", arg: 2, scope: !125, file: !10, line: 81, type: !112)
!131 = !DILocation(line: 81, column: 38, scope: !125)
!132 = !DILocalVariable(name: "lev", arg: 3, scope: !125, file: !10, line: 81, type: !112)
!133 = !DILocation(line: 81, column: 49, scope: !125)
!134 = !DILocation(line: 83, column: 1, scope: !125)
!135 = distinct !DISubprogram(name: "LOCK", scope: !10, file: !10, line: 85, type: !136, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !112}
!138 = !DILocalVariable(name: "lockname", arg: 1, scope: !135, file: !10, line: 85, type: !112)
!139 = !DILocation(line: 85, column: 17, scope: !135)
!140 = !DILocation(line: 87, column: 1, scope: !135)
!141 = distinct !DISubprogram(name: "PAUSE", scope: !10, file: !10, line: 89, type: !136, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!142 = !DILocalVariable(name: "str", arg: 1, scope: !141, file: !10, line: 89, type: !112)
!143 = !DILocation(line: 89, column: 18, scope: !141)
!144 = !DILocation(line: 90, column: 18, scope: !141)
!145 = !DILocation(line: 90, column: 3, scope: !141)
!146 = !DILocation(line: 91, column: 3, scope: !141)
!147 = !DILocation(line: 92, column: 3, scope: !141)
!148 = !DILocation(line: 93, column: 1, scope: !141)
!149 = distinct !DISubprogram(name: "deref", scope: !10, file: !10, line: 111, type: !150, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!150 = !DISubroutineType(types: !151)
!151 = !{null}
!152 = !DILocation(line: 111, column: 20, scope: !149)
!153 = distinct !DISubprogram(name: "make", scope: !154, file: !154, line: 11, type: !155, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!154 = !DIFile(filename: "src/mem_leak/sp14.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!155 = !DISubroutineType(types: !156)
!156 = !{!157, !58}
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!158 = !DILocalVariable(name: "n", arg: 1, scope: !153, file: !154, line: 11, type: !58)
!159 = !DILocation(line: 11, column: 16, scope: !153)
!160 = !DILocalVariable(name: "y", scope: !153, file: !154, line: 12, type: !157)
!161 = !DILocation(line: 12, column: 7, scope: !153)
!162 = !DILocation(line: 12, column: 11, scope: !153)
!163 = !DILocation(line: 13, column: 6, scope: !164)
!164 = distinct !DILexicalBlock(scope: !153, file: !154, line: 13, column: 6)
!165 = !DILocation(line: 13, column: 8, scope: !164)
!166 = !DILocation(line: 13, column: 6, scope: !153)
!167 = !DILocation(line: 14, column: 8, scope: !168)
!168 = distinct !DILexicalBlock(scope: !164, file: !154, line: 13, column: 13)
!169 = !DILocation(line: 14, column: 3, scope: !168)
!170 = !DILocation(line: 15, column: 15, scope: !168)
!171 = !DILocation(line: 15, column: 17, scope: !168)
!172 = !DILocation(line: 15, column: 10, scope: !168)
!173 = !DILocation(line: 15, column: 3, scope: !168)
!174 = !DILocation(line: 17, column: 8, scope: !175)
!175 = distinct !DILexicalBlock(scope: !164, file: !154, line: 16, column: 9)
!176 = !DILocation(line: 17, column: 3, scope: !175)
!177 = !DILocation(line: 18, column: 10, scope: !175)
!178 = !DILocation(line: 18, column: 3, scope: !175)
!179 = !DILocation(line: 20, column: 1, scope: !153)
!180 = distinct !DISubprogram(name: "main", scope: !154, file: !154, line: 22, type: !150, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!181 = !DILocalVariable(name: "x", scope: !180, file: !154, line: 23, type: !157)
!182 = !DILocation(line: 23, column: 7, scope: !180)
!183 = !DILocation(line: 23, column: 11, scope: !180)
!184 = !DILocation(line: 24, column: 7, scope: !180)
!185 = !DILocation(line: 24, column: 2, scope: !180)
!186 = !DILocation(line: 25, column: 1, scope: !180)
