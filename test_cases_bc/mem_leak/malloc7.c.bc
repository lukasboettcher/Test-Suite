; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc7.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc7.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@g = dso_local global i32* null, align 8, !dbg !0
@.str.3 = private unnamed_addr constant [6 x i8] c"%d,%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !13 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !18, metadata !DIExpression()), !dbg !19
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !20, metadata !DIExpression()), !dbg !21
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !22
  ret void, !dbg !23
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !24 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !25, metadata !DIExpression()), !dbg !26
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !29
  ret void, !dbg !30
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !31 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !32, metadata !DIExpression()), !dbg !33
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !36
  ret void, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !38 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !39, metadata !DIExpression()), !dbg !40
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !41, metadata !DIExpression()), !dbg !42
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !43
  ret void, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !45 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !46, metadata !DIExpression()), !dbg !47
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !50
  ret void, !dbg !51
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !52 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !53, metadata !DIExpression()), !dbg !54
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !57
  ret void, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !59 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !62, metadata !DIExpression()), !dbg !63
  %0 = load i32, i32* %n.addr, align 4, !dbg !64
  %conv = sext i32 %0 to i64, !dbg !64
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !65
  ret i8* %call, !dbg !66
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !67 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %0 = load i32, i32* %n.addr, align 4, !dbg !70
  %conv = sext i32 %0 to i64, !dbg !70
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !71
  ret i8* %call, !dbg !72
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !73 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %0 = load i32, i32* %n.addr, align 4, !dbg !76
  %conv = sext i32 %0 to i64, !dbg !76
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !77
  ret i8* %call, !dbg !78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !79 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %0 = load i32, i32* %n.addr, align 4, !dbg !82
  %conv = sext i32 %0 to i64, !dbg !82
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !83
  ret i8* %call, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !85 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %0 = load i32, i32* %n.addr, align 4, !dbg !88
  %conv = sext i32 %0 to i64, !dbg !88
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !89
  ret i8* %call, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !91 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %0 = load i32, i32* %n.addr, align 4, !dbg !94
  %conv = sext i32 %0 to i64, !dbg !94
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !95
  ret i8* %call, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !97 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %0 = load i32, i32* %n.addr, align 4, !dbg !100
  %conv = sext i32 %0 to i64, !dbg !100
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !101
  ret i8* %call, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !103 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !106, metadata !DIExpression()), !dbg !107
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !110
  ret void, !dbg !111
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !112 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !117, metadata !DIExpression()), !dbg !118
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !119, metadata !DIExpression()), !dbg !120
  ret void, !dbg !121
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !122 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !123, metadata !DIExpression()), !dbg !124
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !125, metadata !DIExpression()), !dbg !126
  ret void, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !128 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !131, metadata !DIExpression()), !dbg !132
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !133, metadata !DIExpression()), !dbg !134
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !135, metadata !DIExpression()), !dbg !136
  ret void, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !138 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !141, metadata !DIExpression()), !dbg !142
  ret void, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !144 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %0 = load i8*, i8** %str.addr, align 8, !dbg !147
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !148
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !149
  %call2 = call i32 @getchar(), !dbg !150
  ret void, !dbg !151
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !152 {
entry:
  ret void, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !156 {
entry:
  %p = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p, metadata !159, metadata !DIExpression()), !dbg !160
  %call = call i8* @SAFEMALLOC(i32 1), !dbg !161
  %0 = bitcast i8* %call to i32*, !dbg !161
  store i32* %0, i32** %p, align 8, !dbg !160
  %1 = load i32*, i32** %p, align 8, !dbg !162
  store i32* %1, i32** @g, align 8, !dbg !163
  %2 = load i32*, i32** @g, align 8, !dbg !164
  %3 = load i32*, i32** %p, align 8, !dbg !165
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32* %2, i32* %3), !dbg !166
  ret i32 0, !dbg !167
}

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!9, !10, !11}
!llvm.ident = !{!12}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !6, line: 10, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 12.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc7.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "src/mem_leak/malloc7.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!9 = !{i32 7, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{!"clang version 12.0.0"}
!13 = distinct !DISubprogram(name: "MUSTALIAS", scope: !14, file: !14, line: 4, type: !15, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!14 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!15 = !DISubroutineType(types: !16)
!16 = !{null, !17, !17}
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!18 = !DILocalVariable(name: "p", arg: 1, scope: !13, file: !14, line: 4, type: !17)
!19 = !DILocation(line: 4, column: 22, scope: !13)
!20 = !DILocalVariable(name: "q", arg: 2, scope: !13, file: !14, line: 4, type: !17)
!21 = !DILocation(line: 4, column: 31, scope: !13)
!22 = !DILocation(line: 5, column: 3, scope: !13)
!23 = !DILocation(line: 6, column: 1, scope: !13)
!24 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !14, file: !14, line: 8, type: !15, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!25 = !DILocalVariable(name: "p", arg: 1, scope: !24, file: !14, line: 8, type: !17)
!26 = !DILocation(line: 8, column: 25, scope: !24)
!27 = !DILocalVariable(name: "q", arg: 2, scope: !24, file: !14, line: 8, type: !17)
!28 = !DILocation(line: 8, column: 34, scope: !24)
!29 = !DILocation(line: 9, column: 3, scope: !24)
!30 = !DILocation(line: 10, column: 1, scope: !24)
!31 = distinct !DISubprogram(name: "MAYALIAS", scope: !14, file: !14, line: 12, type: !15, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!32 = !DILocalVariable(name: "p", arg: 1, scope: !31, file: !14, line: 12, type: !17)
!33 = !DILocation(line: 12, column: 21, scope: !31)
!34 = !DILocalVariable(name: "q", arg: 2, scope: !31, file: !14, line: 12, type: !17)
!35 = !DILocation(line: 12, column: 30, scope: !31)
!36 = !DILocation(line: 13, column: 3, scope: !31)
!37 = !DILocation(line: 14, column: 1, scope: !31)
!38 = distinct !DISubprogram(name: "NOALIAS", scope: !14, file: !14, line: 16, type: !15, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!39 = !DILocalVariable(name: "p", arg: 1, scope: !38, file: !14, line: 16, type: !17)
!40 = !DILocation(line: 16, column: 20, scope: !38)
!41 = !DILocalVariable(name: "q", arg: 2, scope: !38, file: !14, line: 16, type: !17)
!42 = !DILocation(line: 16, column: 29, scope: !38)
!43 = !DILocation(line: 17, column: 3, scope: !38)
!44 = !DILocation(line: 18, column: 1, scope: !38)
!45 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !14, file: !14, line: 20, type: !15, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!46 = !DILocalVariable(name: "p", arg: 1, scope: !45, file: !14, line: 20, type: !17)
!47 = !DILocation(line: 20, column: 34, scope: !45)
!48 = !DILocalVariable(name: "q", arg: 2, scope: !45, file: !14, line: 20, type: !17)
!49 = !DILocation(line: 20, column: 43, scope: !45)
!50 = !DILocation(line: 21, column: 3, scope: !45)
!51 = !DILocation(line: 22, column: 1, scope: !45)
!52 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !14, file: !14, line: 24, type: !15, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!53 = !DILocalVariable(name: "p", arg: 1, scope: !52, file: !14, line: 24, type: !17)
!54 = !DILocation(line: 24, column: 33, scope: !52)
!55 = !DILocalVariable(name: "q", arg: 2, scope: !52, file: !14, line: 24, type: !17)
!56 = !DILocation(line: 24, column: 42, scope: !52)
!57 = !DILocation(line: 25, column: 3, scope: !52)
!58 = !DILocation(line: 26, column: 1, scope: !52)
!59 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !14, file: !14, line: 29, type: !60, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!60 = !DISubroutineType(types: !61)
!61 = !{!17, !8}
!62 = !DILocalVariable(name: "n", arg: 1, scope: !59, file: !14, line: 29, type: !8)
!63 = !DILocation(line: 29, column: 22, scope: !59)
!64 = !DILocation(line: 30, column: 17, scope: !59)
!65 = !DILocation(line: 30, column: 10, scope: !59)
!66 = !DILocation(line: 30, column: 3, scope: !59)
!67 = distinct !DISubprogram(name: "PLKMALLOC", scope: !14, file: !14, line: 33, type: !60, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!68 = !DILocalVariable(name: "n", arg: 1, scope: !67, file: !14, line: 33, type: !8)
!69 = !DILocation(line: 33, column: 21, scope: !67)
!70 = !DILocation(line: 34, column: 17, scope: !67)
!71 = !DILocation(line: 34, column: 10, scope: !67)
!72 = !DILocation(line: 34, column: 3, scope: !67)
!73 = distinct !DISubprogram(name: "NFRMALLOC", scope: !14, file: !14, line: 37, type: !60, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!74 = !DILocalVariable(name: "n", arg: 1, scope: !73, file: !14, line: 37, type: !8)
!75 = !DILocation(line: 37, column: 21, scope: !73)
!76 = !DILocation(line: 38, column: 17, scope: !73)
!77 = !DILocation(line: 38, column: 10, scope: !73)
!78 = !DILocation(line: 38, column: 3, scope: !73)
!79 = distinct !DISubprogram(name: "CLKMALLOC", scope: !14, file: !14, line: 41, type: !60, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!80 = !DILocalVariable(name: "n", arg: 1, scope: !79, file: !14, line: 41, type: !8)
!81 = !DILocation(line: 41, column: 21, scope: !79)
!82 = !DILocation(line: 42, column: 17, scope: !79)
!83 = !DILocation(line: 42, column: 10, scope: !79)
!84 = !DILocation(line: 42, column: 3, scope: !79)
!85 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !14, file: !14, line: 45, type: !60, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!86 = !DILocalVariable(name: "n", arg: 1, scope: !85, file: !14, line: 45, type: !8)
!87 = !DILocation(line: 45, column: 21, scope: !85)
!88 = !DILocation(line: 46, column: 17, scope: !85)
!89 = !DILocation(line: 46, column: 10, scope: !85)
!90 = !DILocation(line: 46, column: 3, scope: !85)
!91 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !14, file: !14, line: 49, type: !60, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!92 = !DILocalVariable(name: "n", arg: 1, scope: !91, file: !14, line: 49, type: !8)
!93 = !DILocation(line: 49, column: 21, scope: !91)
!94 = !DILocation(line: 50, column: 17, scope: !91)
!95 = !DILocation(line: 50, column: 10, scope: !91)
!96 = !DILocation(line: 50, column: 3, scope: !91)
!97 = distinct !DISubprogram(name: "LEAKFN", scope: !14, file: !14, line: 53, type: !60, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!98 = !DILocalVariable(name: "n", arg: 1, scope: !97, file: !14, line: 53, type: !8)
!99 = !DILocation(line: 53, column: 18, scope: !97)
!100 = !DILocation(line: 54, column: 17, scope: !97)
!101 = !DILocation(line: 54, column: 10, scope: !97)
!102 = !DILocation(line: 54, column: 3, scope: !97)
!103 = distinct !DISubprogram(name: "RC_ACCESS", scope: !14, file: !14, line: 63, type: !104, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!104 = !DISubroutineType(types: !105)
!105 = !{null, !8, !8}
!106 = !DILocalVariable(name: "id", arg: 1, scope: !103, file: !14, line: 63, type: !8)
!107 = !DILocation(line: 63, column: 20, scope: !103)
!108 = !DILocalVariable(name: "flags", arg: 2, scope: !103, file: !14, line: 63, type: !8)
!109 = !DILocation(line: 63, column: 28, scope: !103)
!110 = !DILocation(line: 64, column: 3, scope: !103)
!111 = !DILocation(line: 65, column: 1, scope: !103)
!112 = distinct !DISubprogram(name: "CXT_THREAD", scope: !14, file: !14, line: 75, type: !113, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!113 = !DISubroutineType(types: !114)
!114 = !{null, !8, !115}
!115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !116, size: 64)
!116 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!117 = !DILocalVariable(name: "thdid", arg: 1, scope: !112, file: !14, line: 75, type: !8)
!118 = !DILocation(line: 75, column: 21, scope: !112)
!119 = !DILocalVariable(name: "cxt", arg: 2, scope: !112, file: !14, line: 75, type: !115)
!120 = !DILocation(line: 75, column: 34, scope: !112)
!121 = !DILocation(line: 77, column: 1, scope: !112)
!122 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !14, file: !14, line: 78, type: !113, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!123 = !DILocalVariable(name: "thdid", arg: 1, scope: !122, file: !14, line: 78, type: !8)
!124 = !DILocation(line: 78, column: 21, scope: !122)
!125 = !DILocalVariable(name: "cxt", arg: 2, scope: !122, file: !14, line: 78, type: !115)
!126 = !DILocation(line: 78, column: 33, scope: !122)
!127 = !DILocation(line: 80, column: 1, scope: !122)
!128 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !14, file: !14, line: 81, type: !129, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!129 = !DISubroutineType(types: !130)
!130 = !{null, !8, !115, !115}
!131 = !DILocalVariable(name: "thdid", arg: 1, scope: !128, file: !14, line: 81, type: !8)
!132 = !DILocation(line: 81, column: 26, scope: !128)
!133 = !DILocalVariable(name: "cxt", arg: 2, scope: !128, file: !14, line: 81, type: !115)
!134 = !DILocation(line: 81, column: 38, scope: !128)
!135 = !DILocalVariable(name: "lev", arg: 3, scope: !128, file: !14, line: 81, type: !115)
!136 = !DILocation(line: 81, column: 49, scope: !128)
!137 = !DILocation(line: 83, column: 1, scope: !128)
!138 = distinct !DISubprogram(name: "LOCK", scope: !14, file: !14, line: 85, type: !139, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!139 = !DISubroutineType(types: !140)
!140 = !{null, !115}
!141 = !DILocalVariable(name: "lockname", arg: 1, scope: !138, file: !14, line: 85, type: !115)
!142 = !DILocation(line: 85, column: 17, scope: !138)
!143 = !DILocation(line: 87, column: 1, scope: !138)
!144 = distinct !DISubprogram(name: "PAUSE", scope: !14, file: !14, line: 89, type: !139, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!145 = !DILocalVariable(name: "str", arg: 1, scope: !144, file: !14, line: 89, type: !115)
!146 = !DILocation(line: 89, column: 18, scope: !144)
!147 = !DILocation(line: 90, column: 18, scope: !144)
!148 = !DILocation(line: 90, column: 3, scope: !144)
!149 = !DILocation(line: 91, column: 3, scope: !144)
!150 = !DILocation(line: 92, column: 3, scope: !144)
!151 = !DILocation(line: 93, column: 1, scope: !144)
!152 = distinct !DISubprogram(name: "deref", scope: !14, file: !14, line: 111, type: !153, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!153 = !DISubroutineType(types: !154)
!154 = !{null}
!155 = !DILocation(line: 111, column: 20, scope: !152)
!156 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 11, type: !157, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!157 = !DISubroutineType(types: !158)
!158 = !{!8}
!159 = !DILocalVariable(name: "p", scope: !156, file: !6, line: 13, type: !7)
!160 = !DILocation(line: 13, column: 7, scope: !156)
!161 = !DILocation(line: 13, column: 11, scope: !156)
!162 = !DILocation(line: 14, column: 6, scope: !156)
!163 = !DILocation(line: 14, column: 4, scope: !156)
!164 = !DILocation(line: 15, column: 17, scope: !156)
!165 = !DILocation(line: 15, column: 19, scope: !156)
!166 = !DILocation(line: 15, column: 2, scope: !156)
!167 = !DILocation(line: 16, column: 1, scope: !156)
