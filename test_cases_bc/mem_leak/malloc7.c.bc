; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc7.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc7.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@g = dso_local global i32* null, align 8, !dbg !0
@.str.3 = private unnamed_addr constant [6 x i8] c"%d,%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !15 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !20, metadata !DIExpression()), !dbg !21
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !22, metadata !DIExpression()), !dbg !23
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !24
  ret void, !dbg !25
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !26 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !27, metadata !DIExpression()), !dbg !28
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !29, metadata !DIExpression()), !dbg !30
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !31
  ret void, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !33 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !34, metadata !DIExpression()), !dbg !35
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !36, metadata !DIExpression()), !dbg !37
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !38
  ret void, !dbg !39
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !40 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !41, metadata !DIExpression()), !dbg !42
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !43, metadata !DIExpression()), !dbg !44
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !45
  ret void, !dbg !46
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !47 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !48, metadata !DIExpression()), !dbg !49
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !50, metadata !DIExpression()), !dbg !51
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !52
  ret void, !dbg !53
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !54 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !55, metadata !DIExpression()), !dbg !56
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !57, metadata !DIExpression()), !dbg !58
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !59
  ret void, !dbg !60
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !61 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %0 = load i32, i32* %n.addr, align 4, !dbg !66
  %conv = sext i32 %0 to i64, !dbg !66
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !67
  ret i8* %call, !dbg !68
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !69 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !70, metadata !DIExpression()), !dbg !71
  %0 = load i32, i32* %n.addr, align 4, !dbg !72
  %conv = sext i32 %0 to i64, !dbg !72
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !73
  ret i8* %call, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !75 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %0 = load i32, i32* %n.addr, align 4, !dbg !78
  %conv = sext i32 %0 to i64, !dbg !78
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !79
  ret i8* %call, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !81 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %0 = load i32, i32* %n.addr, align 4, !dbg !84
  %conv = sext i32 %0 to i64, !dbg !84
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !85
  ret i8* %call, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !87 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, i32* %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !91
  ret i8* %call, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, i32* %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !97
  ret i8* %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, i32* %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !103
  ret i8* %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !105 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !108, metadata !DIExpression()), !dbg !109
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !112
  ret void, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !114 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !119, metadata !DIExpression()), !dbg !120
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !121, metadata !DIExpression()), !dbg !122
  ret void, !dbg !123
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !124 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !125, metadata !DIExpression()), !dbg !126
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !127, metadata !DIExpression()), !dbg !128
  ret void, !dbg !129
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !130 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !133, metadata !DIExpression()), !dbg !134
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !135, metadata !DIExpression()), !dbg !136
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !137, metadata !DIExpression()), !dbg !138
  ret void, !dbg !139
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !140 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !143, metadata !DIExpression()), !dbg !144
  ret void, !dbg !145
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !146 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !147, metadata !DIExpression()), !dbg !148
  %0 = load i8*, i8** %str.addr, align 8, !dbg !149
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !150
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !151
  %call2 = call i32 @getchar(), !dbg !152
  ret void, !dbg !153
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !154 {
entry:
  ret void, !dbg !157
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !158 {
entry:
  %p = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p, metadata !161, metadata !DIExpression()), !dbg !162
  %call = call i8* @SAFEMALLOC(i32 1), !dbg !163
  %0 = bitcast i8* %call to i32*, !dbg !163
  store i32* %0, i32** %p, align 8, !dbg !162
  %1 = load i32*, i32** %p, align 8, !dbg !164
  store i32* %1, i32** @g, align 8, !dbg !165
  %2 = load i32*, i32** @g, align 8, !dbg !166
  %3 = load i32*, i32** %p, align 8, !dbg !167
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32* %2, i32* %3), !dbg !168
  ret i32 0, !dbg !169
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "g", scope: !2, file: !6, line: 10, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc7.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "src/mem_leak/malloc7.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!9 = !{i32 7, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{i32 7, !"uwtable", i32 1}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 13.0.0"}
!15 = distinct !DISubprogram(name: "MUSTALIAS", scope: !16, file: !16, line: 4, type: !17, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!16 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!17 = !DISubroutineType(types: !18)
!18 = !{null, !19, !19}
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!20 = !DILocalVariable(name: "p", arg: 1, scope: !15, file: !16, line: 4, type: !19)
!21 = !DILocation(line: 4, column: 22, scope: !15)
!22 = !DILocalVariable(name: "q", arg: 2, scope: !15, file: !16, line: 4, type: !19)
!23 = !DILocation(line: 4, column: 31, scope: !15)
!24 = !DILocation(line: 5, column: 3, scope: !15)
!25 = !DILocation(line: 6, column: 1, scope: !15)
!26 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !16, file: !16, line: 8, type: !17, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!27 = !DILocalVariable(name: "p", arg: 1, scope: !26, file: !16, line: 8, type: !19)
!28 = !DILocation(line: 8, column: 25, scope: !26)
!29 = !DILocalVariable(name: "q", arg: 2, scope: !26, file: !16, line: 8, type: !19)
!30 = !DILocation(line: 8, column: 34, scope: !26)
!31 = !DILocation(line: 9, column: 3, scope: !26)
!32 = !DILocation(line: 10, column: 1, scope: !26)
!33 = distinct !DISubprogram(name: "MAYALIAS", scope: !16, file: !16, line: 12, type: !17, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!34 = !DILocalVariable(name: "p", arg: 1, scope: !33, file: !16, line: 12, type: !19)
!35 = !DILocation(line: 12, column: 21, scope: !33)
!36 = !DILocalVariable(name: "q", arg: 2, scope: !33, file: !16, line: 12, type: !19)
!37 = !DILocation(line: 12, column: 30, scope: !33)
!38 = !DILocation(line: 13, column: 3, scope: !33)
!39 = !DILocation(line: 14, column: 1, scope: !33)
!40 = distinct !DISubprogram(name: "NOALIAS", scope: !16, file: !16, line: 16, type: !17, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!41 = !DILocalVariable(name: "p", arg: 1, scope: !40, file: !16, line: 16, type: !19)
!42 = !DILocation(line: 16, column: 20, scope: !40)
!43 = !DILocalVariable(name: "q", arg: 2, scope: !40, file: !16, line: 16, type: !19)
!44 = !DILocation(line: 16, column: 29, scope: !40)
!45 = !DILocation(line: 17, column: 3, scope: !40)
!46 = !DILocation(line: 18, column: 1, scope: !40)
!47 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !16, file: !16, line: 20, type: !17, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!48 = !DILocalVariable(name: "p", arg: 1, scope: !47, file: !16, line: 20, type: !19)
!49 = !DILocation(line: 20, column: 34, scope: !47)
!50 = !DILocalVariable(name: "q", arg: 2, scope: !47, file: !16, line: 20, type: !19)
!51 = !DILocation(line: 20, column: 43, scope: !47)
!52 = !DILocation(line: 21, column: 3, scope: !47)
!53 = !DILocation(line: 22, column: 1, scope: !47)
!54 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !16, file: !16, line: 24, type: !17, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!55 = !DILocalVariable(name: "p", arg: 1, scope: !54, file: !16, line: 24, type: !19)
!56 = !DILocation(line: 24, column: 33, scope: !54)
!57 = !DILocalVariable(name: "q", arg: 2, scope: !54, file: !16, line: 24, type: !19)
!58 = !DILocation(line: 24, column: 42, scope: !54)
!59 = !DILocation(line: 25, column: 3, scope: !54)
!60 = !DILocation(line: 26, column: 1, scope: !54)
!61 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !16, file: !16, line: 29, type: !62, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!62 = !DISubroutineType(types: !63)
!63 = !{!19, !8}
!64 = !DILocalVariable(name: "n", arg: 1, scope: !61, file: !16, line: 29, type: !8)
!65 = !DILocation(line: 29, column: 22, scope: !61)
!66 = !DILocation(line: 30, column: 17, scope: !61)
!67 = !DILocation(line: 30, column: 10, scope: !61)
!68 = !DILocation(line: 30, column: 3, scope: !61)
!69 = distinct !DISubprogram(name: "PLKMALLOC", scope: !16, file: !16, line: 33, type: !62, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!70 = !DILocalVariable(name: "n", arg: 1, scope: !69, file: !16, line: 33, type: !8)
!71 = !DILocation(line: 33, column: 21, scope: !69)
!72 = !DILocation(line: 34, column: 17, scope: !69)
!73 = !DILocation(line: 34, column: 10, scope: !69)
!74 = !DILocation(line: 34, column: 3, scope: !69)
!75 = distinct !DISubprogram(name: "NFRMALLOC", scope: !16, file: !16, line: 37, type: !62, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!76 = !DILocalVariable(name: "n", arg: 1, scope: !75, file: !16, line: 37, type: !8)
!77 = !DILocation(line: 37, column: 21, scope: !75)
!78 = !DILocation(line: 38, column: 17, scope: !75)
!79 = !DILocation(line: 38, column: 10, scope: !75)
!80 = !DILocation(line: 38, column: 3, scope: !75)
!81 = distinct !DISubprogram(name: "CLKMALLOC", scope: !16, file: !16, line: 41, type: !62, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!82 = !DILocalVariable(name: "n", arg: 1, scope: !81, file: !16, line: 41, type: !8)
!83 = !DILocation(line: 41, column: 21, scope: !81)
!84 = !DILocation(line: 42, column: 17, scope: !81)
!85 = !DILocation(line: 42, column: 10, scope: !81)
!86 = !DILocation(line: 42, column: 3, scope: !81)
!87 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !16, file: !16, line: 45, type: !62, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!88 = !DILocalVariable(name: "n", arg: 1, scope: !87, file: !16, line: 45, type: !8)
!89 = !DILocation(line: 45, column: 21, scope: !87)
!90 = !DILocation(line: 46, column: 17, scope: !87)
!91 = !DILocation(line: 46, column: 10, scope: !87)
!92 = !DILocation(line: 46, column: 3, scope: !87)
!93 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !16, file: !16, line: 49, type: !62, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !16, line: 49, type: !8)
!95 = !DILocation(line: 49, column: 21, scope: !93)
!96 = !DILocation(line: 50, column: 17, scope: !93)
!97 = !DILocation(line: 50, column: 10, scope: !93)
!98 = !DILocation(line: 50, column: 3, scope: !93)
!99 = distinct !DISubprogram(name: "LEAKFN", scope: !16, file: !16, line: 53, type: !62, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !16, line: 53, type: !8)
!101 = !DILocation(line: 53, column: 18, scope: !99)
!102 = !DILocation(line: 54, column: 17, scope: !99)
!103 = !DILocation(line: 54, column: 10, scope: !99)
!104 = !DILocation(line: 54, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "RC_ACCESS", scope: !16, file: !16, line: 63, type: !106, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!106 = !DISubroutineType(types: !107)
!107 = !{null, !8, !8}
!108 = !DILocalVariable(name: "id", arg: 1, scope: !105, file: !16, line: 63, type: !8)
!109 = !DILocation(line: 63, column: 20, scope: !105)
!110 = !DILocalVariable(name: "flags", arg: 2, scope: !105, file: !16, line: 63, type: !8)
!111 = !DILocation(line: 63, column: 28, scope: !105)
!112 = !DILocation(line: 64, column: 3, scope: !105)
!113 = !DILocation(line: 65, column: 1, scope: !105)
!114 = distinct !DISubprogram(name: "CXT_THREAD", scope: !16, file: !16, line: 75, type: !115, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!115 = !DISubroutineType(types: !116)
!116 = !{null, !8, !117}
!117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !118, size: 64)
!118 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!119 = !DILocalVariable(name: "thdid", arg: 1, scope: !114, file: !16, line: 75, type: !8)
!120 = !DILocation(line: 75, column: 21, scope: !114)
!121 = !DILocalVariable(name: "cxt", arg: 2, scope: !114, file: !16, line: 75, type: !117)
!122 = !DILocation(line: 75, column: 34, scope: !114)
!123 = !DILocation(line: 77, column: 1, scope: !114)
!124 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !16, file: !16, line: 78, type: !115, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!125 = !DILocalVariable(name: "thdid", arg: 1, scope: !124, file: !16, line: 78, type: !8)
!126 = !DILocation(line: 78, column: 21, scope: !124)
!127 = !DILocalVariable(name: "cxt", arg: 2, scope: !124, file: !16, line: 78, type: !117)
!128 = !DILocation(line: 78, column: 33, scope: !124)
!129 = !DILocation(line: 80, column: 1, scope: !124)
!130 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !16, file: !16, line: 81, type: !131, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!131 = !DISubroutineType(types: !132)
!132 = !{null, !8, !117, !117}
!133 = !DILocalVariable(name: "thdid", arg: 1, scope: !130, file: !16, line: 81, type: !8)
!134 = !DILocation(line: 81, column: 26, scope: !130)
!135 = !DILocalVariable(name: "cxt", arg: 2, scope: !130, file: !16, line: 81, type: !117)
!136 = !DILocation(line: 81, column: 38, scope: !130)
!137 = !DILocalVariable(name: "lev", arg: 3, scope: !130, file: !16, line: 81, type: !117)
!138 = !DILocation(line: 81, column: 49, scope: !130)
!139 = !DILocation(line: 83, column: 1, scope: !130)
!140 = distinct !DISubprogram(name: "LOCK", scope: !16, file: !16, line: 85, type: !141, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!141 = !DISubroutineType(types: !142)
!142 = !{null, !117}
!143 = !DILocalVariable(name: "lockname", arg: 1, scope: !140, file: !16, line: 85, type: !117)
!144 = !DILocation(line: 85, column: 17, scope: !140)
!145 = !DILocation(line: 87, column: 1, scope: !140)
!146 = distinct !DISubprogram(name: "PAUSE", scope: !16, file: !16, line: 89, type: !141, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!147 = !DILocalVariable(name: "str", arg: 1, scope: !146, file: !16, line: 89, type: !117)
!148 = !DILocation(line: 89, column: 18, scope: !146)
!149 = !DILocation(line: 90, column: 18, scope: !146)
!150 = !DILocation(line: 90, column: 3, scope: !146)
!151 = !DILocation(line: 91, column: 3, scope: !146)
!152 = !DILocation(line: 92, column: 3, scope: !146)
!153 = !DILocation(line: 93, column: 1, scope: !146)
!154 = distinct !DISubprogram(name: "deref", scope: !16, file: !16, line: 111, type: !155, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!155 = !DISubroutineType(types: !156)
!156 = !{null}
!157 = !DILocation(line: 111, column: 20, scope: !154)
!158 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 11, type: !159, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!159 = !DISubroutineType(types: !160)
!160 = !{!8}
!161 = !DILocalVariable(name: "p", scope: !158, file: !6, line: 13, type: !7)
!162 = !DILocation(line: 13, column: 7, scope: !158)
!163 = !DILocation(line: 13, column: 11, scope: !158)
!164 = !DILocation(line: 14, column: 6, scope: !158)
!165 = !DILocation(line: 14, column: 4, scope: !158)
!166 = !DILocation(line: 15, column: 17, scope: !158)
!167 = !DILocation(line: 15, column: 19, scope: !158)
!168 = !DILocation(line: 15, column: 2, scope: !158)
!169 = !DILocation(line: 16, column: 1, scope: !158)
