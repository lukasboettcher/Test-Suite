; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp2a.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp2a.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !12 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !19, metadata !DIExpression()), !dbg !20
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !21
  ret void, !dbg !22
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !23 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !24, metadata !DIExpression()), !dbg !25
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !28
  ret void, !dbg !29
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !30 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !31, metadata !DIExpression()), !dbg !32
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !35
  ret void, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !37 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !38, metadata !DIExpression()), !dbg !39
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !42
  ret void, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !44 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !45, metadata !DIExpression()), !dbg !46
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !49
  ret void, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !51 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !58 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !62, metadata !DIExpression()), !dbg !63
  %0 = load i32, i32* %n.addr, align 4, !dbg !64
  %conv = sext i32 %0 to i64, !dbg !64
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !65
  ret i8* %call, !dbg !66
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !67 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %0 = load i32, i32* %n.addr, align 4, !dbg !70
  %conv = sext i32 %0 to i64, !dbg !70
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !71
  ret i8* %call, !dbg !72
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !73 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %0 = load i32, i32* %n.addr, align 4, !dbg !76
  %conv = sext i32 %0 to i64, !dbg !76
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !77
  ret i8* %call, !dbg !78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !79 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %0 = load i32, i32* %n.addr, align 4, !dbg !82
  %conv = sext i32 %0 to i64, !dbg !82
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !83
  ret i8* %call, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !85 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %0 = load i32, i32* %n.addr, align 4, !dbg !88
  %conv = sext i32 %0 to i64, !dbg !88
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !89
  ret i8* %call, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !91 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %0 = load i32, i32* %n.addr, align 4, !dbg !94
  %conv = sext i32 %0 to i64, !dbg !94
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !95
  ret i8* %call, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !97 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %0 = load i32, i32* %n.addr, align 4, !dbg !100
  %conv = sext i32 %0 to i64, !dbg !100
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !101
  ret i8* %call, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !103 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !106, metadata !DIExpression()), !dbg !107
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !108, metadata !DIExpression()), !dbg !109
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !110
  ret void, !dbg !111
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !112 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !115, metadata !DIExpression()), !dbg !116
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !117, metadata !DIExpression()), !dbg !118
  ret void, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !120 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !121, metadata !DIExpression()), !dbg !122
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !123, metadata !DIExpression()), !dbg !124
  ret void, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !126 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !129, metadata !DIExpression()), !dbg !130
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !131, metadata !DIExpression()), !dbg !132
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !133, metadata !DIExpression()), !dbg !134
  ret void, !dbg !135
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !136 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !139, metadata !DIExpression()), !dbg !140
  ret void, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !142 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !143, metadata !DIExpression()), !dbg !144
  %0 = load i8*, i8** %str.addr, align 8, !dbg !145
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !146
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !147
  %call2 = call i32 @getchar(), !dbg !148
  ret void, !dbg !149
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !150 {
entry:
  ret void, !dbg !153
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %arg1) #0 !dbg !154 {
entry:
  %retval = alloca i32, align 4
  %arg1.addr = alloca i32, align 4
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %y = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  store i32 %arg1, i32* %arg1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %arg1.addr, metadata !158, metadata !DIExpression()), !dbg !159
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !160, metadata !DIExpression()), !dbg !161
  call void @llvm.dbg.declare(metadata i8** %p2, metadata !162, metadata !DIExpression()), !dbg !163
  call void @llvm.dbg.declare(metadata i32* %y, metadata !164, metadata !DIExpression()), !dbg !165
  store i32 10, i32* %y, align 4, !dbg !165
  %call = call i8* @PLKMALLOC(i32 10), !dbg !166
  store i8* %call, i8** %p1, align 8, !dbg !167
  %0 = load i8*, i8** %p1, align 8, !dbg !168
  %cmp = icmp eq i8* %0, null, !dbg !170
  br i1 %cmp, label %if.then, label %if.end, !dbg !171

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !172
  br label %return, !dbg !172

if.end:                                           ; preds = %entry
  %call1 = call i8* @SAFEMALLOC(i32 10), !dbg !173
  store i8* %call1, i8** %p2, align 8, !dbg !174
  %1 = load i8*, i8** %p2, align 8, !dbg !175
  %cmp2 = icmp eq i8* %1, null, !dbg !177
  br i1 %cmp2, label %if.then3, label %if.end7, !dbg !178

if.then3:                                         ; preds = %if.end
  %2 = load i8*, i8** %p1, align 8, !dbg !179
  %cmp4 = icmp ne i8* %2, null, !dbg !182
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !183

if.then5:                                         ; preds = %if.then3
  %3 = load i8*, i8** %p1, align 8, !dbg !184
  call void @free(i8* %3) #4, !dbg !186
  br label %if.end6, !dbg !187

if.end6:                                          ; preds = %if.then5, %if.then3
  store i32 2, i32* %retval, align 4, !dbg !188
  br label %return, !dbg !188

if.end7:                                          ; preds = %if.end
  %4 = load i8*, i8** %p2, align 8, !dbg !189
  store i8* %4, i8** %p1, align 8, !dbg !190
  %5 = load i8*, i8** %p1, align 8, !dbg !191
  call void @free(i8* %5) #4, !dbg !192
  store i32 0, i32* %retval, align 4, !dbg !193
  br label %return, !dbg !193

return:                                           ; preds = %if.end7, %if.end6, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !194
  ret i32 %6, !dbg !194
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!6, !7, !8, !9, !10}
!llvm.ident = !{!11}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp2a.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!6 = !{i32 7, !"Dwarf Version", i32 4}
!7 = !{i32 2, !"Debug Info Version", i32 3}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{i32 7, !"uwtable", i32 1}
!10 = !{i32 7, !"frame-pointer", i32 2}
!11 = !{!"clang version 13.0.0"}
!12 = distinct !DISubprogram(name: "MUSTALIAS", scope: !13, file: !13, line: 4, type: !14, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!13 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!14 = !DISubroutineType(types: !15)
!15 = !{null, !16, !16}
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!17 = !DILocalVariable(name: "p", arg: 1, scope: !12, file: !13, line: 4, type: !16)
!18 = !DILocation(line: 4, column: 22, scope: !12)
!19 = !DILocalVariable(name: "q", arg: 2, scope: !12, file: !13, line: 4, type: !16)
!20 = !DILocation(line: 4, column: 31, scope: !12)
!21 = !DILocation(line: 5, column: 3, scope: !12)
!22 = !DILocation(line: 6, column: 1, scope: !12)
!23 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !13, file: !13, line: 8, type: !14, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!24 = !DILocalVariable(name: "p", arg: 1, scope: !23, file: !13, line: 8, type: !16)
!25 = !DILocation(line: 8, column: 25, scope: !23)
!26 = !DILocalVariable(name: "q", arg: 2, scope: !23, file: !13, line: 8, type: !16)
!27 = !DILocation(line: 8, column: 34, scope: !23)
!28 = !DILocation(line: 9, column: 3, scope: !23)
!29 = !DILocation(line: 10, column: 1, scope: !23)
!30 = distinct !DISubprogram(name: "MAYALIAS", scope: !13, file: !13, line: 12, type: !14, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!31 = !DILocalVariable(name: "p", arg: 1, scope: !30, file: !13, line: 12, type: !16)
!32 = !DILocation(line: 12, column: 21, scope: !30)
!33 = !DILocalVariable(name: "q", arg: 2, scope: !30, file: !13, line: 12, type: !16)
!34 = !DILocation(line: 12, column: 30, scope: !30)
!35 = !DILocation(line: 13, column: 3, scope: !30)
!36 = !DILocation(line: 14, column: 1, scope: !30)
!37 = distinct !DISubprogram(name: "NOALIAS", scope: !13, file: !13, line: 16, type: !14, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!38 = !DILocalVariable(name: "p", arg: 1, scope: !37, file: !13, line: 16, type: !16)
!39 = !DILocation(line: 16, column: 20, scope: !37)
!40 = !DILocalVariable(name: "q", arg: 2, scope: !37, file: !13, line: 16, type: !16)
!41 = !DILocation(line: 16, column: 29, scope: !37)
!42 = !DILocation(line: 17, column: 3, scope: !37)
!43 = !DILocation(line: 18, column: 1, scope: !37)
!44 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !13, file: !13, line: 20, type: !14, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!45 = !DILocalVariable(name: "p", arg: 1, scope: !44, file: !13, line: 20, type: !16)
!46 = !DILocation(line: 20, column: 34, scope: !44)
!47 = !DILocalVariable(name: "q", arg: 2, scope: !44, file: !13, line: 20, type: !16)
!48 = !DILocation(line: 20, column: 43, scope: !44)
!49 = !DILocation(line: 21, column: 3, scope: !44)
!50 = !DILocation(line: 22, column: 1, scope: !44)
!51 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !13, file: !13, line: 24, type: !14, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocalVariable(name: "p", arg: 1, scope: !51, file: !13, line: 24, type: !16)
!53 = !DILocation(line: 24, column: 33, scope: !51)
!54 = !DILocalVariable(name: "q", arg: 2, scope: !51, file: !13, line: 24, type: !16)
!55 = !DILocation(line: 24, column: 42, scope: !51)
!56 = !DILocation(line: 25, column: 3, scope: !51)
!57 = !DILocation(line: 26, column: 1, scope: !51)
!58 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !13, file: !13, line: 29, type: !59, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!59 = !DISubroutineType(types: !60)
!60 = !{!16, !61}
!61 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!62 = !DILocalVariable(name: "n", arg: 1, scope: !58, file: !13, line: 29, type: !61)
!63 = !DILocation(line: 29, column: 22, scope: !58)
!64 = !DILocation(line: 30, column: 17, scope: !58)
!65 = !DILocation(line: 30, column: 10, scope: !58)
!66 = !DILocation(line: 30, column: 3, scope: !58)
!67 = distinct !DISubprogram(name: "PLKMALLOC", scope: !13, file: !13, line: 33, type: !59, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!68 = !DILocalVariable(name: "n", arg: 1, scope: !67, file: !13, line: 33, type: !61)
!69 = !DILocation(line: 33, column: 21, scope: !67)
!70 = !DILocation(line: 34, column: 17, scope: !67)
!71 = !DILocation(line: 34, column: 10, scope: !67)
!72 = !DILocation(line: 34, column: 3, scope: !67)
!73 = distinct !DISubprogram(name: "NFRMALLOC", scope: !13, file: !13, line: 37, type: !59, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!74 = !DILocalVariable(name: "n", arg: 1, scope: !73, file: !13, line: 37, type: !61)
!75 = !DILocation(line: 37, column: 21, scope: !73)
!76 = !DILocation(line: 38, column: 17, scope: !73)
!77 = !DILocation(line: 38, column: 10, scope: !73)
!78 = !DILocation(line: 38, column: 3, scope: !73)
!79 = distinct !DISubprogram(name: "CLKMALLOC", scope: !13, file: !13, line: 41, type: !59, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!80 = !DILocalVariable(name: "n", arg: 1, scope: !79, file: !13, line: 41, type: !61)
!81 = !DILocation(line: 41, column: 21, scope: !79)
!82 = !DILocation(line: 42, column: 17, scope: !79)
!83 = !DILocation(line: 42, column: 10, scope: !79)
!84 = !DILocation(line: 42, column: 3, scope: !79)
!85 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !13, file: !13, line: 45, type: !59, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!86 = !DILocalVariable(name: "n", arg: 1, scope: !85, file: !13, line: 45, type: !61)
!87 = !DILocation(line: 45, column: 21, scope: !85)
!88 = !DILocation(line: 46, column: 17, scope: !85)
!89 = !DILocation(line: 46, column: 10, scope: !85)
!90 = !DILocation(line: 46, column: 3, scope: !85)
!91 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !13, file: !13, line: 49, type: !59, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!92 = !DILocalVariable(name: "n", arg: 1, scope: !91, file: !13, line: 49, type: !61)
!93 = !DILocation(line: 49, column: 21, scope: !91)
!94 = !DILocation(line: 50, column: 17, scope: !91)
!95 = !DILocation(line: 50, column: 10, scope: !91)
!96 = !DILocation(line: 50, column: 3, scope: !91)
!97 = distinct !DISubprogram(name: "LEAKFN", scope: !13, file: !13, line: 53, type: !59, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!98 = !DILocalVariable(name: "n", arg: 1, scope: !97, file: !13, line: 53, type: !61)
!99 = !DILocation(line: 53, column: 18, scope: !97)
!100 = !DILocation(line: 54, column: 17, scope: !97)
!101 = !DILocation(line: 54, column: 10, scope: !97)
!102 = !DILocation(line: 54, column: 3, scope: !97)
!103 = distinct !DISubprogram(name: "RC_ACCESS", scope: !13, file: !13, line: 63, type: !104, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!104 = !DISubroutineType(types: !105)
!105 = !{null, !61, !61}
!106 = !DILocalVariable(name: "id", arg: 1, scope: !103, file: !13, line: 63, type: !61)
!107 = !DILocation(line: 63, column: 20, scope: !103)
!108 = !DILocalVariable(name: "flags", arg: 2, scope: !103, file: !13, line: 63, type: !61)
!109 = !DILocation(line: 63, column: 28, scope: !103)
!110 = !DILocation(line: 64, column: 3, scope: !103)
!111 = !DILocation(line: 65, column: 1, scope: !103)
!112 = distinct !DISubprogram(name: "CXT_THREAD", scope: !13, file: !13, line: 75, type: !113, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!113 = !DISubroutineType(types: !114)
!114 = !{null, !61, !4}
!115 = !DILocalVariable(name: "thdid", arg: 1, scope: !112, file: !13, line: 75, type: !61)
!116 = !DILocation(line: 75, column: 21, scope: !112)
!117 = !DILocalVariable(name: "cxt", arg: 2, scope: !112, file: !13, line: 75, type: !4)
!118 = !DILocation(line: 75, column: 34, scope: !112)
!119 = !DILocation(line: 77, column: 1, scope: !112)
!120 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !13, file: !13, line: 78, type: !113, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!121 = !DILocalVariable(name: "thdid", arg: 1, scope: !120, file: !13, line: 78, type: !61)
!122 = !DILocation(line: 78, column: 21, scope: !120)
!123 = !DILocalVariable(name: "cxt", arg: 2, scope: !120, file: !13, line: 78, type: !4)
!124 = !DILocation(line: 78, column: 33, scope: !120)
!125 = !DILocation(line: 80, column: 1, scope: !120)
!126 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !13, file: !13, line: 81, type: !127, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!127 = !DISubroutineType(types: !128)
!128 = !{null, !61, !4, !4}
!129 = !DILocalVariable(name: "thdid", arg: 1, scope: !126, file: !13, line: 81, type: !61)
!130 = !DILocation(line: 81, column: 26, scope: !126)
!131 = !DILocalVariable(name: "cxt", arg: 2, scope: !126, file: !13, line: 81, type: !4)
!132 = !DILocation(line: 81, column: 38, scope: !126)
!133 = !DILocalVariable(name: "lev", arg: 3, scope: !126, file: !13, line: 81, type: !4)
!134 = !DILocation(line: 81, column: 49, scope: !126)
!135 = !DILocation(line: 83, column: 1, scope: !126)
!136 = distinct !DISubprogram(name: "LOCK", scope: !13, file: !13, line: 85, type: !137, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!137 = !DISubroutineType(types: !138)
!138 = !{null, !4}
!139 = !DILocalVariable(name: "lockname", arg: 1, scope: !136, file: !13, line: 85, type: !4)
!140 = !DILocation(line: 85, column: 17, scope: !136)
!141 = !DILocation(line: 87, column: 1, scope: !136)
!142 = distinct !DISubprogram(name: "PAUSE", scope: !13, file: !13, line: 89, type: !137, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!143 = !DILocalVariable(name: "str", arg: 1, scope: !142, file: !13, line: 89, type: !4)
!144 = !DILocation(line: 89, column: 18, scope: !142)
!145 = !DILocation(line: 90, column: 18, scope: !142)
!146 = !DILocation(line: 90, column: 3, scope: !142)
!147 = !DILocation(line: 91, column: 3, scope: !142)
!148 = !DILocation(line: 92, column: 3, scope: !142)
!149 = !DILocation(line: 93, column: 1, scope: !142)
!150 = distinct !DISubprogram(name: "deref", scope: !13, file: !13, line: 111, type: !151, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!151 = !DISubroutineType(types: !152)
!152 = !{null}
!153 = !DILocation(line: 111, column: 20, scope: !150)
!154 = distinct !DISubprogram(name: "main", scope: !155, file: !155, line: 11, type: !156, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!155 = !DIFile(filename: "src/mem_leak/sp2a.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!156 = !DISubroutineType(types: !157)
!157 = !{!61, !61}
!158 = !DILocalVariable(name: "arg1", arg: 1, scope: !154, file: !155, line: 11, type: !61)
!159 = !DILocation(line: 11, column: 14, scope: !154)
!160 = !DILocalVariable(name: "p1", scope: !154, file: !155, line: 12, type: !4)
!161 = !DILocation(line: 12, column: 8, scope: !154)
!162 = !DILocalVariable(name: "p2", scope: !154, file: !155, line: 13, type: !4)
!163 = !DILocation(line: 13, column: 8, scope: !154)
!164 = !DILocalVariable(name: "y", scope: !154, file: !155, line: 14, type: !61)
!165 = !DILocation(line: 14, column: 6, scope: !154)
!166 = !DILocation(line: 15, column: 16, scope: !154)
!167 = !DILocation(line: 15, column: 5, scope: !154)
!168 = !DILocation(line: 17, column: 6, scope: !169)
!169 = distinct !DILexicalBlock(scope: !154, file: !155, line: 17, column: 6)
!170 = !DILocation(line: 17, column: 9, scope: !169)
!171 = !DILocation(line: 17, column: 6, scope: !154)
!172 = !DILocation(line: 18, column: 3, scope: !169)
!173 = !DILocation(line: 20, column: 16, scope: !154)
!174 = !DILocation(line: 20, column: 5, scope: !154)
!175 = !DILocation(line: 21, column: 6, scope: !176)
!176 = distinct !DILexicalBlock(scope: !154, file: !155, line: 21, column: 6)
!177 = !DILocation(line: 21, column: 9, scope: !176)
!178 = !DILocation(line: 21, column: 6, scope: !154)
!179 = !DILocation(line: 22, column: 7, scope: !180)
!180 = distinct !DILexicalBlock(scope: !181, file: !155, line: 22, column: 7)
!181 = distinct !DILexicalBlock(scope: !176, file: !155, line: 21, column: 15)
!182 = !DILocation(line: 22, column: 10, scope: !180)
!183 = !DILocation(line: 22, column: 7, scope: !181)
!184 = !DILocation(line: 23, column: 9, scope: !185)
!185 = distinct !DILexicalBlock(scope: !180, file: !155, line: 22, column: 16)
!186 = !DILocation(line: 23, column: 4, scope: !185)
!187 = !DILocation(line: 24, column: 3, scope: !185)
!188 = !DILocation(line: 25, column: 3, scope: !181)
!189 = !DILocation(line: 28, column: 7, scope: !154)
!190 = !DILocation(line: 28, column: 5, scope: !154)
!191 = !DILocation(line: 29, column: 7, scope: !154)
!192 = !DILocation(line: 29, column: 2, scope: !154)
!193 = !DILocation(line: 30, column: 2, scope: !154)
!194 = !DILocation(line: 31, column: 1, scope: !154)
