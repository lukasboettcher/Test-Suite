; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc8.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc8.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"Error:  Unable to malloc memory.  Aborting.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !12 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !17, metadata !DIExpression()), !dbg !18
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !19, metadata !DIExpression()), !dbg !20
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !21
  ret void, !dbg !22
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !23 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !24, metadata !DIExpression()), !dbg !25
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !28
  ret void, !dbg !29
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !30 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !31, metadata !DIExpression()), !dbg !32
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !35
  ret void, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !37 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !38, metadata !DIExpression()), !dbg !39
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !42
  ret void, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !44 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !45, metadata !DIExpression()), !dbg !46
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !49
  ret void, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !51 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !58 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %0 = load i32, i32* %n.addr, align 4, !dbg !63
  %conv = sext i32 %0 to i64, !dbg !63
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !64
  ret i8* %call, !dbg !65
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !66 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !67, metadata !DIExpression()), !dbg !68
  %0 = load i32, i32* %n.addr, align 4, !dbg !69
  %conv = sext i32 %0 to i64, !dbg !69
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !70
  ret i8* %call, !dbg !71
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !72 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !73, metadata !DIExpression()), !dbg !74
  %0 = load i32, i32* %n.addr, align 4, !dbg !75
  %conv = sext i32 %0 to i64, !dbg !75
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !76
  ret i8* %call, !dbg !77
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !78 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !79, metadata !DIExpression()), !dbg !80
  %0 = load i32, i32* %n.addr, align 4, !dbg !81
  %conv = sext i32 %0 to i64, !dbg !81
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !82
  ret i8* %call, !dbg !83
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !84 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !85, metadata !DIExpression()), !dbg !86
  %0 = load i32, i32* %n.addr, align 4, !dbg !87
  %conv = sext i32 %0 to i64, !dbg !87
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !88
  ret i8* %call, !dbg !89
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !90 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !91, metadata !DIExpression()), !dbg !92
  %0 = load i32, i32* %n.addr, align 4, !dbg !93
  %conv = sext i32 %0 to i64, !dbg !93
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !94
  ret i8* %call, !dbg !95
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !96 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !97, metadata !DIExpression()), !dbg !98
  %0 = load i32, i32* %n.addr, align 4, !dbg !99
  %conv = sext i32 %0 to i64, !dbg !99
  %call = call noalias align 16 i8* @malloc(i64 %conv) #5, !dbg !100
  ret i8* %call, !dbg !101
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !102 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !105, metadata !DIExpression()), !dbg !106
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !107, metadata !DIExpression()), !dbg !108
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !109
  ret void, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !111 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !116, metadata !DIExpression()), !dbg !117
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !118, metadata !DIExpression()), !dbg !119
  ret void, !dbg !120
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !121 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !122, metadata !DIExpression()), !dbg !123
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !124, metadata !DIExpression()), !dbg !125
  ret void, !dbg !126
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !127 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !130, metadata !DIExpression()), !dbg !131
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !132, metadata !DIExpression()), !dbg !133
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !134, metadata !DIExpression()), !dbg !135
  ret void, !dbg !136
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !137 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !140, metadata !DIExpression()), !dbg !141
  ret void, !dbg !142
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !143 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !144, metadata !DIExpression()), !dbg !145
  %0 = load i8*, i8** %str.addr, align 8, !dbg !146
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !147
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !148
  %call2 = call i32 @getchar(), !dbg !149
  ret void, !dbg !150
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !151 {
entry:
  ret void, !dbg !154
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @my_malloc(i32 %size) #0 !dbg !155 {
entry:
  %size.addr = alloca i32, align 4
  %ret = alloca i8*, align 8
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !157, metadata !DIExpression()), !dbg !158
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !159, metadata !DIExpression()), !dbg !160
  %0 = load i32, i32* %size.addr, align 4, !dbg !161
  %call = call i8* @SAFEMALLOC(i32 %0), !dbg !163
  store i8* %call, i8** %ret, align 8, !dbg !164
  %cmp = icmp eq i8* %call, null, !dbg !165
  br i1 %cmp, label %if.then, label %if.end, !dbg !166

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0)), !dbg !167
  call void @exit(i32 1) #6, !dbg !169
  unreachable, !dbg !169

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %ret, align 8, !dbg !170
  ret i8* %1, !dbg !171
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !172 {
entry:
  %side_ordering = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %side_ordering, metadata !175, metadata !DIExpression()), !dbg !176
  %call = call i8* @my_malloc(i32 40), !dbg !177
  %0 = bitcast i8* %call to i32*, !dbg !178
  store i32* %0, i32** %side_ordering, align 8, !dbg !176
  %1 = load i32*, i32** %side_ordering, align 8, !dbg !179
  %2 = bitcast i32* %1 to i8*, !dbg !179
  call void @free(i8* %2) #5, !dbg !180
  ret i32 0, !dbg !181
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!6, !7, !8, !9, !10}
!llvm.ident = !{!11}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc8.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!6 = !{i32 7, !"Dwarf Version", i32 4}
!7 = !{i32 2, !"Debug Info Version", i32 3}
!8 = !{i32 1, !"wchar_size", i32 4}
!9 = !{i32 7, !"uwtable", i32 1}
!10 = !{i32 7, !"frame-pointer", i32 2}
!11 = !{!"clang version 13.0.0"}
!12 = distinct !DISubprogram(name: "MUSTALIAS", scope: !13, file: !13, line: 4, type: !14, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!13 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!14 = !DISubroutineType(types: !15)
!15 = !{null, !16, !16}
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!17 = !DILocalVariable(name: "p", arg: 1, scope: !12, file: !13, line: 4, type: !16)
!18 = !DILocation(line: 4, column: 22, scope: !12)
!19 = !DILocalVariable(name: "q", arg: 2, scope: !12, file: !13, line: 4, type: !16)
!20 = !DILocation(line: 4, column: 31, scope: !12)
!21 = !DILocation(line: 5, column: 3, scope: !12)
!22 = !DILocation(line: 6, column: 1, scope: !12)
!23 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !13, file: !13, line: 8, type: !14, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!24 = !DILocalVariable(name: "p", arg: 1, scope: !23, file: !13, line: 8, type: !16)
!25 = !DILocation(line: 8, column: 25, scope: !23)
!26 = !DILocalVariable(name: "q", arg: 2, scope: !23, file: !13, line: 8, type: !16)
!27 = !DILocation(line: 8, column: 34, scope: !23)
!28 = !DILocation(line: 9, column: 3, scope: !23)
!29 = !DILocation(line: 10, column: 1, scope: !23)
!30 = distinct !DISubprogram(name: "MAYALIAS", scope: !13, file: !13, line: 12, type: !14, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!31 = !DILocalVariable(name: "p", arg: 1, scope: !30, file: !13, line: 12, type: !16)
!32 = !DILocation(line: 12, column: 21, scope: !30)
!33 = !DILocalVariable(name: "q", arg: 2, scope: !30, file: !13, line: 12, type: !16)
!34 = !DILocation(line: 12, column: 30, scope: !30)
!35 = !DILocation(line: 13, column: 3, scope: !30)
!36 = !DILocation(line: 14, column: 1, scope: !30)
!37 = distinct !DISubprogram(name: "NOALIAS", scope: !13, file: !13, line: 16, type: !14, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!38 = !DILocalVariable(name: "p", arg: 1, scope: !37, file: !13, line: 16, type: !16)
!39 = !DILocation(line: 16, column: 20, scope: !37)
!40 = !DILocalVariable(name: "q", arg: 2, scope: !37, file: !13, line: 16, type: !16)
!41 = !DILocation(line: 16, column: 29, scope: !37)
!42 = !DILocation(line: 17, column: 3, scope: !37)
!43 = !DILocation(line: 18, column: 1, scope: !37)
!44 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !13, file: !13, line: 20, type: !14, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!45 = !DILocalVariable(name: "p", arg: 1, scope: !44, file: !13, line: 20, type: !16)
!46 = !DILocation(line: 20, column: 34, scope: !44)
!47 = !DILocalVariable(name: "q", arg: 2, scope: !44, file: !13, line: 20, type: !16)
!48 = !DILocation(line: 20, column: 43, scope: !44)
!49 = !DILocation(line: 21, column: 3, scope: !44)
!50 = !DILocation(line: 22, column: 1, scope: !44)
!51 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !13, file: !13, line: 24, type: !14, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocalVariable(name: "p", arg: 1, scope: !51, file: !13, line: 24, type: !16)
!53 = !DILocation(line: 24, column: 33, scope: !51)
!54 = !DILocalVariable(name: "q", arg: 2, scope: !51, file: !13, line: 24, type: !16)
!55 = !DILocation(line: 24, column: 42, scope: !51)
!56 = !DILocation(line: 25, column: 3, scope: !51)
!57 = !DILocation(line: 26, column: 1, scope: !51)
!58 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !13, file: !13, line: 29, type: !59, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!59 = !DISubroutineType(types: !60)
!60 = !{!16, !5}
!61 = !DILocalVariable(name: "n", arg: 1, scope: !58, file: !13, line: 29, type: !5)
!62 = !DILocation(line: 29, column: 22, scope: !58)
!63 = !DILocation(line: 30, column: 17, scope: !58)
!64 = !DILocation(line: 30, column: 10, scope: !58)
!65 = !DILocation(line: 30, column: 3, scope: !58)
!66 = distinct !DISubprogram(name: "PLKMALLOC", scope: !13, file: !13, line: 33, type: !59, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!67 = !DILocalVariable(name: "n", arg: 1, scope: !66, file: !13, line: 33, type: !5)
!68 = !DILocation(line: 33, column: 21, scope: !66)
!69 = !DILocation(line: 34, column: 17, scope: !66)
!70 = !DILocation(line: 34, column: 10, scope: !66)
!71 = !DILocation(line: 34, column: 3, scope: !66)
!72 = distinct !DISubprogram(name: "NFRMALLOC", scope: !13, file: !13, line: 37, type: !59, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!73 = !DILocalVariable(name: "n", arg: 1, scope: !72, file: !13, line: 37, type: !5)
!74 = !DILocation(line: 37, column: 21, scope: !72)
!75 = !DILocation(line: 38, column: 17, scope: !72)
!76 = !DILocation(line: 38, column: 10, scope: !72)
!77 = !DILocation(line: 38, column: 3, scope: !72)
!78 = distinct !DISubprogram(name: "CLKMALLOC", scope: !13, file: !13, line: 41, type: !59, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!79 = !DILocalVariable(name: "n", arg: 1, scope: !78, file: !13, line: 41, type: !5)
!80 = !DILocation(line: 41, column: 21, scope: !78)
!81 = !DILocation(line: 42, column: 17, scope: !78)
!82 = !DILocation(line: 42, column: 10, scope: !78)
!83 = !DILocation(line: 42, column: 3, scope: !78)
!84 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !13, file: !13, line: 45, type: !59, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!85 = !DILocalVariable(name: "n", arg: 1, scope: !84, file: !13, line: 45, type: !5)
!86 = !DILocation(line: 45, column: 21, scope: !84)
!87 = !DILocation(line: 46, column: 17, scope: !84)
!88 = !DILocation(line: 46, column: 10, scope: !84)
!89 = !DILocation(line: 46, column: 3, scope: !84)
!90 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !13, file: !13, line: 49, type: !59, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!91 = !DILocalVariable(name: "n", arg: 1, scope: !90, file: !13, line: 49, type: !5)
!92 = !DILocation(line: 49, column: 21, scope: !90)
!93 = !DILocation(line: 50, column: 17, scope: !90)
!94 = !DILocation(line: 50, column: 10, scope: !90)
!95 = !DILocation(line: 50, column: 3, scope: !90)
!96 = distinct !DISubprogram(name: "LEAKFN", scope: !13, file: !13, line: 53, type: !59, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!97 = !DILocalVariable(name: "n", arg: 1, scope: !96, file: !13, line: 53, type: !5)
!98 = !DILocation(line: 53, column: 18, scope: !96)
!99 = !DILocation(line: 54, column: 17, scope: !96)
!100 = !DILocation(line: 54, column: 10, scope: !96)
!101 = !DILocation(line: 54, column: 3, scope: !96)
!102 = distinct !DISubprogram(name: "RC_ACCESS", scope: !13, file: !13, line: 63, type: !103, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!103 = !DISubroutineType(types: !104)
!104 = !{null, !5, !5}
!105 = !DILocalVariable(name: "id", arg: 1, scope: !102, file: !13, line: 63, type: !5)
!106 = !DILocation(line: 63, column: 20, scope: !102)
!107 = !DILocalVariable(name: "flags", arg: 2, scope: !102, file: !13, line: 63, type: !5)
!108 = !DILocation(line: 63, column: 28, scope: !102)
!109 = !DILocation(line: 64, column: 3, scope: !102)
!110 = !DILocation(line: 65, column: 1, scope: !102)
!111 = distinct !DISubprogram(name: "CXT_THREAD", scope: !13, file: !13, line: 75, type: !112, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!112 = !DISubroutineType(types: !113)
!113 = !{null, !5, !114}
!114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !115, size: 64)
!115 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!116 = !DILocalVariable(name: "thdid", arg: 1, scope: !111, file: !13, line: 75, type: !5)
!117 = !DILocation(line: 75, column: 21, scope: !111)
!118 = !DILocalVariable(name: "cxt", arg: 2, scope: !111, file: !13, line: 75, type: !114)
!119 = !DILocation(line: 75, column: 34, scope: !111)
!120 = !DILocation(line: 77, column: 1, scope: !111)
!121 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !13, file: !13, line: 78, type: !112, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!122 = !DILocalVariable(name: "thdid", arg: 1, scope: !121, file: !13, line: 78, type: !5)
!123 = !DILocation(line: 78, column: 21, scope: !121)
!124 = !DILocalVariable(name: "cxt", arg: 2, scope: !121, file: !13, line: 78, type: !114)
!125 = !DILocation(line: 78, column: 33, scope: !121)
!126 = !DILocation(line: 80, column: 1, scope: !121)
!127 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !13, file: !13, line: 81, type: !128, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!128 = !DISubroutineType(types: !129)
!129 = !{null, !5, !114, !114}
!130 = !DILocalVariable(name: "thdid", arg: 1, scope: !127, file: !13, line: 81, type: !5)
!131 = !DILocation(line: 81, column: 26, scope: !127)
!132 = !DILocalVariable(name: "cxt", arg: 2, scope: !127, file: !13, line: 81, type: !114)
!133 = !DILocation(line: 81, column: 38, scope: !127)
!134 = !DILocalVariable(name: "lev", arg: 3, scope: !127, file: !13, line: 81, type: !114)
!135 = !DILocation(line: 81, column: 49, scope: !127)
!136 = !DILocation(line: 83, column: 1, scope: !127)
!137 = distinct !DISubprogram(name: "LOCK", scope: !13, file: !13, line: 85, type: !138, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!138 = !DISubroutineType(types: !139)
!139 = !{null, !114}
!140 = !DILocalVariable(name: "lockname", arg: 1, scope: !137, file: !13, line: 85, type: !114)
!141 = !DILocation(line: 85, column: 17, scope: !137)
!142 = !DILocation(line: 87, column: 1, scope: !137)
!143 = distinct !DISubprogram(name: "PAUSE", scope: !13, file: !13, line: 89, type: !138, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!144 = !DILocalVariable(name: "str", arg: 1, scope: !143, file: !13, line: 89, type: !114)
!145 = !DILocation(line: 89, column: 18, scope: !143)
!146 = !DILocation(line: 90, column: 18, scope: !143)
!147 = !DILocation(line: 90, column: 3, scope: !143)
!148 = !DILocation(line: 91, column: 3, scope: !143)
!149 = !DILocation(line: 92, column: 3, scope: !143)
!150 = !DILocation(line: 93, column: 1, scope: !143)
!151 = distinct !DISubprogram(name: "deref", scope: !13, file: !13, line: 111, type: !152, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!152 = !DISubroutineType(types: !153)
!153 = !{null}
!154 = !DILocation(line: 111, column: 20, scope: !151)
!155 = distinct !DISubprogram(name: "my_malloc", scope: !156, file: !156, line: 11, type: !59, scopeLine: 11, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!156 = !DIFile(filename: "src/mem_leak/malloc8.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!157 = !DILocalVariable(name: "size", arg: 1, scope: !155, file: !156, line: 11, type: !5)
!158 = !DILocation(line: 11, column: 22, scope: !155)
!159 = !DILocalVariable(name: "ret", scope: !155, file: !156, line: 13, type: !16)
!160 = !DILocation(line: 13, column: 9, scope: !155)
!161 = !DILocation(line: 15, column: 27, scope: !162)
!162 = distinct !DILexicalBlock(scope: !155, file: !156, line: 15, column: 8)
!163 = !DILocation(line: 15, column: 15, scope: !162)
!164 = !DILocation(line: 15, column: 13, scope: !162)
!165 = !DILocation(line: 15, column: 34, scope: !162)
!166 = !DILocation(line: 15, column: 8, scope: !155)
!167 = !DILocation(line: 16, column: 9, scope: !168)
!168 = distinct !DILexicalBlock(scope: !162, file: !156, line: 15, column: 40)
!169 = !DILocation(line: 17, column: 10, scope: !168)
!170 = !DILocation(line: 19, column: 13, scope: !155)
!171 = !DILocation(line: 19, column: 5, scope: !155)
!172 = distinct !DISubprogram(name: "main", scope: !156, file: !156, line: 22, type: !173, scopeLine: 22, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!173 = !DISubroutineType(types: !174)
!174 = !{!5}
!175 = !DILocalVariable(name: "side_ordering", scope: !172, file: !156, line: 25, type: !4)
!176 = !DILocation(line: 25, column: 8, scope: !172)
!177 = !DILocation(line: 25, column: 32, scope: !172)
!178 = !DILocation(line: 25, column: 24, scope: !172)
!179 = !DILocation(line: 27, column: 7, scope: !172)
!180 = !DILocation(line: 27, column: 2, scope: !172)
!181 = !DILocation(line: 28, column: 1, scope: !172)
