; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc28.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc28.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.network = type { i32*, i32* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@net = dso_local global %struct.network* null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !20 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !25, metadata !DIExpression()), !dbg !26
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !27, metadata !DIExpression()), !dbg !28
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !29
  ret void, !dbg !30
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !31 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !32, metadata !DIExpression()), !dbg !33
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !34, metadata !DIExpression()), !dbg !35
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !36
  ret void, !dbg !37
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !38 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !39, metadata !DIExpression()), !dbg !40
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !41, metadata !DIExpression()), !dbg !42
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !43
  ret void, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !45 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !46, metadata !DIExpression()), !dbg !47
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !48, metadata !DIExpression()), !dbg !49
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !50
  ret void, !dbg !51
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !52 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !53, metadata !DIExpression()), !dbg !54
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !55, metadata !DIExpression()), !dbg !56
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !57
  ret void, !dbg !58
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !59 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !60, metadata !DIExpression()), !dbg !61
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !62, metadata !DIExpression()), !dbg !63
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !64
  ret void, !dbg !65
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !66 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !69, metadata !DIExpression()), !dbg !70
  %0 = load i32, i32* %n.addr, align 4, !dbg !71
  %conv = sext i32 %0 to i64, !dbg !71
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !72
  ret i8* %call, !dbg !73
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !74 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !75, metadata !DIExpression()), !dbg !76
  %0 = load i32, i32* %n.addr, align 4, !dbg !77
  %conv = sext i32 %0 to i64, !dbg !77
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !78
  ret i8* %call, !dbg !79
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !80 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !81, metadata !DIExpression()), !dbg !82
  %0 = load i32, i32* %n.addr, align 4, !dbg !83
  %conv = sext i32 %0 to i64, !dbg !83
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !84
  ret i8* %call, !dbg !85
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !86 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !87, metadata !DIExpression()), !dbg !88
  %0 = load i32, i32* %n.addr, align 4, !dbg !89
  %conv = sext i32 %0 to i64, !dbg !89
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !90
  ret i8* %call, !dbg !91
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !92 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !93, metadata !DIExpression()), !dbg !94
  %0 = load i32, i32* %n.addr, align 4, !dbg !95
  %conv = sext i32 %0 to i64, !dbg !95
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !96
  ret i8* %call, !dbg !97
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !98 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !99, metadata !DIExpression()), !dbg !100
  %0 = load i32, i32* %n.addr, align 4, !dbg !101
  %conv = sext i32 %0 to i64, !dbg !101
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !102
  ret i8* %call, !dbg !103
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !104 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !105, metadata !DIExpression()), !dbg !106
  %0 = load i32, i32* %n.addr, align 4, !dbg !107
  %conv = sext i32 %0 to i64, !dbg !107
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !108
  ret i8* %call, !dbg !109
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !110 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !113, metadata !DIExpression()), !dbg !114
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !115, metadata !DIExpression()), !dbg !116
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !117
  ret void, !dbg !118
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !119 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !124, metadata !DIExpression()), !dbg !125
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !126, metadata !DIExpression()), !dbg !127
  ret void, !dbg !128
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !129 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !130, metadata !DIExpression()), !dbg !131
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !132, metadata !DIExpression()), !dbg !133
  ret void, !dbg !134
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !135 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !138, metadata !DIExpression()), !dbg !139
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !140, metadata !DIExpression()), !dbg !141
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !142, metadata !DIExpression()), !dbg !143
  ret void, !dbg !144
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !145 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !148, metadata !DIExpression()), !dbg !149
  ret void, !dbg !150
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !151 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !152, metadata !DIExpression()), !dbg !153
  %0 = load i8*, i8** %str.addr, align 8, !dbg !154
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !155
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !156
  %call2 = call i32 @getchar(), !dbg !157
  ret void, !dbg !158
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !159 {
entry:
  ret void, !dbg !162
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func(%struct.network* %net) #0 !dbg !163 {
entry:
  %net.addr = alloca %struct.network*, align 8
  %arc = alloca i32*, align 8
  store %struct.network* %net, %struct.network** %net.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.network** %net.addr, metadata !166, metadata !DIExpression()), !dbg !167
  call void @llvm.dbg.declare(metadata i32** %arc, metadata !168, metadata !DIExpression()), !dbg !169
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !170
  %0 = bitcast i8* %call to i32*, !dbg !170
  store i32* %0, i32** %arc, align 8, !dbg !169
  %1 = load i32*, i32** %arc, align 8, !dbg !171
  %2 = load %struct.network*, %struct.network** %net.addr, align 8, !dbg !172
  %arcs = getelementptr inbounds %struct.network, %struct.network* %2, i32 0, i32 0, !dbg !173
  store i32* %1, i32** %arcs, align 8, !dbg !174
  %call1 = call i8* @NFRMALLOC(i32 10), !dbg !175
  %3 = bitcast i8* %call1 to i32*, !dbg !175
  %4 = load %struct.network*, %struct.network** %net.addr, align 8, !dbg !176
  %stop_arcs = getelementptr inbounds %struct.network, %struct.network* %4, i32 0, i32 1, !dbg !177
  store i32* %3, i32** %stop_arcs, align 8, !dbg !178
  ret void, !dbg !179
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !180 {
entry:
  %net = alloca %struct.network*, align 8
  call void @llvm.dbg.declare(metadata %struct.network** %net, metadata !183, metadata !DIExpression()), !dbg !184
  %call = call i8* @SAFEMALLOC(i32 20), !dbg !185
  %0 = bitcast i8* %call to %struct.network*, !dbg !185
  store %struct.network* %0, %struct.network** %net, align 8, !dbg !186
  %1 = load %struct.network*, %struct.network** %net, align 8, !dbg !187
  call void @func(%struct.network* %1), !dbg !188
  %2 = load %struct.network*, %struct.network** %net, align 8, !dbg !189
  %3 = bitcast %struct.network* %2 to i8*, !dbg !189
  call void @free(i8* %3) #4, !dbg !190
  %4 = load %struct.network*, %struct.network** %net, align 8, !dbg !191
  %arcs = getelementptr inbounds %struct.network, %struct.network* %4, i32 0, i32 0, !dbg !192
  %5 = load i32*, i32** %arcs, align 8, !dbg !192
  %6 = bitcast i32* %5 to i8*, !dbg !191
  call void @free(i8* %6) #4, !dbg !193
  ret i32 0, !dbg !194
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!14, !15, !16, !17, !18}
!llvm.ident = !{!19}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "net", scope: !2, file: !6, line: 17, type: !7, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc28.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!0}
!6 = !DIFile(filename: "src/mem_leak/malloc28.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "network", file: !6, line: 10, size: 128, elements: !9)
!9 = !{!10, !13}
!10 = !DIDerivedType(tag: DW_TAG_member, name: "arcs", scope: !8, file: !6, line: 12, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_member, name: "stop_arcs", scope: !8, file: !6, line: 13, baseType: !11, size: 64, offset: 64)
!14 = !{i32 7, !"Dwarf Version", i32 4}
!15 = !{i32 2, !"Debug Info Version", i32 3}
!16 = !{i32 1, !"wchar_size", i32 4}
!17 = !{i32 7, !"uwtable", i32 1}
!18 = !{i32 7, !"frame-pointer", i32 2}
!19 = !{!"clang version 13.0.0"}
!20 = distinct !DISubprogram(name: "MUSTALIAS", scope: !21, file: !21, line: 4, type: !22, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!21 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!22 = !DISubroutineType(types: !23)
!23 = !{null, !24, !24}
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!25 = !DILocalVariable(name: "p", arg: 1, scope: !20, file: !21, line: 4, type: !24)
!26 = !DILocation(line: 4, column: 22, scope: !20)
!27 = !DILocalVariable(name: "q", arg: 2, scope: !20, file: !21, line: 4, type: !24)
!28 = !DILocation(line: 4, column: 31, scope: !20)
!29 = !DILocation(line: 5, column: 3, scope: !20)
!30 = !DILocation(line: 6, column: 1, scope: !20)
!31 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !21, file: !21, line: 8, type: !22, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!32 = !DILocalVariable(name: "p", arg: 1, scope: !31, file: !21, line: 8, type: !24)
!33 = !DILocation(line: 8, column: 25, scope: !31)
!34 = !DILocalVariable(name: "q", arg: 2, scope: !31, file: !21, line: 8, type: !24)
!35 = !DILocation(line: 8, column: 34, scope: !31)
!36 = !DILocation(line: 9, column: 3, scope: !31)
!37 = !DILocation(line: 10, column: 1, scope: !31)
!38 = distinct !DISubprogram(name: "MAYALIAS", scope: !21, file: !21, line: 12, type: !22, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!39 = !DILocalVariable(name: "p", arg: 1, scope: !38, file: !21, line: 12, type: !24)
!40 = !DILocation(line: 12, column: 21, scope: !38)
!41 = !DILocalVariable(name: "q", arg: 2, scope: !38, file: !21, line: 12, type: !24)
!42 = !DILocation(line: 12, column: 30, scope: !38)
!43 = !DILocation(line: 13, column: 3, scope: !38)
!44 = !DILocation(line: 14, column: 1, scope: !38)
!45 = distinct !DISubprogram(name: "NOALIAS", scope: !21, file: !21, line: 16, type: !22, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!46 = !DILocalVariable(name: "p", arg: 1, scope: !45, file: !21, line: 16, type: !24)
!47 = !DILocation(line: 16, column: 20, scope: !45)
!48 = !DILocalVariable(name: "q", arg: 2, scope: !45, file: !21, line: 16, type: !24)
!49 = !DILocation(line: 16, column: 29, scope: !45)
!50 = !DILocation(line: 17, column: 3, scope: !45)
!51 = !DILocation(line: 18, column: 1, scope: !45)
!52 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !21, file: !21, line: 20, type: !22, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!53 = !DILocalVariable(name: "p", arg: 1, scope: !52, file: !21, line: 20, type: !24)
!54 = !DILocation(line: 20, column: 34, scope: !52)
!55 = !DILocalVariable(name: "q", arg: 2, scope: !52, file: !21, line: 20, type: !24)
!56 = !DILocation(line: 20, column: 43, scope: !52)
!57 = !DILocation(line: 21, column: 3, scope: !52)
!58 = !DILocation(line: 22, column: 1, scope: !52)
!59 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !21, file: !21, line: 24, type: !22, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!60 = !DILocalVariable(name: "p", arg: 1, scope: !59, file: !21, line: 24, type: !24)
!61 = !DILocation(line: 24, column: 33, scope: !59)
!62 = !DILocalVariable(name: "q", arg: 2, scope: !59, file: !21, line: 24, type: !24)
!63 = !DILocation(line: 24, column: 42, scope: !59)
!64 = !DILocation(line: 25, column: 3, scope: !59)
!65 = !DILocation(line: 26, column: 1, scope: !59)
!66 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !21, file: !21, line: 29, type: !67, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!67 = !DISubroutineType(types: !68)
!68 = !{!24, !12}
!69 = !DILocalVariable(name: "n", arg: 1, scope: !66, file: !21, line: 29, type: !12)
!70 = !DILocation(line: 29, column: 22, scope: !66)
!71 = !DILocation(line: 30, column: 17, scope: !66)
!72 = !DILocation(line: 30, column: 10, scope: !66)
!73 = !DILocation(line: 30, column: 3, scope: !66)
!74 = distinct !DISubprogram(name: "PLKMALLOC", scope: !21, file: !21, line: 33, type: !67, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!75 = !DILocalVariable(name: "n", arg: 1, scope: !74, file: !21, line: 33, type: !12)
!76 = !DILocation(line: 33, column: 21, scope: !74)
!77 = !DILocation(line: 34, column: 17, scope: !74)
!78 = !DILocation(line: 34, column: 10, scope: !74)
!79 = !DILocation(line: 34, column: 3, scope: !74)
!80 = distinct !DISubprogram(name: "NFRMALLOC", scope: !21, file: !21, line: 37, type: !67, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!81 = !DILocalVariable(name: "n", arg: 1, scope: !80, file: !21, line: 37, type: !12)
!82 = !DILocation(line: 37, column: 21, scope: !80)
!83 = !DILocation(line: 38, column: 17, scope: !80)
!84 = !DILocation(line: 38, column: 10, scope: !80)
!85 = !DILocation(line: 38, column: 3, scope: !80)
!86 = distinct !DISubprogram(name: "CLKMALLOC", scope: !21, file: !21, line: 41, type: !67, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!87 = !DILocalVariable(name: "n", arg: 1, scope: !86, file: !21, line: 41, type: !12)
!88 = !DILocation(line: 41, column: 21, scope: !86)
!89 = !DILocation(line: 42, column: 17, scope: !86)
!90 = !DILocation(line: 42, column: 10, scope: !86)
!91 = !DILocation(line: 42, column: 3, scope: !86)
!92 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !21, file: !21, line: 45, type: !67, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!93 = !DILocalVariable(name: "n", arg: 1, scope: !92, file: !21, line: 45, type: !12)
!94 = !DILocation(line: 45, column: 21, scope: !92)
!95 = !DILocation(line: 46, column: 17, scope: !92)
!96 = !DILocation(line: 46, column: 10, scope: !92)
!97 = !DILocation(line: 46, column: 3, scope: !92)
!98 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !21, file: !21, line: 49, type: !67, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!99 = !DILocalVariable(name: "n", arg: 1, scope: !98, file: !21, line: 49, type: !12)
!100 = !DILocation(line: 49, column: 21, scope: !98)
!101 = !DILocation(line: 50, column: 17, scope: !98)
!102 = !DILocation(line: 50, column: 10, scope: !98)
!103 = !DILocation(line: 50, column: 3, scope: !98)
!104 = distinct !DISubprogram(name: "LEAKFN", scope: !21, file: !21, line: 53, type: !67, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!105 = !DILocalVariable(name: "n", arg: 1, scope: !104, file: !21, line: 53, type: !12)
!106 = !DILocation(line: 53, column: 18, scope: !104)
!107 = !DILocation(line: 54, column: 17, scope: !104)
!108 = !DILocation(line: 54, column: 10, scope: !104)
!109 = !DILocation(line: 54, column: 3, scope: !104)
!110 = distinct !DISubprogram(name: "RC_ACCESS", scope: !21, file: !21, line: 63, type: !111, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!111 = !DISubroutineType(types: !112)
!112 = !{null, !12, !12}
!113 = !DILocalVariable(name: "id", arg: 1, scope: !110, file: !21, line: 63, type: !12)
!114 = !DILocation(line: 63, column: 20, scope: !110)
!115 = !DILocalVariable(name: "flags", arg: 2, scope: !110, file: !21, line: 63, type: !12)
!116 = !DILocation(line: 63, column: 28, scope: !110)
!117 = !DILocation(line: 64, column: 3, scope: !110)
!118 = !DILocation(line: 65, column: 1, scope: !110)
!119 = distinct !DISubprogram(name: "CXT_THREAD", scope: !21, file: !21, line: 75, type: !120, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!120 = !DISubroutineType(types: !121)
!121 = !{null, !12, !122}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !123, size: 64)
!123 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!124 = !DILocalVariable(name: "thdid", arg: 1, scope: !119, file: !21, line: 75, type: !12)
!125 = !DILocation(line: 75, column: 21, scope: !119)
!126 = !DILocalVariable(name: "cxt", arg: 2, scope: !119, file: !21, line: 75, type: !122)
!127 = !DILocation(line: 75, column: 34, scope: !119)
!128 = !DILocation(line: 77, column: 1, scope: !119)
!129 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !21, file: !21, line: 78, type: !120, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!130 = !DILocalVariable(name: "thdid", arg: 1, scope: !129, file: !21, line: 78, type: !12)
!131 = !DILocation(line: 78, column: 21, scope: !129)
!132 = !DILocalVariable(name: "cxt", arg: 2, scope: !129, file: !21, line: 78, type: !122)
!133 = !DILocation(line: 78, column: 33, scope: !129)
!134 = !DILocation(line: 80, column: 1, scope: !129)
!135 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !21, file: !21, line: 81, type: !136, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!136 = !DISubroutineType(types: !137)
!137 = !{null, !12, !122, !122}
!138 = !DILocalVariable(name: "thdid", arg: 1, scope: !135, file: !21, line: 81, type: !12)
!139 = !DILocation(line: 81, column: 26, scope: !135)
!140 = !DILocalVariable(name: "cxt", arg: 2, scope: !135, file: !21, line: 81, type: !122)
!141 = !DILocation(line: 81, column: 38, scope: !135)
!142 = !DILocalVariable(name: "lev", arg: 3, scope: !135, file: !21, line: 81, type: !122)
!143 = !DILocation(line: 81, column: 49, scope: !135)
!144 = !DILocation(line: 83, column: 1, scope: !135)
!145 = distinct !DISubprogram(name: "LOCK", scope: !21, file: !21, line: 85, type: !146, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !122}
!148 = !DILocalVariable(name: "lockname", arg: 1, scope: !145, file: !21, line: 85, type: !122)
!149 = !DILocation(line: 85, column: 17, scope: !145)
!150 = !DILocation(line: 87, column: 1, scope: !145)
!151 = distinct !DISubprogram(name: "PAUSE", scope: !21, file: !21, line: 89, type: !146, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!152 = !DILocalVariable(name: "str", arg: 1, scope: !151, file: !21, line: 89, type: !122)
!153 = !DILocation(line: 89, column: 18, scope: !151)
!154 = !DILocation(line: 90, column: 18, scope: !151)
!155 = !DILocation(line: 90, column: 3, scope: !151)
!156 = !DILocation(line: 91, column: 3, scope: !151)
!157 = !DILocation(line: 92, column: 3, scope: !151)
!158 = !DILocation(line: 93, column: 1, scope: !151)
!159 = distinct !DISubprogram(name: "deref", scope: !21, file: !21, line: 111, type: !160, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!160 = !DISubroutineType(types: !161)
!161 = !{null}
!162 = !DILocation(line: 111, column: 20, scope: !159)
!163 = distinct !DISubprogram(name: "func", scope: !6, file: !6, line: 19, type: !164, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!164 = !DISubroutineType(types: !165)
!165 = !{null, !7}
!166 = !DILocalVariable(name: "net", arg: 1, scope: !163, file: !6, line: 19, type: !7)
!167 = !DILocation(line: 19, column: 27, scope: !163)
!168 = !DILocalVariable(name: "arc", scope: !163, file: !6, line: 21, type: !11)
!169 = !DILocation(line: 21, column: 7, scope: !163)
!170 = !DILocation(line: 21, column: 13, scope: !163)
!171 = !DILocation(line: 23, column: 14, scope: !163)
!172 = !DILocation(line: 23, column: 2, scope: !163)
!173 = !DILocation(line: 23, column: 7, scope: !163)
!174 = !DILocation(line: 23, column: 12, scope: !163)
!175 = !DILocation(line: 24, column: 19, scope: !163)
!176 = !DILocation(line: 24, column: 2, scope: !163)
!177 = !DILocation(line: 24, column: 7, scope: !163)
!178 = !DILocation(line: 24, column: 17, scope: !163)
!179 = !DILocation(line: 26, column: 1, scope: !163)
!180 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 28, type: !181, scopeLine: 28, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!181 = !DISubroutineType(types: !182)
!182 = !{!12}
!183 = !DILocalVariable(name: "net", scope: !180, file: !6, line: 30, type: !7)
!184 = !DILocation(line: 30, column: 18, scope: !180)
!185 = !DILocation(line: 31, column: 8, scope: !180)
!186 = !DILocation(line: 31, column: 6, scope: !180)
!187 = !DILocation(line: 32, column: 7, scope: !180)
!188 = !DILocation(line: 32, column: 2, scope: !180)
!189 = !DILocation(line: 34, column: 7, scope: !180)
!190 = !DILocation(line: 34, column: 2, scope: !180)
!191 = !DILocation(line: 35, column: 7, scope: !180)
!192 = !DILocation(line: 35, column: 12, scope: !180)
!193 = !DILocation(line: 35, column: 2, scope: !180)
!194 = !DILocation(line: 37, column: 1, scope: !180)
