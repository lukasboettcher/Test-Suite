; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/malloc26.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc26.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !15 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !19, metadata !DIExpression()), !dbg !20
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !21, metadata !DIExpression()), !dbg !22
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !23
  ret void, !dbg !24
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !25 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !26, metadata !DIExpression()), !dbg !27
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !30
  ret void, !dbg !31
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !32 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !33, metadata !DIExpression()), !dbg !34
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !35, metadata !DIExpression()), !dbg !36
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !37
  ret void, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !39 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !40, metadata !DIExpression()), !dbg !41
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !44
  ret void, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !46 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !47, metadata !DIExpression()), !dbg !48
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !51
  ret void, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !53 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !54, metadata !DIExpression()), !dbg !55
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !58
  ret void, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !60 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !64, metadata !DIExpression()), !dbg !65
  %0 = load i32, i32* %n.addr, align 4, !dbg !66
  %conv = sext i32 %0 to i64, !dbg !66
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !67
  ret i8* %call, !dbg !68
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !69 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !70, metadata !DIExpression()), !dbg !71
  %0 = load i32, i32* %n.addr, align 4, !dbg !72
  %conv = sext i32 %0 to i64, !dbg !72
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !73
  ret i8* %call, !dbg !74
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !75 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %0 = load i32, i32* %n.addr, align 4, !dbg !78
  %conv = sext i32 %0 to i64, !dbg !78
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !79
  ret i8* %call, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !81 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %0 = load i32, i32* %n.addr, align 4, !dbg !84
  %conv = sext i32 %0 to i64, !dbg !84
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !85
  ret i8* %call, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !87 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, i32* %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !91
  ret i8* %call, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, i32* %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !97
  ret i8* %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, i32* %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !103
  ret i8* %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !105 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !108, metadata !DIExpression()), !dbg !109
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !110, metadata !DIExpression()), !dbg !111
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !112
  ret void, !dbg !113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !114 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !117, metadata !DIExpression()), !dbg !118
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !119, metadata !DIExpression()), !dbg !120
  ret void, !dbg !121
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !122 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !123, metadata !DIExpression()), !dbg !124
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !125, metadata !DIExpression()), !dbg !126
  ret void, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !128 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !131, metadata !DIExpression()), !dbg !132
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !133, metadata !DIExpression()), !dbg !134
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !135, metadata !DIExpression()), !dbg !136
  ret void, !dbg !137
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !138 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !141, metadata !DIExpression()), !dbg !142
  ret void, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !144 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !145, metadata !DIExpression()), !dbg !146
  %0 = load i8*, i8** %str.addr, align 8, !dbg !147
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !148
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !149
  %call2 = call i32 @getchar(), !dbg !150
  ret void, !dbg !151
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !152 {
entry:
  ret void, !dbg !155
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8** @alloc_matrix() #0 !dbg !156 {
entry:
  %i = alloca i32, align 4
  %cptr = alloca i8**, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !160, metadata !DIExpression()), !dbg !161
  call void @llvm.dbg.declare(metadata i8*** %cptr, metadata !162, metadata !DIExpression()), !dbg !163
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !164
  %0 = bitcast i8* %call to i8**, !dbg !165
  store i8** %0, i8*** %cptr, align 8, !dbg !166
  store i32 0, i32* %i, align 4, !dbg !167
  br label %for.cond, !dbg !169

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !170
  %cmp = icmp slt i32 %1, 10, !dbg !172
  br i1 %cmp, label %for.body, label %for.end, !dbg !173

for.body:                                         ; preds = %for.cond
  %call1 = call i8* @PLKLEAKFP(i32 1), !dbg !174
  %2 = load i8**, i8*** %cptr, align 8, !dbg !176
  %3 = load i32, i32* %i, align 4, !dbg !177
  %idxprom = sext i32 %3 to i64, !dbg !176
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %idxprom, !dbg !176
  store i8* %call1, i8** %arrayidx, align 8, !dbg !178
  br label %for.inc, !dbg !179

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !180
  %inc = add nsw i32 %4, 1, !dbg !180
  store i32 %inc, i32* %i, align 4, !dbg !180
  br label %for.cond, !dbg !181, !llvm.loop !182

for.end:                                          ; preds = %for.cond
  %5 = load i8**, i8*** %cptr, align 8, !dbg !185
  ret i8** %5, !dbg !186
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @free_matrix(i8** %matrix) #0 !dbg !187 {
entry:
  %matrix.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store i8** %matrix, i8*** %matrix.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %matrix.addr, metadata !190, metadata !DIExpression()), !dbg !191
  call void @llvm.dbg.declare(metadata i32* %i, metadata !192, metadata !DIExpression()), !dbg !193
  store i32 0, i32* %i, align 4, !dbg !194
  br label %for.cond, !dbg !196

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !197
  %cmp = icmp slt i32 %0, 10, !dbg !199
  br i1 %cmp, label %for.body, label %for.end, !dbg !200

for.body:                                         ; preds = %for.cond
  %1 = load i8**, i8*** %matrix.addr, align 8, !dbg !201
  %2 = load i32, i32* %i, align 4, !dbg !203
  %idxprom = sext i32 %2 to i64, !dbg !201
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %idxprom, !dbg !201
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !201
  call void @free(i8* %3) #4, !dbg !204
  br label %for.inc, !dbg !205

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !206
  %inc = add nsw i32 %4, 1, !dbg !206
  store i32 %inc, i32* %i, align 4, !dbg !206
  br label %for.cond, !dbg !207, !llvm.loop !208

for.end:                                          ; preds = %for.cond
  %5 = load i8**, i8*** %matrix.addr, align 8, !dbg !210
  %6 = bitcast i8** %5 to i8*, !dbg !210
  call void @free(i8* %6) #4, !dbg !211
  ret void, !dbg !212
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !213 {
entry:
  %dir_list = alloca i8**, align 8
  call void @llvm.dbg.declare(metadata i8*** %dir_list, metadata !216, metadata !DIExpression()), !dbg !217
  %call = call i8** @alloc_matrix(), !dbg !218
  store i8** %call, i8*** %dir_list, align 8, !dbg !219
  %0 = load i8**, i8*** %dir_list, align 8, !dbg !220
  call void @free_matrix(i8** %0), !dbg !221
  ret i32 0, !dbg !222
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!9, !10, !11, !12, !13}
!llvm.ident = !{!14}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/malloc26.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4, !5, !7}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!6 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!9 = !{i32 7, !"Dwarf Version", i32 4}
!10 = !{i32 2, !"Debug Info Version", i32 3}
!11 = !{i32 1, !"wchar_size", i32 4}
!12 = !{i32 7, !"uwtable", i32 1}
!13 = !{i32 7, !"frame-pointer", i32 2}
!14 = !{!"clang version 13.0.0"}
!15 = distinct !DISubprogram(name: "MUSTALIAS", scope: !16, file: !16, line: 4, type: !17, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!16 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!17 = !DISubroutineType(types: !18)
!18 = !{null, !8, !8}
!19 = !DILocalVariable(name: "p", arg: 1, scope: !15, file: !16, line: 4, type: !8)
!20 = !DILocation(line: 4, column: 22, scope: !15)
!21 = !DILocalVariable(name: "q", arg: 2, scope: !15, file: !16, line: 4, type: !8)
!22 = !DILocation(line: 4, column: 31, scope: !15)
!23 = !DILocation(line: 5, column: 3, scope: !15)
!24 = !DILocation(line: 6, column: 1, scope: !15)
!25 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !16, file: !16, line: 8, type: !17, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!26 = !DILocalVariable(name: "p", arg: 1, scope: !25, file: !16, line: 8, type: !8)
!27 = !DILocation(line: 8, column: 25, scope: !25)
!28 = !DILocalVariable(name: "q", arg: 2, scope: !25, file: !16, line: 8, type: !8)
!29 = !DILocation(line: 8, column: 34, scope: !25)
!30 = !DILocation(line: 9, column: 3, scope: !25)
!31 = !DILocation(line: 10, column: 1, scope: !25)
!32 = distinct !DISubprogram(name: "MAYALIAS", scope: !16, file: !16, line: 12, type: !17, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!33 = !DILocalVariable(name: "p", arg: 1, scope: !32, file: !16, line: 12, type: !8)
!34 = !DILocation(line: 12, column: 21, scope: !32)
!35 = !DILocalVariable(name: "q", arg: 2, scope: !32, file: !16, line: 12, type: !8)
!36 = !DILocation(line: 12, column: 30, scope: !32)
!37 = !DILocation(line: 13, column: 3, scope: !32)
!38 = !DILocation(line: 14, column: 1, scope: !32)
!39 = distinct !DISubprogram(name: "NOALIAS", scope: !16, file: !16, line: 16, type: !17, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!40 = !DILocalVariable(name: "p", arg: 1, scope: !39, file: !16, line: 16, type: !8)
!41 = !DILocation(line: 16, column: 20, scope: !39)
!42 = !DILocalVariable(name: "q", arg: 2, scope: !39, file: !16, line: 16, type: !8)
!43 = !DILocation(line: 16, column: 29, scope: !39)
!44 = !DILocation(line: 17, column: 3, scope: !39)
!45 = !DILocation(line: 18, column: 1, scope: !39)
!46 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !16, file: !16, line: 20, type: !17, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!47 = !DILocalVariable(name: "p", arg: 1, scope: !46, file: !16, line: 20, type: !8)
!48 = !DILocation(line: 20, column: 34, scope: !46)
!49 = !DILocalVariable(name: "q", arg: 2, scope: !46, file: !16, line: 20, type: !8)
!50 = !DILocation(line: 20, column: 43, scope: !46)
!51 = !DILocation(line: 21, column: 3, scope: !46)
!52 = !DILocation(line: 22, column: 1, scope: !46)
!53 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !16, file: !16, line: 24, type: !17, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!54 = !DILocalVariable(name: "p", arg: 1, scope: !53, file: !16, line: 24, type: !8)
!55 = !DILocation(line: 24, column: 33, scope: !53)
!56 = !DILocalVariable(name: "q", arg: 2, scope: !53, file: !16, line: 24, type: !8)
!57 = !DILocation(line: 24, column: 42, scope: !53)
!58 = !DILocation(line: 25, column: 3, scope: !53)
!59 = !DILocation(line: 26, column: 1, scope: !53)
!60 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !16, file: !16, line: 29, type: !61, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!61 = !DISubroutineType(types: !62)
!62 = !{!8, !63}
!63 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!64 = !DILocalVariable(name: "n", arg: 1, scope: !60, file: !16, line: 29, type: !63)
!65 = !DILocation(line: 29, column: 22, scope: !60)
!66 = !DILocation(line: 30, column: 17, scope: !60)
!67 = !DILocation(line: 30, column: 10, scope: !60)
!68 = !DILocation(line: 30, column: 3, scope: !60)
!69 = distinct !DISubprogram(name: "PLKMALLOC", scope: !16, file: !16, line: 33, type: !61, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!70 = !DILocalVariable(name: "n", arg: 1, scope: !69, file: !16, line: 33, type: !63)
!71 = !DILocation(line: 33, column: 21, scope: !69)
!72 = !DILocation(line: 34, column: 17, scope: !69)
!73 = !DILocation(line: 34, column: 10, scope: !69)
!74 = !DILocation(line: 34, column: 3, scope: !69)
!75 = distinct !DISubprogram(name: "NFRMALLOC", scope: !16, file: !16, line: 37, type: !61, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!76 = !DILocalVariable(name: "n", arg: 1, scope: !75, file: !16, line: 37, type: !63)
!77 = !DILocation(line: 37, column: 21, scope: !75)
!78 = !DILocation(line: 38, column: 17, scope: !75)
!79 = !DILocation(line: 38, column: 10, scope: !75)
!80 = !DILocation(line: 38, column: 3, scope: !75)
!81 = distinct !DISubprogram(name: "CLKMALLOC", scope: !16, file: !16, line: 41, type: !61, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!82 = !DILocalVariable(name: "n", arg: 1, scope: !81, file: !16, line: 41, type: !63)
!83 = !DILocation(line: 41, column: 21, scope: !81)
!84 = !DILocation(line: 42, column: 17, scope: !81)
!85 = !DILocation(line: 42, column: 10, scope: !81)
!86 = !DILocation(line: 42, column: 3, scope: !81)
!87 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !16, file: !16, line: 45, type: !61, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!88 = !DILocalVariable(name: "n", arg: 1, scope: !87, file: !16, line: 45, type: !63)
!89 = !DILocation(line: 45, column: 21, scope: !87)
!90 = !DILocation(line: 46, column: 17, scope: !87)
!91 = !DILocation(line: 46, column: 10, scope: !87)
!92 = !DILocation(line: 46, column: 3, scope: !87)
!93 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !16, file: !16, line: 49, type: !61, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !16, line: 49, type: !63)
!95 = !DILocation(line: 49, column: 21, scope: !93)
!96 = !DILocation(line: 50, column: 17, scope: !93)
!97 = !DILocation(line: 50, column: 10, scope: !93)
!98 = !DILocation(line: 50, column: 3, scope: !93)
!99 = distinct !DISubprogram(name: "LEAKFN", scope: !16, file: !16, line: 53, type: !61, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !16, line: 53, type: !63)
!101 = !DILocation(line: 53, column: 18, scope: !99)
!102 = !DILocation(line: 54, column: 17, scope: !99)
!103 = !DILocation(line: 54, column: 10, scope: !99)
!104 = !DILocation(line: 54, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "RC_ACCESS", scope: !16, file: !16, line: 63, type: !106, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!106 = !DISubroutineType(types: !107)
!107 = !{null, !63, !63}
!108 = !DILocalVariable(name: "id", arg: 1, scope: !105, file: !16, line: 63, type: !63)
!109 = !DILocation(line: 63, column: 20, scope: !105)
!110 = !DILocalVariable(name: "flags", arg: 2, scope: !105, file: !16, line: 63, type: !63)
!111 = !DILocation(line: 63, column: 28, scope: !105)
!112 = !DILocation(line: 64, column: 3, scope: !105)
!113 = !DILocation(line: 65, column: 1, scope: !105)
!114 = distinct !DISubprogram(name: "CXT_THREAD", scope: !16, file: !16, line: 75, type: !115, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!115 = !DISubroutineType(types: !116)
!116 = !{null, !63, !5}
!117 = !DILocalVariable(name: "thdid", arg: 1, scope: !114, file: !16, line: 75, type: !63)
!118 = !DILocation(line: 75, column: 21, scope: !114)
!119 = !DILocalVariable(name: "cxt", arg: 2, scope: !114, file: !16, line: 75, type: !5)
!120 = !DILocation(line: 75, column: 34, scope: !114)
!121 = !DILocation(line: 77, column: 1, scope: !114)
!122 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !16, file: !16, line: 78, type: !115, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!123 = !DILocalVariable(name: "thdid", arg: 1, scope: !122, file: !16, line: 78, type: !63)
!124 = !DILocation(line: 78, column: 21, scope: !122)
!125 = !DILocalVariable(name: "cxt", arg: 2, scope: !122, file: !16, line: 78, type: !5)
!126 = !DILocation(line: 78, column: 33, scope: !122)
!127 = !DILocation(line: 80, column: 1, scope: !122)
!128 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !16, file: !16, line: 81, type: !129, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!129 = !DISubroutineType(types: !130)
!130 = !{null, !63, !5, !5}
!131 = !DILocalVariable(name: "thdid", arg: 1, scope: !128, file: !16, line: 81, type: !63)
!132 = !DILocation(line: 81, column: 26, scope: !128)
!133 = !DILocalVariable(name: "cxt", arg: 2, scope: !128, file: !16, line: 81, type: !5)
!134 = !DILocation(line: 81, column: 38, scope: !128)
!135 = !DILocalVariable(name: "lev", arg: 3, scope: !128, file: !16, line: 81, type: !5)
!136 = !DILocation(line: 81, column: 49, scope: !128)
!137 = !DILocation(line: 83, column: 1, scope: !128)
!138 = distinct !DISubprogram(name: "LOCK", scope: !16, file: !16, line: 85, type: !139, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!139 = !DISubroutineType(types: !140)
!140 = !{null, !5}
!141 = !DILocalVariable(name: "lockname", arg: 1, scope: !138, file: !16, line: 85, type: !5)
!142 = !DILocation(line: 85, column: 17, scope: !138)
!143 = !DILocation(line: 87, column: 1, scope: !138)
!144 = distinct !DISubprogram(name: "PAUSE", scope: !16, file: !16, line: 89, type: !139, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!145 = !DILocalVariable(name: "str", arg: 1, scope: !144, file: !16, line: 89, type: !5)
!146 = !DILocation(line: 89, column: 18, scope: !144)
!147 = !DILocation(line: 90, column: 18, scope: !144)
!148 = !DILocation(line: 90, column: 3, scope: !144)
!149 = !DILocation(line: 91, column: 3, scope: !144)
!150 = !DILocation(line: 92, column: 3, scope: !144)
!151 = !DILocation(line: 93, column: 1, scope: !144)
!152 = distinct !DISubprogram(name: "deref", scope: !16, file: !16, line: 111, type: !153, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!153 = !DISubroutineType(types: !154)
!154 = !{null}
!155 = !DILocation(line: 111, column: 20, scope: !152)
!156 = distinct !DISubprogram(name: "alloc_matrix", scope: !157, file: !157, line: 11, type: !158, scopeLine: 11, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!157 = !DIFile(filename: "src/mem_leak/malloc26.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!158 = !DISubroutineType(types: !159)
!159 = !{!7}
!160 = !DILocalVariable(name: "i", scope: !156, file: !157, line: 13, type: !63)
!161 = !DILocation(line: 13, column: 6, scope: !156)
!162 = !DILocalVariable(name: "cptr", scope: !156, file: !157, line: 13, type: !4)
!163 = !DILocation(line: 13, column: 16, scope: !156)
!164 = !DILocation(line: 14, column: 18, scope: !156)
!165 = !DILocation(line: 14, column: 9, scope: !156)
!166 = !DILocation(line: 14, column: 7, scope: !156)
!167 = !DILocation(line: 15, column: 8, scope: !168)
!168 = distinct !DILexicalBlock(scope: !156, file: !157, line: 15, column: 2)
!169 = !DILocation(line: 15, column: 6, scope: !168)
!170 = !DILocation(line: 15, column: 13, scope: !171)
!171 = distinct !DILexicalBlock(scope: !168, file: !157, line: 15, column: 2)
!172 = !DILocation(line: 15, column: 15, scope: !171)
!173 = !DILocation(line: 15, column: 2, scope: !168)
!174 = !DILocation(line: 16, column: 21, scope: !175)
!175 = distinct !DILexicalBlock(scope: !171, file: !157, line: 15, column: 25)
!176 = !DILocation(line: 16, column: 3, scope: !175)
!177 = !DILocation(line: 16, column: 8, scope: !175)
!178 = !DILocation(line: 16, column: 11, scope: !175)
!179 = !DILocation(line: 17, column: 2, scope: !175)
!180 = !DILocation(line: 15, column: 22, scope: !171)
!181 = !DILocation(line: 15, column: 2, scope: !171)
!182 = distinct !{!182, !173, !183, !184}
!183 = !DILocation(line: 17, column: 2, scope: !168)
!184 = !{!"llvm.loop.mustprogress"}
!185 = !DILocation(line: 19, column: 18, scope: !156)
!186 = !DILocation(line: 19, column: 2, scope: !156)
!187 = distinct !DISubprogram(name: "free_matrix", scope: !157, file: !157, line: 22, type: !188, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!188 = !DISubroutineType(types: !189)
!189 = !{null, !7}
!190 = !DILocalVariable(name: "matrix", arg: 1, scope: !187, file: !157, line: 22, type: !7)
!191 = !DILocation(line: 22, column: 26, scope: !187)
!192 = !DILocalVariable(name: "i", scope: !187, file: !157, line: 23, type: !63)
!193 = !DILocation(line: 23, column: 6, scope: !187)
!194 = !DILocation(line: 24, column: 8, scope: !195)
!195 = distinct !DILexicalBlock(scope: !187, file: !157, line: 24, column: 2)
!196 = !DILocation(line: 24, column: 6, scope: !195)
!197 = !DILocation(line: 24, column: 13, scope: !198)
!198 = distinct !DILexicalBlock(scope: !195, file: !157, line: 24, column: 2)
!199 = !DILocation(line: 24, column: 15, scope: !198)
!200 = !DILocation(line: 24, column: 2, scope: !195)
!201 = !DILocation(line: 25, column: 8, scope: !202)
!202 = distinct !DILexicalBlock(scope: !198, file: !157, line: 24, column: 25)
!203 = !DILocation(line: 25, column: 15, scope: !202)
!204 = !DILocation(line: 25, column: 3, scope: !202)
!205 = !DILocation(line: 26, column: 2, scope: !202)
!206 = !DILocation(line: 24, column: 22, scope: !198)
!207 = !DILocation(line: 24, column: 2, scope: !198)
!208 = distinct !{!208, !200, !209, !184}
!209 = !DILocation(line: 26, column: 2, scope: !195)
!210 = !DILocation(line: 27, column: 7, scope: !187)
!211 = !DILocation(line: 27, column: 2, scope: !187)
!212 = !DILocation(line: 29, column: 1, scope: !187)
!213 = distinct !DISubprogram(name: "main", scope: !157, file: !157, line: 31, type: !214, scopeLine: 31, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!214 = !DISubroutineType(types: !215)
!215 = !{!63}
!216 = !DILocalVariable(name: "dir_list", scope: !213, file: !157, line: 34, type: !4)
!217 = !DILocation(line: 34, column: 11, scope: !213)
!218 = !DILocation(line: 35, column: 23, scope: !213)
!219 = !DILocation(line: 35, column: 13, scope: !213)
!220 = !DILocation(line: 36, column: 16, scope: !213)
!221 = !DILocation(line: 36, column: 4, scope: !213)
!222 = !DILocation(line: 38, column: 1, scope: !213)
