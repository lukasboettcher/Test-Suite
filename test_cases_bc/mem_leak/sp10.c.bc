; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp10.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.List = type { %struct.List*, i8*, i32* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !21 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !26, metadata !DIExpression()), !dbg !27
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !28, metadata !DIExpression()), !dbg !29
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !30
  ret void, !dbg !31
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !32 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !33, metadata !DIExpression()), !dbg !34
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !35, metadata !DIExpression()), !dbg !36
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !37
  ret void, !dbg !38
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !39 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !40, metadata !DIExpression()), !dbg !41
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !42, metadata !DIExpression()), !dbg !43
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !44
  ret void, !dbg !45
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !46 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !47, metadata !DIExpression()), !dbg !48
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !49, metadata !DIExpression()), !dbg !50
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !51
  ret void, !dbg !52
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !53 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !54, metadata !DIExpression()), !dbg !55
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !56, metadata !DIExpression()), !dbg !57
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !58
  ret void, !dbg !59
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !60 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !61, metadata !DIExpression()), !dbg !62
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !63, metadata !DIExpression()), !dbg !64
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !65
  ret void, !dbg !66
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !67 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !70, metadata !DIExpression()), !dbg !71
  %0 = load i32, i32* %n.addr, align 4, !dbg !72
  %conv = sext i32 %0 to i64, !dbg !72
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !73
  ret i8* %call, !dbg !74
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !75 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !76, metadata !DIExpression()), !dbg !77
  %0 = load i32, i32* %n.addr, align 4, !dbg !78
  %conv = sext i32 %0 to i64, !dbg !78
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !79
  ret i8* %call, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !81 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !82, metadata !DIExpression()), !dbg !83
  %0 = load i32, i32* %n.addr, align 4, !dbg !84
  %conv = sext i32 %0 to i64, !dbg !84
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !85
  ret i8* %call, !dbg !86
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !87 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !88, metadata !DIExpression()), !dbg !89
  %0 = load i32, i32* %n.addr, align 4, !dbg !90
  %conv = sext i32 %0 to i64, !dbg !90
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !91
  ret i8* %call, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !93 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !94, metadata !DIExpression()), !dbg !95
  %0 = load i32, i32* %n.addr, align 4, !dbg !96
  %conv = sext i32 %0 to i64, !dbg !96
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !97
  ret i8* %call, !dbg !98
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !99 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !100, metadata !DIExpression()), !dbg !101
  %0 = load i32, i32* %n.addr, align 4, !dbg !102
  %conv = sext i32 %0 to i64, !dbg !102
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !103
  ret i8* %call, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !105 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !106, metadata !DIExpression()), !dbg !107
  %0 = load i32, i32* %n.addr, align 4, !dbg !108
  %conv = sext i32 %0 to i64, !dbg !108
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !109
  ret i8* %call, !dbg !110
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !111 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !114, metadata !DIExpression()), !dbg !115
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !116, metadata !DIExpression()), !dbg !117
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !118
  ret void, !dbg !119
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !120 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !123, metadata !DIExpression()), !dbg !124
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !125, metadata !DIExpression()), !dbg !126
  ret void, !dbg !127
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !128 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !129, metadata !DIExpression()), !dbg !130
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !131, metadata !DIExpression()), !dbg !132
  ret void, !dbg !133
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !134 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !137, metadata !DIExpression()), !dbg !138
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !139, metadata !DIExpression()), !dbg !140
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !141, metadata !DIExpression()), !dbg !142
  ret void, !dbg !143
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !144 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !147, metadata !DIExpression()), !dbg !148
  ret void, !dbg !149
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !150 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !151, metadata !DIExpression()), !dbg !152
  %0 = load i8*, i8** %str.addr, align 8, !dbg !153
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !154
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !155
  %call2 = call i32 @getchar(), !dbg !156
  ret void, !dbg !157
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !158 {
entry:
  ret void, !dbg !161
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.List* @newNode() #0 !dbg !162 {
entry:
  %node = alloca %struct.List*, align 8
  call void @llvm.dbg.declare(metadata %struct.List** %node, metadata !165, metadata !DIExpression()), !dbg !166
  %call = call i8* @SAFEMALLOC(i32 24), !dbg !167
  %0 = bitcast i8* %call to %struct.List*, !dbg !168
  store %struct.List* %0, %struct.List** %node, align 8, !dbg !169
  %call1 = call i8* @SAFEMALLOC(i32 4), !dbg !170
  %1 = bitcast i8* %call1 to i32*, !dbg !171
  %2 = load %struct.List*, %struct.List** %node, align 8, !dbg !172
  %a = getelementptr inbounds %struct.List, %struct.List* %2, i32 0, i32 2, !dbg !173
  store i32* %1, i32** %a, align 8, !dbg !174
  %3 = load %struct.List*, %struct.List** %node, align 8, !dbg !175
  ret %struct.List* %3, !dbg !176
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @freeNode(%struct.List* %node) #0 !dbg !177 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %struct.List*, align 8
  store %struct.List* %node, %struct.List** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.List** %node.addr, metadata !180, metadata !DIExpression()), !dbg !181
  %0 = load %struct.List*, %struct.List** %node.addr, align 8, !dbg !182
  %1 = bitcast %struct.List* %0 to i8*, !dbg !182
  call void @free(i8* %1) #4, !dbg !183
  %2 = load %struct.List*, %struct.List** %node.addr, align 8, !dbg !184
  %a = getelementptr inbounds %struct.List, %struct.List* %2, i32 0, i32 2, !dbg !185
  %3 = load i32*, i32** %a, align 8, !dbg !185
  %4 = bitcast i32* %3 to i8*, !dbg !184
  call void @free(i8* %4) #4, !dbg !186
  %5 = load i32, i32* %retval, align 4, !dbg !187
  ret i32 %5, !dbg !187
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo() #0 !dbg !188 {
entry:
  %root = alloca %struct.List*, align 8
  %a = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.List** %root, metadata !189, metadata !DIExpression()), !dbg !190
  call void @llvm.dbg.declare(metadata i32* %a, metadata !191, metadata !DIExpression()), !dbg !192
  store i32 10, i32* %a, align 4, !dbg !192
  %call = call %struct.List* @newNode(), !dbg !193
  store %struct.List* %call, %struct.List** %root, align 8, !dbg !194
  %call1 = call %struct.List* @newNode(), !dbg !195
  %0 = load %struct.List*, %struct.List** %root, align 8, !dbg !196
  %next = getelementptr inbounds %struct.List, %struct.List* %0, i32 0, i32 0, !dbg !197
  store %struct.List* %call1, %struct.List** %next, align 8, !dbg !198
  %1 = load %struct.List*, %struct.List** %root, align 8, !dbg !199
  %next2 = getelementptr inbounds %struct.List, %struct.List* %1, i32 0, i32 0, !dbg !200
  %2 = load %struct.List*, %struct.List** %next2, align 8, !dbg !200
  %call3 = call i32 @freeNode(%struct.List* %2), !dbg !201
  %3 = load %struct.List*, %struct.List** %root, align 8, !dbg !202
  %call4 = call i32 @freeNode(%struct.List* %3), !dbg !203
  ret void, !dbg !204
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_free(%struct.List** %m) #0 !dbg !205 {
entry:
  %m.addr = alloca %struct.List**, align 8
  store %struct.List** %m, %struct.List*** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.List*** %m.addr, metadata !209, metadata !DIExpression()), !dbg !210
  %0 = load %struct.List**, %struct.List*** %m.addr, align 8, !dbg !211
  %1 = load %struct.List*, %struct.List** %0, align 8, !dbg !212
  %buf = getelementptr inbounds %struct.List, %struct.List* %1, i32 0, i32 1, !dbg !213
  %2 = load i8*, i8** %buf, align 8, !dbg !213
  call void @free(i8* %2) #4, !dbg !214
  %3 = load %struct.List**, %struct.List*** %m.addr, align 8, !dbg !215
  %4 = load %struct.List*, %struct.List** %3, align 8, !dbg !216
  %5 = bitcast %struct.List* %4 to i8*, !dbg !216
  call void @free(i8* %5) #4, !dbg !217
  ret void, !dbg !218
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_init(%struct.List** %x) #0 !dbg !219 {
entry:
  %x.addr = alloca %struct.List**, align 8
  store %struct.List** %x, %struct.List*** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.List*** %x.addr, metadata !220, metadata !DIExpression()), !dbg !221
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !222
  %0 = load %struct.List**, %struct.List*** %x.addr, align 8, !dbg !223
  %1 = load %struct.List*, %struct.List** %0, align 8, !dbg !224
  %buf = getelementptr inbounds %struct.List, %struct.List* %1, i32 0, i32 1, !dbg !225
  store i8* %call, i8** %buf, align 8, !dbg !226
  ret void, !dbg !227
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !228 {
entry:
  %m = alloca %struct.List*, align 8
  call void @llvm.dbg.declare(metadata %struct.List** %m, metadata !229, metadata !DIExpression()), !dbg !230
  %call = call i8* @SAFEMALLOC(i32 24), !dbg !231
  %0 = bitcast i8* %call to %struct.List*, !dbg !232
  store %struct.List* %0, %struct.List** %m, align 8, !dbg !233
  call void @buffer_init(%struct.List** %m), !dbg !234
  call void @buffer_free(%struct.List** %m), !dbg !235
  ret void, !dbg !236
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!15, !16, !17, !18, !19}
!llvm.ident = !{!20}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp10.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4, !13, !10}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "List", file: !6, line: 11, size: 192, elements: !7)
!6 = !DIFile(filename: "src/mem_leak/sp10.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !{!8, !9, !12}
!8 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !5, file: !6, line: 12, baseType: !4, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !5, file: !6, line: 13, baseType: !10, size: 64, offset: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !5, file: !6, line: 14, baseType: !13, size: 64, offset: 128)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{i32 7, !"Dwarf Version", i32 4}
!16 = !{i32 2, !"Debug Info Version", i32 3}
!17 = !{i32 1, !"wchar_size", i32 4}
!18 = !{i32 7, !"uwtable", i32 1}
!19 = !{i32 7, !"frame-pointer", i32 2}
!20 = !{!"clang version 13.0.0"}
!21 = distinct !DISubprogram(name: "MUSTALIAS", scope: !22, file: !22, line: 4, type: !23, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!22 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!23 = !DISubroutineType(types: !24)
!24 = !{null, !25, !25}
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!26 = !DILocalVariable(name: "p", arg: 1, scope: !21, file: !22, line: 4, type: !25)
!27 = !DILocation(line: 4, column: 22, scope: !21)
!28 = !DILocalVariable(name: "q", arg: 2, scope: !21, file: !22, line: 4, type: !25)
!29 = !DILocation(line: 4, column: 31, scope: !21)
!30 = !DILocation(line: 5, column: 3, scope: !21)
!31 = !DILocation(line: 6, column: 1, scope: !21)
!32 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !22, file: !22, line: 8, type: !23, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!33 = !DILocalVariable(name: "p", arg: 1, scope: !32, file: !22, line: 8, type: !25)
!34 = !DILocation(line: 8, column: 25, scope: !32)
!35 = !DILocalVariable(name: "q", arg: 2, scope: !32, file: !22, line: 8, type: !25)
!36 = !DILocation(line: 8, column: 34, scope: !32)
!37 = !DILocation(line: 9, column: 3, scope: !32)
!38 = !DILocation(line: 10, column: 1, scope: !32)
!39 = distinct !DISubprogram(name: "MAYALIAS", scope: !22, file: !22, line: 12, type: !23, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!40 = !DILocalVariable(name: "p", arg: 1, scope: !39, file: !22, line: 12, type: !25)
!41 = !DILocation(line: 12, column: 21, scope: !39)
!42 = !DILocalVariable(name: "q", arg: 2, scope: !39, file: !22, line: 12, type: !25)
!43 = !DILocation(line: 12, column: 30, scope: !39)
!44 = !DILocation(line: 13, column: 3, scope: !39)
!45 = !DILocation(line: 14, column: 1, scope: !39)
!46 = distinct !DISubprogram(name: "NOALIAS", scope: !22, file: !22, line: 16, type: !23, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!47 = !DILocalVariable(name: "p", arg: 1, scope: !46, file: !22, line: 16, type: !25)
!48 = !DILocation(line: 16, column: 20, scope: !46)
!49 = !DILocalVariable(name: "q", arg: 2, scope: !46, file: !22, line: 16, type: !25)
!50 = !DILocation(line: 16, column: 29, scope: !46)
!51 = !DILocation(line: 17, column: 3, scope: !46)
!52 = !DILocation(line: 18, column: 1, scope: !46)
!53 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !22, file: !22, line: 20, type: !23, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!54 = !DILocalVariable(name: "p", arg: 1, scope: !53, file: !22, line: 20, type: !25)
!55 = !DILocation(line: 20, column: 34, scope: !53)
!56 = !DILocalVariable(name: "q", arg: 2, scope: !53, file: !22, line: 20, type: !25)
!57 = !DILocation(line: 20, column: 43, scope: !53)
!58 = !DILocation(line: 21, column: 3, scope: !53)
!59 = !DILocation(line: 22, column: 1, scope: !53)
!60 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !22, file: !22, line: 24, type: !23, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!61 = !DILocalVariable(name: "p", arg: 1, scope: !60, file: !22, line: 24, type: !25)
!62 = !DILocation(line: 24, column: 33, scope: !60)
!63 = !DILocalVariable(name: "q", arg: 2, scope: !60, file: !22, line: 24, type: !25)
!64 = !DILocation(line: 24, column: 42, scope: !60)
!65 = !DILocation(line: 25, column: 3, scope: !60)
!66 = !DILocation(line: 26, column: 1, scope: !60)
!67 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !22, file: !22, line: 29, type: !68, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!68 = !DISubroutineType(types: !69)
!69 = !{!25, !14}
!70 = !DILocalVariable(name: "n", arg: 1, scope: !67, file: !22, line: 29, type: !14)
!71 = !DILocation(line: 29, column: 22, scope: !67)
!72 = !DILocation(line: 30, column: 17, scope: !67)
!73 = !DILocation(line: 30, column: 10, scope: !67)
!74 = !DILocation(line: 30, column: 3, scope: !67)
!75 = distinct !DISubprogram(name: "PLKMALLOC", scope: !22, file: !22, line: 33, type: !68, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!76 = !DILocalVariable(name: "n", arg: 1, scope: !75, file: !22, line: 33, type: !14)
!77 = !DILocation(line: 33, column: 21, scope: !75)
!78 = !DILocation(line: 34, column: 17, scope: !75)
!79 = !DILocation(line: 34, column: 10, scope: !75)
!80 = !DILocation(line: 34, column: 3, scope: !75)
!81 = distinct !DISubprogram(name: "NFRMALLOC", scope: !22, file: !22, line: 37, type: !68, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!82 = !DILocalVariable(name: "n", arg: 1, scope: !81, file: !22, line: 37, type: !14)
!83 = !DILocation(line: 37, column: 21, scope: !81)
!84 = !DILocation(line: 38, column: 17, scope: !81)
!85 = !DILocation(line: 38, column: 10, scope: !81)
!86 = !DILocation(line: 38, column: 3, scope: !81)
!87 = distinct !DISubprogram(name: "CLKMALLOC", scope: !22, file: !22, line: 41, type: !68, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!88 = !DILocalVariable(name: "n", arg: 1, scope: !87, file: !22, line: 41, type: !14)
!89 = !DILocation(line: 41, column: 21, scope: !87)
!90 = !DILocation(line: 42, column: 17, scope: !87)
!91 = !DILocation(line: 42, column: 10, scope: !87)
!92 = !DILocation(line: 42, column: 3, scope: !87)
!93 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !22, file: !22, line: 45, type: !68, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!94 = !DILocalVariable(name: "n", arg: 1, scope: !93, file: !22, line: 45, type: !14)
!95 = !DILocation(line: 45, column: 21, scope: !93)
!96 = !DILocation(line: 46, column: 17, scope: !93)
!97 = !DILocation(line: 46, column: 10, scope: !93)
!98 = !DILocation(line: 46, column: 3, scope: !93)
!99 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !22, file: !22, line: 49, type: !68, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!100 = !DILocalVariable(name: "n", arg: 1, scope: !99, file: !22, line: 49, type: !14)
!101 = !DILocation(line: 49, column: 21, scope: !99)
!102 = !DILocation(line: 50, column: 17, scope: !99)
!103 = !DILocation(line: 50, column: 10, scope: !99)
!104 = !DILocation(line: 50, column: 3, scope: !99)
!105 = distinct !DISubprogram(name: "LEAKFN", scope: !22, file: !22, line: 53, type: !68, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!106 = !DILocalVariable(name: "n", arg: 1, scope: !105, file: !22, line: 53, type: !14)
!107 = !DILocation(line: 53, column: 18, scope: !105)
!108 = !DILocation(line: 54, column: 17, scope: !105)
!109 = !DILocation(line: 54, column: 10, scope: !105)
!110 = !DILocation(line: 54, column: 3, scope: !105)
!111 = distinct !DISubprogram(name: "RC_ACCESS", scope: !22, file: !22, line: 63, type: !112, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!112 = !DISubroutineType(types: !113)
!113 = !{null, !14, !14}
!114 = !DILocalVariable(name: "id", arg: 1, scope: !111, file: !22, line: 63, type: !14)
!115 = !DILocation(line: 63, column: 20, scope: !111)
!116 = !DILocalVariable(name: "flags", arg: 2, scope: !111, file: !22, line: 63, type: !14)
!117 = !DILocation(line: 63, column: 28, scope: !111)
!118 = !DILocation(line: 64, column: 3, scope: !111)
!119 = !DILocation(line: 65, column: 1, scope: !111)
!120 = distinct !DISubprogram(name: "CXT_THREAD", scope: !22, file: !22, line: 75, type: !121, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!121 = !DISubroutineType(types: !122)
!122 = !{null, !14, !10}
!123 = !DILocalVariable(name: "thdid", arg: 1, scope: !120, file: !22, line: 75, type: !14)
!124 = !DILocation(line: 75, column: 21, scope: !120)
!125 = !DILocalVariable(name: "cxt", arg: 2, scope: !120, file: !22, line: 75, type: !10)
!126 = !DILocation(line: 75, column: 34, scope: !120)
!127 = !DILocation(line: 77, column: 1, scope: !120)
!128 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !22, file: !22, line: 78, type: !121, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!129 = !DILocalVariable(name: "thdid", arg: 1, scope: !128, file: !22, line: 78, type: !14)
!130 = !DILocation(line: 78, column: 21, scope: !128)
!131 = !DILocalVariable(name: "cxt", arg: 2, scope: !128, file: !22, line: 78, type: !10)
!132 = !DILocation(line: 78, column: 33, scope: !128)
!133 = !DILocation(line: 80, column: 1, scope: !128)
!134 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !22, file: !22, line: 81, type: !135, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!135 = !DISubroutineType(types: !136)
!136 = !{null, !14, !10, !10}
!137 = !DILocalVariable(name: "thdid", arg: 1, scope: !134, file: !22, line: 81, type: !14)
!138 = !DILocation(line: 81, column: 26, scope: !134)
!139 = !DILocalVariable(name: "cxt", arg: 2, scope: !134, file: !22, line: 81, type: !10)
!140 = !DILocation(line: 81, column: 38, scope: !134)
!141 = !DILocalVariable(name: "lev", arg: 3, scope: !134, file: !22, line: 81, type: !10)
!142 = !DILocation(line: 81, column: 49, scope: !134)
!143 = !DILocation(line: 83, column: 1, scope: !134)
!144 = distinct !DISubprogram(name: "LOCK", scope: !22, file: !22, line: 85, type: !145, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!145 = !DISubroutineType(types: !146)
!146 = !{null, !10}
!147 = !DILocalVariable(name: "lockname", arg: 1, scope: !144, file: !22, line: 85, type: !10)
!148 = !DILocation(line: 85, column: 17, scope: !144)
!149 = !DILocation(line: 87, column: 1, scope: !144)
!150 = distinct !DISubprogram(name: "PAUSE", scope: !22, file: !22, line: 89, type: !145, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!151 = !DILocalVariable(name: "str", arg: 1, scope: !150, file: !22, line: 89, type: !10)
!152 = !DILocation(line: 89, column: 18, scope: !150)
!153 = !DILocation(line: 90, column: 18, scope: !150)
!154 = !DILocation(line: 90, column: 3, scope: !150)
!155 = !DILocation(line: 91, column: 3, scope: !150)
!156 = !DILocation(line: 92, column: 3, scope: !150)
!157 = !DILocation(line: 93, column: 1, scope: !150)
!158 = distinct !DISubprogram(name: "deref", scope: !22, file: !22, line: 111, type: !159, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!159 = !DISubroutineType(types: !160)
!160 = !{null}
!161 = !DILocation(line: 111, column: 20, scope: !158)
!162 = distinct !DISubprogram(name: "newNode", scope: !6, file: !6, line: 17, type: !163, scopeLine: 17, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!163 = !DISubroutineType(types: !164)
!164 = !{!4}
!165 = !DILocalVariable(name: "node", scope: !162, file: !6, line: 18, type: !4)
!166 = !DILocation(line: 18, column: 16, scope: !162)
!167 = !DILocation(line: 19, column: 25, scope: !162)
!168 = !DILocation(line: 19, column: 9, scope: !162)
!169 = !DILocation(line: 19, column: 7, scope: !162)
!170 = !DILocation(line: 20, column: 20, scope: !162)
!171 = !DILocation(line: 20, column: 12, scope: !162)
!172 = !DILocation(line: 20, column: 2, scope: !162)
!173 = !DILocation(line: 20, column: 8, scope: !162)
!174 = !DILocation(line: 20, column: 10, scope: !162)
!175 = !DILocation(line: 21, column: 9, scope: !162)
!176 = !DILocation(line: 21, column: 2, scope: !162)
!177 = distinct !DISubprogram(name: "freeNode", scope: !6, file: !6, line: 24, type: !178, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!178 = !DISubroutineType(types: !179)
!179 = !{!14, !4}
!180 = !DILocalVariable(name: "node", arg: 1, scope: !177, file: !6, line: 24, type: !4)
!181 = !DILocation(line: 24, column: 27, scope: !177)
!182 = !DILocation(line: 25, column: 7, scope: !177)
!183 = !DILocation(line: 25, column: 2, scope: !177)
!184 = !DILocation(line: 26, column: 7, scope: !177)
!185 = !DILocation(line: 26, column: 13, scope: !177)
!186 = !DILocation(line: 26, column: 2, scope: !177)
!187 = !DILocation(line: 27, column: 1, scope: !177)
!188 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 29, type: !159, scopeLine: 29, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!189 = !DILocalVariable(name: "root", scope: !188, file: !6, line: 30, type: !4)
!190 = !DILocation(line: 30, column: 15, scope: !188)
!191 = !DILocalVariable(name: "a", scope: !188, file: !6, line: 31, type: !14)
!192 = !DILocation(line: 31, column: 6, scope: !188)
!193 = !DILocation(line: 32, column: 9, scope: !188)
!194 = !DILocation(line: 32, column: 7, scope: !188)
!195 = !DILocation(line: 33, column: 15, scope: !188)
!196 = !DILocation(line: 33, column: 2, scope: !188)
!197 = !DILocation(line: 33, column: 8, scope: !188)
!198 = !DILocation(line: 33, column: 13, scope: !188)
!199 = !DILocation(line: 34, column: 11, scope: !188)
!200 = !DILocation(line: 34, column: 17, scope: !188)
!201 = !DILocation(line: 34, column: 2, scope: !188)
!202 = !DILocation(line: 35, column: 11, scope: !188)
!203 = !DILocation(line: 35, column: 2, scope: !188)
!204 = !DILocation(line: 36, column: 1, scope: !188)
!205 = distinct !DISubprogram(name: "buffer_free", scope: !6, file: !6, line: 38, type: !206, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!206 = !DISubroutineType(types: !207)
!207 = !{null, !208}
!208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!209 = !DILocalVariable(name: "m", arg: 1, scope: !205, file: !6, line: 38, type: !208)
!210 = !DILocation(line: 38, column: 32, scope: !205)
!211 = !DILocation(line: 39, column: 9, scope: !205)
!212 = !DILocation(line: 39, column: 8, scope: !205)
!213 = !DILocation(line: 39, column: 13, scope: !205)
!214 = !DILocation(line: 39, column: 2, scope: !205)
!215 = !DILocation(line: 40, column: 8, scope: !205)
!216 = !DILocation(line: 40, column: 7, scope: !205)
!217 = !DILocation(line: 40, column: 2, scope: !205)
!218 = !DILocation(line: 41, column: 1, scope: !205)
!219 = distinct !DISubprogram(name: "buffer_init", scope: !6, file: !6, line: 43, type: !206, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!220 = !DILocalVariable(name: "x", arg: 1, scope: !219, file: !6, line: 43, type: !208)
!221 = !DILocation(line: 43, column: 32, scope: !219)
!222 = !DILocation(line: 44, column: 23, scope: !219)
!223 = !DILocation(line: 44, column: 4, scope: !219)
!224 = !DILocation(line: 44, column: 3, scope: !219)
!225 = !DILocation(line: 44, column: 8, scope: !219)
!226 = !DILocation(line: 44, column: 12, scope: !219)
!227 = !DILocation(line: 45, column: 1, scope: !219)
!228 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 47, type: !159, scopeLine: 47, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!229 = !DILocalVariable(name: "m", scope: !228, file: !6, line: 48, type: !4)
!230 = !DILocation(line: 48, column: 15, scope: !228)
!231 = !DILocation(line: 49, column: 22, scope: !228)
!232 = !DILocation(line: 49, column: 6, scope: !228)
!233 = !DILocation(line: 49, column: 4, scope: !228)
!234 = !DILocation(line: 50, column: 2, scope: !228)
!235 = !DILocation(line: 51, column: 2, scope: !228)
!236 = !DILocation(line: 52, column: 1, scope: !228)
