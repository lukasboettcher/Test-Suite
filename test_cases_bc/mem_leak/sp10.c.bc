; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp10.c'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp10.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.List = type { %struct.List*, i8*, i32* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !19 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !24, metadata !DIExpression()), !dbg !25
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !26, metadata !DIExpression()), !dbg !27
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !28
  ret void, !dbg !29
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !30 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !31, metadata !DIExpression()), !dbg !32
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !33, metadata !DIExpression()), !dbg !34
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !35
  ret void, !dbg !36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !37 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !38, metadata !DIExpression()), !dbg !39
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !40, metadata !DIExpression()), !dbg !41
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !42
  ret void, !dbg !43
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !44 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !45, metadata !DIExpression()), !dbg !46
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !47, metadata !DIExpression()), !dbg !48
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !49
  ret void, !dbg !50
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !51 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !52, metadata !DIExpression()), !dbg !53
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !54, metadata !DIExpression()), !dbg !55
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !56
  ret void, !dbg !57
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !58 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !59, metadata !DIExpression()), !dbg !60
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !61, metadata !DIExpression()), !dbg !62
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !63
  ret void, !dbg !64
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !65 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !68, metadata !DIExpression()), !dbg !69
  %0 = load i32, i32* %n.addr, align 4, !dbg !70
  %conv = sext i32 %0 to i64, !dbg !70
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !71
  ret i8* %call, !dbg !72
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !73 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !74, metadata !DIExpression()), !dbg !75
  %0 = load i32, i32* %n.addr, align 4, !dbg !76
  %conv = sext i32 %0 to i64, !dbg !76
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !77
  ret i8* %call, !dbg !78
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !79 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !80, metadata !DIExpression()), !dbg !81
  %0 = load i32, i32* %n.addr, align 4, !dbg !82
  %conv = sext i32 %0 to i64, !dbg !82
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !83
  ret i8* %call, !dbg !84
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !85 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !86, metadata !DIExpression()), !dbg !87
  %0 = load i32, i32* %n.addr, align 4, !dbg !88
  %conv = sext i32 %0 to i64, !dbg !88
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !89
  ret i8* %call, !dbg !90
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !91 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !92, metadata !DIExpression()), !dbg !93
  %0 = load i32, i32* %n.addr, align 4, !dbg !94
  %conv = sext i32 %0 to i64, !dbg !94
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !95
  ret i8* %call, !dbg !96
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !97 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !98, metadata !DIExpression()), !dbg !99
  %0 = load i32, i32* %n.addr, align 4, !dbg !100
  %conv = sext i32 %0 to i64, !dbg !100
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !101
  ret i8* %call, !dbg !102
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !103 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !104, metadata !DIExpression()), !dbg !105
  %0 = load i32, i32* %n.addr, align 4, !dbg !106
  %conv = sext i32 %0 to i64, !dbg !106
  %call = call noalias i8* @malloc(i64 %conv) #4, !dbg !107
  ret i8* %call, !dbg !108
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !109 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !112, metadata !DIExpression()), !dbg !113
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !114, metadata !DIExpression()), !dbg !115
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !116
  ret void, !dbg !117
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !118 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !121, metadata !DIExpression()), !dbg !122
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !123, metadata !DIExpression()), !dbg !124
  ret void, !dbg !125
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !126 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !127, metadata !DIExpression()), !dbg !128
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !129, metadata !DIExpression()), !dbg !130
  ret void, !dbg !131
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !132 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !135, metadata !DIExpression()), !dbg !136
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !137, metadata !DIExpression()), !dbg !138
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !139, metadata !DIExpression()), !dbg !140
  ret void, !dbg !141
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !142 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !145, metadata !DIExpression()), !dbg !146
  ret void, !dbg !147
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !148 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !149, metadata !DIExpression()), !dbg !150
  %0 = load i8*, i8** %str.addr, align 8, !dbg !151
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !152
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !153
  %call2 = call i32 @getchar(), !dbg !154
  ret void, !dbg !155
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !156 {
entry:
  ret void, !dbg !159
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.List* @newNode() #0 !dbg !160 {
entry:
  %node = alloca %struct.List*, align 8
  call void @llvm.dbg.declare(metadata %struct.List** %node, metadata !163, metadata !DIExpression()), !dbg !164
  %call = call i8* @SAFEMALLOC(i32 24), !dbg !165
  %0 = bitcast i8* %call to %struct.List*, !dbg !166
  store %struct.List* %0, %struct.List** %node, align 8, !dbg !167
  %call1 = call i8* @SAFEMALLOC(i32 4), !dbg !168
  %1 = bitcast i8* %call1 to i32*, !dbg !169
  %2 = load %struct.List*, %struct.List** %node, align 8, !dbg !170
  %a = getelementptr inbounds %struct.List, %struct.List* %2, i32 0, i32 2, !dbg !171
  store i32* %1, i32** %a, align 8, !dbg !172
  %3 = load %struct.List*, %struct.List** %node, align 8, !dbg !173
  ret %struct.List* %3, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @freeNode(%struct.List* %node) #0 !dbg !175 {
entry:
  %retval = alloca i32, align 4
  %node.addr = alloca %struct.List*, align 8
  store %struct.List* %node, %struct.List** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.List** %node.addr, metadata !178, metadata !DIExpression()), !dbg !179
  %0 = load %struct.List*, %struct.List** %node.addr, align 8, !dbg !180
  %1 = bitcast %struct.List* %0 to i8*, !dbg !180
  call void @free(i8* %1) #4, !dbg !181
  %2 = load %struct.List*, %struct.List** %node.addr, align 8, !dbg !182
  %a = getelementptr inbounds %struct.List, %struct.List* %2, i32 0, i32 2, !dbg !183
  %3 = load i32*, i32** %a, align 8, !dbg !183
  %4 = bitcast i32* %3 to i8*, !dbg !182
  call void @free(i8* %4) #4, !dbg !184
  %5 = load i32, i32* %retval, align 4, !dbg !185
  ret i32 %5, !dbg !185
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @foo() #0 !dbg !186 {
entry:
  %root = alloca %struct.List*, align 8
  %a = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.List** %root, metadata !187, metadata !DIExpression()), !dbg !188
  call void @llvm.dbg.declare(metadata i32* %a, metadata !189, metadata !DIExpression()), !dbg !190
  store i32 10, i32* %a, align 4, !dbg !190
  %call = call %struct.List* @newNode(), !dbg !191
  store %struct.List* %call, %struct.List** %root, align 8, !dbg !192
  %call1 = call %struct.List* @newNode(), !dbg !193
  %0 = load %struct.List*, %struct.List** %root, align 8, !dbg !194
  %next = getelementptr inbounds %struct.List, %struct.List* %0, i32 0, i32 0, !dbg !195
  store %struct.List* %call1, %struct.List** %next, align 8, !dbg !196
  %1 = load %struct.List*, %struct.List** %root, align 8, !dbg !197
  %next2 = getelementptr inbounds %struct.List, %struct.List* %1, i32 0, i32 0, !dbg !198
  %2 = load %struct.List*, %struct.List** %next2, align 8, !dbg !198
  %call3 = call i32 @freeNode(%struct.List* %2), !dbg !199
  %3 = load %struct.List*, %struct.List** %root, align 8, !dbg !200
  %call4 = call i32 @freeNode(%struct.List* %3), !dbg !201
  ret void, !dbg !202
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_free(%struct.List** %m) #0 !dbg !203 {
entry:
  %m.addr = alloca %struct.List**, align 8
  store %struct.List** %m, %struct.List*** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.List*** %m.addr, metadata !207, metadata !DIExpression()), !dbg !208
  %0 = load %struct.List**, %struct.List*** %m.addr, align 8, !dbg !209
  %1 = load %struct.List*, %struct.List** %0, align 8, !dbg !210
  %buf = getelementptr inbounds %struct.List, %struct.List* %1, i32 0, i32 1, !dbg !211
  %2 = load i8*, i8** %buf, align 8, !dbg !211
  call void @free(i8* %2) #4, !dbg !212
  %3 = load %struct.List**, %struct.List*** %m.addr, align 8, !dbg !213
  %4 = load %struct.List*, %struct.List** %3, align 8, !dbg !214
  %5 = bitcast %struct.List* %4 to i8*, !dbg !214
  call void @free(i8* %5) #4, !dbg !215
  ret void, !dbg !216
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @buffer_init(%struct.List** %x) #0 !dbg !217 {
entry:
  %x.addr = alloca %struct.List**, align 8
  store %struct.List** %x, %struct.List*** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.List*** %x.addr, metadata !218, metadata !DIExpression()), !dbg !219
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !220
  %0 = load %struct.List**, %struct.List*** %x.addr, align 8, !dbg !221
  %1 = load %struct.List*, %struct.List** %0, align 8, !dbg !222
  %buf = getelementptr inbounds %struct.List, %struct.List* %1, i32 0, i32 1, !dbg !223
  store i8* %call, i8** %buf, align 8, !dbg !224
  ret void, !dbg !225
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 !dbg !226 {
entry:
  %m = alloca %struct.List*, align 8
  call void @llvm.dbg.declare(metadata %struct.List** %m, metadata !227, metadata !DIExpression()), !dbg !228
  %call = call i8* @SAFEMALLOC(i32 24), !dbg !229
  %0 = bitcast i8* %call to %struct.List*, !dbg !230
  store %struct.List* %0, %struct.List** %m, align 8, !dbg !231
  call void @buffer_init(%struct.List** %m), !dbg !232
  call void @buffer_free(%struct.List** %m), !dbg !233
  ret void, !dbg !234
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!15, !16, !17}
!llvm.ident = !{!18}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "Ubuntu clang version 11.0.0-2~ubuntu20.04.1", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp10.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!2 = !{}
!3 = !{!4, !13, !10}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!5 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "List", file: !6, line: 11, size: 192, elements: !7)
!6 = !DIFile(filename: "src/mem_leak/sp10.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!7 = !{!8, !9, !12}
!8 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !5, file: !6, line: 12, baseType: !4, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !5, file: !6, line: 13, baseType: !10, size: 64, offset: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !5, file: !6, line: 14, baseType: !13, size: 64, offset: 128)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!15 = !{i32 7, !"Dwarf Version", i32 4}
!16 = !{i32 2, !"Debug Info Version", i32 3}
!17 = !{i32 1, !"wchar_size", i32 4}
!18 = !{!"Ubuntu clang version 11.0.0-2~ubuntu20.04.1"}
!19 = distinct !DISubprogram(name: "MUSTALIAS", scope: !20, file: !20, line: 4, type: !21, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!20 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!21 = !DISubroutineType(types: !22)
!22 = !{null, !23, !23}
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!24 = !DILocalVariable(name: "p", arg: 1, scope: !19, file: !20, line: 4, type: !23)
!25 = !DILocation(line: 4, column: 22, scope: !19)
!26 = !DILocalVariable(name: "q", arg: 2, scope: !19, file: !20, line: 4, type: !23)
!27 = !DILocation(line: 4, column: 31, scope: !19)
!28 = !DILocation(line: 5, column: 3, scope: !19)
!29 = !DILocation(line: 6, column: 1, scope: !19)
!30 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !20, file: !20, line: 8, type: !21, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!31 = !DILocalVariable(name: "p", arg: 1, scope: !30, file: !20, line: 8, type: !23)
!32 = !DILocation(line: 8, column: 25, scope: !30)
!33 = !DILocalVariable(name: "q", arg: 2, scope: !30, file: !20, line: 8, type: !23)
!34 = !DILocation(line: 8, column: 34, scope: !30)
!35 = !DILocation(line: 9, column: 3, scope: !30)
!36 = !DILocation(line: 10, column: 1, scope: !30)
!37 = distinct !DISubprogram(name: "MAYALIAS", scope: !20, file: !20, line: 12, type: !21, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!38 = !DILocalVariable(name: "p", arg: 1, scope: !37, file: !20, line: 12, type: !23)
!39 = !DILocation(line: 12, column: 21, scope: !37)
!40 = !DILocalVariable(name: "q", arg: 2, scope: !37, file: !20, line: 12, type: !23)
!41 = !DILocation(line: 12, column: 30, scope: !37)
!42 = !DILocation(line: 13, column: 3, scope: !37)
!43 = !DILocation(line: 14, column: 1, scope: !37)
!44 = distinct !DISubprogram(name: "NOALIAS", scope: !20, file: !20, line: 16, type: !21, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!45 = !DILocalVariable(name: "p", arg: 1, scope: !44, file: !20, line: 16, type: !23)
!46 = !DILocation(line: 16, column: 20, scope: !44)
!47 = !DILocalVariable(name: "q", arg: 2, scope: !44, file: !20, line: 16, type: !23)
!48 = !DILocation(line: 16, column: 29, scope: !44)
!49 = !DILocation(line: 17, column: 3, scope: !44)
!50 = !DILocation(line: 18, column: 1, scope: !44)
!51 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !20, file: !20, line: 20, type: !21, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocalVariable(name: "p", arg: 1, scope: !51, file: !20, line: 20, type: !23)
!53 = !DILocation(line: 20, column: 34, scope: !51)
!54 = !DILocalVariable(name: "q", arg: 2, scope: !51, file: !20, line: 20, type: !23)
!55 = !DILocation(line: 20, column: 43, scope: !51)
!56 = !DILocation(line: 21, column: 3, scope: !51)
!57 = !DILocation(line: 22, column: 1, scope: !51)
!58 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !20, file: !20, line: 24, type: !21, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!59 = !DILocalVariable(name: "p", arg: 1, scope: !58, file: !20, line: 24, type: !23)
!60 = !DILocation(line: 24, column: 33, scope: !58)
!61 = !DILocalVariable(name: "q", arg: 2, scope: !58, file: !20, line: 24, type: !23)
!62 = !DILocation(line: 24, column: 42, scope: !58)
!63 = !DILocation(line: 25, column: 3, scope: !58)
!64 = !DILocation(line: 26, column: 1, scope: !58)
!65 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !20, file: !20, line: 29, type: !66, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!66 = !DISubroutineType(types: !67)
!67 = !{!23, !14}
!68 = !DILocalVariable(name: "n", arg: 1, scope: !65, file: !20, line: 29, type: !14)
!69 = !DILocation(line: 29, column: 22, scope: !65)
!70 = !DILocation(line: 30, column: 17, scope: !65)
!71 = !DILocation(line: 30, column: 10, scope: !65)
!72 = !DILocation(line: 30, column: 3, scope: !65)
!73 = distinct !DISubprogram(name: "PLKMALLOC", scope: !20, file: !20, line: 33, type: !66, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!74 = !DILocalVariable(name: "n", arg: 1, scope: !73, file: !20, line: 33, type: !14)
!75 = !DILocation(line: 33, column: 21, scope: !73)
!76 = !DILocation(line: 34, column: 17, scope: !73)
!77 = !DILocation(line: 34, column: 10, scope: !73)
!78 = !DILocation(line: 34, column: 3, scope: !73)
!79 = distinct !DISubprogram(name: "NFRMALLOC", scope: !20, file: !20, line: 37, type: !66, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!80 = !DILocalVariable(name: "n", arg: 1, scope: !79, file: !20, line: 37, type: !14)
!81 = !DILocation(line: 37, column: 21, scope: !79)
!82 = !DILocation(line: 38, column: 17, scope: !79)
!83 = !DILocation(line: 38, column: 10, scope: !79)
!84 = !DILocation(line: 38, column: 3, scope: !79)
!85 = distinct !DISubprogram(name: "CLKMALLOC", scope: !20, file: !20, line: 41, type: !66, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!86 = !DILocalVariable(name: "n", arg: 1, scope: !85, file: !20, line: 41, type: !14)
!87 = !DILocation(line: 41, column: 21, scope: !85)
!88 = !DILocation(line: 42, column: 17, scope: !85)
!89 = !DILocation(line: 42, column: 10, scope: !85)
!90 = !DILocation(line: 42, column: 3, scope: !85)
!91 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !20, file: !20, line: 45, type: !66, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!92 = !DILocalVariable(name: "n", arg: 1, scope: !91, file: !20, line: 45, type: !14)
!93 = !DILocation(line: 45, column: 21, scope: !91)
!94 = !DILocation(line: 46, column: 17, scope: !91)
!95 = !DILocation(line: 46, column: 10, scope: !91)
!96 = !DILocation(line: 46, column: 3, scope: !91)
!97 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !20, file: !20, line: 49, type: !66, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!98 = !DILocalVariable(name: "n", arg: 1, scope: !97, file: !20, line: 49, type: !14)
!99 = !DILocation(line: 49, column: 21, scope: !97)
!100 = !DILocation(line: 50, column: 17, scope: !97)
!101 = !DILocation(line: 50, column: 10, scope: !97)
!102 = !DILocation(line: 50, column: 3, scope: !97)
!103 = distinct !DISubprogram(name: "LEAKFN", scope: !20, file: !20, line: 53, type: !66, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!104 = !DILocalVariable(name: "n", arg: 1, scope: !103, file: !20, line: 53, type: !14)
!105 = !DILocation(line: 53, column: 18, scope: !103)
!106 = !DILocation(line: 54, column: 17, scope: !103)
!107 = !DILocation(line: 54, column: 10, scope: !103)
!108 = !DILocation(line: 54, column: 3, scope: !103)
!109 = distinct !DISubprogram(name: "RC_ACCESS", scope: !20, file: !20, line: 63, type: !110, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!110 = !DISubroutineType(types: !111)
!111 = !{null, !14, !14}
!112 = !DILocalVariable(name: "id", arg: 1, scope: !109, file: !20, line: 63, type: !14)
!113 = !DILocation(line: 63, column: 20, scope: !109)
!114 = !DILocalVariable(name: "flags", arg: 2, scope: !109, file: !20, line: 63, type: !14)
!115 = !DILocation(line: 63, column: 28, scope: !109)
!116 = !DILocation(line: 64, column: 3, scope: !109)
!117 = !DILocation(line: 65, column: 1, scope: !109)
!118 = distinct !DISubprogram(name: "CXT_THREAD", scope: !20, file: !20, line: 75, type: !119, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!119 = !DISubroutineType(types: !120)
!120 = !{null, !14, !10}
!121 = !DILocalVariable(name: "thdid", arg: 1, scope: !118, file: !20, line: 75, type: !14)
!122 = !DILocation(line: 75, column: 21, scope: !118)
!123 = !DILocalVariable(name: "cxt", arg: 2, scope: !118, file: !20, line: 75, type: !10)
!124 = !DILocation(line: 75, column: 34, scope: !118)
!125 = !DILocation(line: 77, column: 1, scope: !118)
!126 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !20, file: !20, line: 78, type: !119, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!127 = !DILocalVariable(name: "thdid", arg: 1, scope: !126, file: !20, line: 78, type: !14)
!128 = !DILocation(line: 78, column: 21, scope: !126)
!129 = !DILocalVariable(name: "cxt", arg: 2, scope: !126, file: !20, line: 78, type: !10)
!130 = !DILocation(line: 78, column: 33, scope: !126)
!131 = !DILocation(line: 80, column: 1, scope: !126)
!132 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !20, file: !20, line: 81, type: !133, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!133 = !DISubroutineType(types: !134)
!134 = !{null, !14, !10, !10}
!135 = !DILocalVariable(name: "thdid", arg: 1, scope: !132, file: !20, line: 81, type: !14)
!136 = !DILocation(line: 81, column: 26, scope: !132)
!137 = !DILocalVariable(name: "cxt", arg: 2, scope: !132, file: !20, line: 81, type: !10)
!138 = !DILocation(line: 81, column: 38, scope: !132)
!139 = !DILocalVariable(name: "lev", arg: 3, scope: !132, file: !20, line: 81, type: !10)
!140 = !DILocation(line: 81, column: 49, scope: !132)
!141 = !DILocation(line: 83, column: 1, scope: !132)
!142 = distinct !DISubprogram(name: "LOCK", scope: !20, file: !20, line: 85, type: !143, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!143 = !DISubroutineType(types: !144)
!144 = !{null, !10}
!145 = !DILocalVariable(name: "lockname", arg: 1, scope: !142, file: !20, line: 85, type: !10)
!146 = !DILocation(line: 85, column: 17, scope: !142)
!147 = !DILocation(line: 87, column: 1, scope: !142)
!148 = distinct !DISubprogram(name: "PAUSE", scope: !20, file: !20, line: 89, type: !143, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!149 = !DILocalVariable(name: "str", arg: 1, scope: !148, file: !20, line: 89, type: !10)
!150 = !DILocation(line: 89, column: 18, scope: !148)
!151 = !DILocation(line: 90, column: 18, scope: !148)
!152 = !DILocation(line: 90, column: 3, scope: !148)
!153 = !DILocation(line: 91, column: 3, scope: !148)
!154 = !DILocation(line: 92, column: 3, scope: !148)
!155 = !DILocation(line: 93, column: 1, scope: !148)
!156 = distinct !DISubprogram(name: "deref", scope: !20, file: !20, line: 111, type: !157, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!157 = !DISubroutineType(types: !158)
!158 = !{null}
!159 = !DILocation(line: 111, column: 20, scope: !156)
!160 = distinct !DISubprogram(name: "newNode", scope: !6, file: !6, line: 17, type: !161, scopeLine: 17, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!161 = !DISubroutineType(types: !162)
!162 = !{!4}
!163 = !DILocalVariable(name: "node", scope: !160, file: !6, line: 18, type: !4)
!164 = !DILocation(line: 18, column: 16, scope: !160)
!165 = !DILocation(line: 19, column: 25, scope: !160)
!166 = !DILocation(line: 19, column: 9, scope: !160)
!167 = !DILocation(line: 19, column: 7, scope: !160)
!168 = !DILocation(line: 20, column: 20, scope: !160)
!169 = !DILocation(line: 20, column: 12, scope: !160)
!170 = !DILocation(line: 20, column: 2, scope: !160)
!171 = !DILocation(line: 20, column: 8, scope: !160)
!172 = !DILocation(line: 20, column: 10, scope: !160)
!173 = !DILocation(line: 21, column: 9, scope: !160)
!174 = !DILocation(line: 21, column: 2, scope: !160)
!175 = distinct !DISubprogram(name: "freeNode", scope: !6, file: !6, line: 24, type: !176, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!176 = !DISubroutineType(types: !177)
!177 = !{!14, !4}
!178 = !DILocalVariable(name: "node", arg: 1, scope: !175, file: !6, line: 24, type: !4)
!179 = !DILocation(line: 24, column: 27, scope: !175)
!180 = !DILocation(line: 25, column: 7, scope: !175)
!181 = !DILocation(line: 25, column: 2, scope: !175)
!182 = !DILocation(line: 26, column: 7, scope: !175)
!183 = !DILocation(line: 26, column: 13, scope: !175)
!184 = !DILocation(line: 26, column: 2, scope: !175)
!185 = !DILocation(line: 27, column: 1, scope: !175)
!186 = distinct !DISubprogram(name: "foo", scope: !6, file: !6, line: 29, type: !157, scopeLine: 29, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!187 = !DILocalVariable(name: "root", scope: !186, file: !6, line: 30, type: !4)
!188 = !DILocation(line: 30, column: 15, scope: !186)
!189 = !DILocalVariable(name: "a", scope: !186, file: !6, line: 31, type: !14)
!190 = !DILocation(line: 31, column: 6, scope: !186)
!191 = !DILocation(line: 32, column: 9, scope: !186)
!192 = !DILocation(line: 32, column: 7, scope: !186)
!193 = !DILocation(line: 33, column: 15, scope: !186)
!194 = !DILocation(line: 33, column: 2, scope: !186)
!195 = !DILocation(line: 33, column: 8, scope: !186)
!196 = !DILocation(line: 33, column: 13, scope: !186)
!197 = !DILocation(line: 34, column: 11, scope: !186)
!198 = !DILocation(line: 34, column: 17, scope: !186)
!199 = !DILocation(line: 34, column: 2, scope: !186)
!200 = !DILocation(line: 35, column: 11, scope: !186)
!201 = !DILocation(line: 35, column: 2, scope: !186)
!202 = !DILocation(line: 36, column: 1, scope: !186)
!203 = distinct !DISubprogram(name: "buffer_free", scope: !6, file: !6, line: 38, type: !204, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!204 = !DISubroutineType(types: !205)
!205 = !{null, !206}
!206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64)
!207 = !DILocalVariable(name: "m", arg: 1, scope: !203, file: !6, line: 38, type: !206)
!208 = !DILocation(line: 38, column: 32, scope: !203)
!209 = !DILocation(line: 39, column: 9, scope: !203)
!210 = !DILocation(line: 39, column: 8, scope: !203)
!211 = !DILocation(line: 39, column: 13, scope: !203)
!212 = !DILocation(line: 39, column: 2, scope: !203)
!213 = !DILocation(line: 40, column: 8, scope: !203)
!214 = !DILocation(line: 40, column: 7, scope: !203)
!215 = !DILocation(line: 40, column: 2, scope: !203)
!216 = !DILocation(line: 41, column: 1, scope: !203)
!217 = distinct !DISubprogram(name: "buffer_init", scope: !6, file: !6, line: 43, type: !204, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!218 = !DILocalVariable(name: "x", arg: 1, scope: !217, file: !6, line: 43, type: !206)
!219 = !DILocation(line: 43, column: 32, scope: !217)
!220 = !DILocation(line: 44, column: 23, scope: !217)
!221 = !DILocation(line: 44, column: 4, scope: !217)
!222 = !DILocation(line: 44, column: 3, scope: !217)
!223 = !DILocation(line: 44, column: 8, scope: !217)
!224 = !DILocation(line: 44, column: 12, scope: !217)
!225 = !DILocation(line: 45, column: 1, scope: !217)
!226 = distinct !DISubprogram(name: "main", scope: !6, file: !6, line: 47, type: !157, scopeLine: 47, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!227 = !DILocalVariable(name: "m", scope: !226, file: !6, line: 48, type: !4)
!228 = !DILocation(line: 48, column: 15, scope: !226)
!229 = !DILocation(line: 49, column: 22, scope: !226)
!230 = !DILocation(line: 49, column: 6, scope: !226)
!231 = !DILocation(line: 49, column: 4, scope: !226)
!232 = !DILocation(line: 50, column: 2, scope: !226)
!233 = !DILocation(line: 51, column: 2, scope: !226)
!234 = !DILocation(line: 52, column: 1, scope: !226)
