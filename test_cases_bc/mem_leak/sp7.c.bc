; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/mem_leak/sp7.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp7.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@G = dso_local global i32* null, align 8, !dbg !0

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 !dbg !16 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !21, metadata !DIExpression()), !dbg !22
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !23, metadata !DIExpression()), !dbg !24
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !25
  ret void, !dbg !26
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 !dbg !27 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !28, metadata !DIExpression()), !dbg !29
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !30, metadata !DIExpression()), !dbg !31
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !32
  ret void, !dbg !33
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 !dbg !34 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !35, metadata !DIExpression()), !dbg !36
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !37, metadata !DIExpression()), !dbg !38
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !39
  ret void, !dbg !40
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 !dbg !41 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !42, metadata !DIExpression()), !dbg !43
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !44, metadata !DIExpression()), !dbg !45
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !46
  ret void, !dbg !47
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 !dbg !48 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !49, metadata !DIExpression()), !dbg !50
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !51, metadata !DIExpression()), !dbg !52
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !53
  ret void, !dbg !54
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 !dbg !55 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !56, metadata !DIExpression()), !dbg !57
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !58, metadata !DIExpression()), !dbg !59
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !60
  ret void, !dbg !61
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 !dbg !62 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !65, metadata !DIExpression()), !dbg !66
  %0 = load i32, i32* %n.addr, align 4, !dbg !67
  %conv = sext i32 %0 to i64, !dbg !67
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !68
  ret i8* %call, !dbg !69
}

; Function Attrs: nounwind
declare dso_local noalias align 16 i8* @malloc(i64) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 !dbg !70 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !71, metadata !DIExpression()), !dbg !72
  %0 = load i32, i32* %n.addr, align 4, !dbg !73
  %conv = sext i32 %0 to i64, !dbg !73
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !74
  ret i8* %call, !dbg !75
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 !dbg !76 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !77, metadata !DIExpression()), !dbg !78
  %0 = load i32, i32* %n.addr, align 4, !dbg !79
  %conv = sext i32 %0 to i64, !dbg !79
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !80
  ret i8* %call, !dbg !81
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 !dbg !82 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !83, metadata !DIExpression()), !dbg !84
  %0 = load i32, i32* %n.addr, align 4, !dbg !85
  %conv = sext i32 %0 to i64, !dbg !85
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !86
  ret i8* %call, !dbg !87
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 !dbg !88 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !89, metadata !DIExpression()), !dbg !90
  %0 = load i32, i32* %n.addr, align 4, !dbg !91
  %conv = sext i32 %0 to i64, !dbg !91
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !92
  ret i8* %call, !dbg !93
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 !dbg !94 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !95, metadata !DIExpression()), !dbg !96
  %0 = load i32, i32* %n.addr, align 4, !dbg !97
  %conv = sext i32 %0 to i64, !dbg !97
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !98
  ret i8* %call, !dbg !99
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 !dbg !100 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !101, metadata !DIExpression()), !dbg !102
  %0 = load i32, i32* %n.addr, align 4, !dbg !103
  %conv = sext i32 %0 to i64, !dbg !103
  %call = call noalias align 16 i8* @malloc(i64 %conv) #4, !dbg !104
  ret i8* %call, !dbg !105
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 !dbg !106 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !109, metadata !DIExpression()), !dbg !110
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !111, metadata !DIExpression()), !dbg !112
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)), !dbg !113
  ret void, !dbg !114
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 !dbg !115 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !120, metadata !DIExpression()), !dbg !121
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !122, metadata !DIExpression()), !dbg !123
  ret void, !dbg !124
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 !dbg !125 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !126, metadata !DIExpression()), !dbg !127
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !128, metadata !DIExpression()), !dbg !129
  ret void, !dbg !130
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 !dbg !131 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %thdid.addr, metadata !134, metadata !DIExpression()), !dbg !135
  store i8* %cxt, i8** %cxt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cxt.addr, metadata !136, metadata !DIExpression()), !dbg !137
  store i8* %lev, i8** %lev.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lev.addr, metadata !138, metadata !DIExpression()), !dbg !139
  ret void, !dbg !140
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 !dbg !141 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lockname.addr, metadata !144, metadata !DIExpression()), !dbg !145
  ret void, !dbg !146
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 !dbg !147 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %str.addr, metadata !148, metadata !DIExpression()), !dbg !149
  %0 = load i8*, i8** %str.addr, align 8, !dbg !150
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0), !dbg !151
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0)), !dbg !152
  %call2 = call i32 @getchar(), !dbg !153
  ret void, !dbg !154
}

declare dso_local i32 @getchar() #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 !dbg !155 {
entry:
  ret void, !dbg !158
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @make_global() #0 !dbg !159 {
entry:
  ret i32* bitcast (i32** @G to i32*), !dbg !161
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ResourceLeak_TC07(i32* %p) #0 !dbg !162 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca i32*, align 8
  %gp = alloca i32**, align 8
  store i32* %p, i32** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %p.addr, metadata !165, metadata !DIExpression()), !dbg !166
  call void @llvm.dbg.declare(metadata i32*** %gp, metadata !167, metadata !DIExpression()), !dbg !169
  %call = call i32* @make_global(), !dbg !170
  %0 = bitcast i32* %call to i32**, !dbg !170
  store i32** %0, i32*** %gp, align 8, !dbg !169
  %1 = load i32*, i32** %p.addr, align 8, !dbg !171
  %2 = load i32**, i32*** %gp, align 8, !dbg !172
  store i32* %1, i32** %2, align 8, !dbg !173
  %3 = load i32, i32* %retval, align 4, !dbg !174
  ret i32 %3, !dbg !174
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !175 {
entry:
  %retval = alloca i32, align 4
  %p = alloca i32*, align 8
  store i32 0, i32* %retval, align 4
  call void @llvm.dbg.declare(metadata i32** %p, metadata !178, metadata !DIExpression()), !dbg !179
  %call = call i8* @SAFEMALLOC(i32 10), !dbg !180
  %0 = bitcast i8* %call to i32*, !dbg !181
  store i32* %0, i32** %p, align 8, !dbg !182
  %1 = load i32*, i32** %p, align 8, !dbg !183
  %call1 = call i32 @ResourceLeak_TC07(i32* %1), !dbg !184
  ret i32 0, !dbg !185
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!10, !11, !12, !13, !14}
!llvm.ident = !{!15}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "G", scope: !2, file: !9, line: 11, type: !6, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 13.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !8, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "/home/runner/work/Test-Suite/Test-Suite/src/mem_leak/sp7.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!4 = !{}
!5 = !{!6}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !{!0}
!9 = !DIFile(filename: "src/mem_leak/sp7.c", directory: "/home/runner/work/Test-Suite/Test-Suite")
!10 = !{i32 7, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{i32 7, !"uwtable", i32 1}
!14 = !{i32 7, !"frame-pointer", i32 2}
!15 = !{!"clang version 13.0.0"}
!16 = distinct !DISubprogram(name: "MUSTALIAS", scope: !17, file: !17, line: 4, type: !18, scopeLine: 4, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!17 = !DIFile(filename: "aliascheck.h", directory: "/home/runner/work/Test-Suite/Test-Suite")
!18 = !DISubroutineType(types: !19)
!19 = !{null, !20, !20}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!21 = !DILocalVariable(name: "p", arg: 1, scope: !16, file: !17, line: 4, type: !20)
!22 = !DILocation(line: 4, column: 22, scope: !16)
!23 = !DILocalVariable(name: "q", arg: 2, scope: !16, file: !17, line: 4, type: !20)
!24 = !DILocation(line: 4, column: 31, scope: !16)
!25 = !DILocation(line: 5, column: 3, scope: !16)
!26 = !DILocation(line: 6, column: 1, scope: !16)
!27 = distinct !DISubprogram(name: "PARTIALALIAS", scope: !17, file: !17, line: 8, type: !18, scopeLine: 8, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!28 = !DILocalVariable(name: "p", arg: 1, scope: !27, file: !17, line: 8, type: !20)
!29 = !DILocation(line: 8, column: 25, scope: !27)
!30 = !DILocalVariable(name: "q", arg: 2, scope: !27, file: !17, line: 8, type: !20)
!31 = !DILocation(line: 8, column: 34, scope: !27)
!32 = !DILocation(line: 9, column: 3, scope: !27)
!33 = !DILocation(line: 10, column: 1, scope: !27)
!34 = distinct !DISubprogram(name: "MAYALIAS", scope: !17, file: !17, line: 12, type: !18, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!35 = !DILocalVariable(name: "p", arg: 1, scope: !34, file: !17, line: 12, type: !20)
!36 = !DILocation(line: 12, column: 21, scope: !34)
!37 = !DILocalVariable(name: "q", arg: 2, scope: !34, file: !17, line: 12, type: !20)
!38 = !DILocation(line: 12, column: 30, scope: !34)
!39 = !DILocation(line: 13, column: 3, scope: !34)
!40 = !DILocation(line: 14, column: 1, scope: !34)
!41 = distinct !DISubprogram(name: "NOALIAS", scope: !17, file: !17, line: 16, type: !18, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!42 = !DILocalVariable(name: "p", arg: 1, scope: !41, file: !17, line: 16, type: !20)
!43 = !DILocation(line: 16, column: 20, scope: !41)
!44 = !DILocalVariable(name: "q", arg: 2, scope: !41, file: !17, line: 16, type: !20)
!45 = !DILocation(line: 16, column: 29, scope: !41)
!46 = !DILocation(line: 17, column: 3, scope: !41)
!47 = !DILocation(line: 18, column: 1, scope: !41)
!48 = distinct !DISubprogram(name: "EXPECTEDFAIL_MAYALIAS", scope: !17, file: !17, line: 20, type: !18, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!49 = !DILocalVariable(name: "p", arg: 1, scope: !48, file: !17, line: 20, type: !20)
!50 = !DILocation(line: 20, column: 34, scope: !48)
!51 = !DILocalVariable(name: "q", arg: 2, scope: !48, file: !17, line: 20, type: !20)
!52 = !DILocation(line: 20, column: 43, scope: !48)
!53 = !DILocation(line: 21, column: 3, scope: !48)
!54 = !DILocation(line: 22, column: 1, scope: !48)
!55 = distinct !DISubprogram(name: "EXPECTEDFAIL_NOALIAS", scope: !17, file: !17, line: 24, type: !18, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!56 = !DILocalVariable(name: "p", arg: 1, scope: !55, file: !17, line: 24, type: !20)
!57 = !DILocation(line: 24, column: 33, scope: !55)
!58 = !DILocalVariable(name: "q", arg: 2, scope: !55, file: !17, line: 24, type: !20)
!59 = !DILocation(line: 24, column: 42, scope: !55)
!60 = !DILocation(line: 25, column: 3, scope: !55)
!61 = !DILocation(line: 26, column: 1, scope: !55)
!62 = distinct !DISubprogram(name: "SAFEMALLOC", scope: !17, file: !17, line: 29, type: !63, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!63 = !DISubroutineType(types: !64)
!64 = !{!20, !7}
!65 = !DILocalVariable(name: "n", arg: 1, scope: !62, file: !17, line: 29, type: !7)
!66 = !DILocation(line: 29, column: 22, scope: !62)
!67 = !DILocation(line: 30, column: 17, scope: !62)
!68 = !DILocation(line: 30, column: 10, scope: !62)
!69 = !DILocation(line: 30, column: 3, scope: !62)
!70 = distinct !DISubprogram(name: "PLKMALLOC", scope: !17, file: !17, line: 33, type: !63, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!71 = !DILocalVariable(name: "n", arg: 1, scope: !70, file: !17, line: 33, type: !7)
!72 = !DILocation(line: 33, column: 21, scope: !70)
!73 = !DILocation(line: 34, column: 17, scope: !70)
!74 = !DILocation(line: 34, column: 10, scope: !70)
!75 = !DILocation(line: 34, column: 3, scope: !70)
!76 = distinct !DISubprogram(name: "NFRMALLOC", scope: !17, file: !17, line: 37, type: !63, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!77 = !DILocalVariable(name: "n", arg: 1, scope: !76, file: !17, line: 37, type: !7)
!78 = !DILocation(line: 37, column: 21, scope: !76)
!79 = !DILocation(line: 38, column: 17, scope: !76)
!80 = !DILocation(line: 38, column: 10, scope: !76)
!81 = !DILocation(line: 38, column: 3, scope: !76)
!82 = distinct !DISubprogram(name: "CLKMALLOC", scope: !17, file: !17, line: 41, type: !63, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!83 = !DILocalVariable(name: "n", arg: 1, scope: !82, file: !17, line: 41, type: !7)
!84 = !DILocation(line: 41, column: 21, scope: !82)
!85 = !DILocation(line: 42, column: 17, scope: !82)
!86 = !DILocation(line: 42, column: 10, scope: !82)
!87 = !DILocation(line: 42, column: 3, scope: !82)
!88 = distinct !DISubprogram(name: "NFRLEAKFP", scope: !17, file: !17, line: 45, type: !63, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!89 = !DILocalVariable(name: "n", arg: 1, scope: !88, file: !17, line: 45, type: !7)
!90 = !DILocation(line: 45, column: 21, scope: !88)
!91 = !DILocation(line: 46, column: 17, scope: !88)
!92 = !DILocation(line: 46, column: 10, scope: !88)
!93 = !DILocation(line: 46, column: 3, scope: !88)
!94 = distinct !DISubprogram(name: "PLKLEAKFP", scope: !17, file: !17, line: 49, type: !63, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!95 = !DILocalVariable(name: "n", arg: 1, scope: !94, file: !17, line: 49, type: !7)
!96 = !DILocation(line: 49, column: 21, scope: !94)
!97 = !DILocation(line: 50, column: 17, scope: !94)
!98 = !DILocation(line: 50, column: 10, scope: !94)
!99 = !DILocation(line: 50, column: 3, scope: !94)
!100 = distinct !DISubprogram(name: "LEAKFN", scope: !17, file: !17, line: 53, type: !63, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!101 = !DILocalVariable(name: "n", arg: 1, scope: !100, file: !17, line: 53, type: !7)
!102 = !DILocation(line: 53, column: 18, scope: !100)
!103 = !DILocation(line: 54, column: 17, scope: !100)
!104 = !DILocation(line: 54, column: 10, scope: !100)
!105 = !DILocation(line: 54, column: 3, scope: !100)
!106 = distinct !DISubprogram(name: "RC_ACCESS", scope: !17, file: !17, line: 63, type: !107, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!107 = !DISubroutineType(types: !108)
!108 = !{null, !7, !7}
!109 = !DILocalVariable(name: "id", arg: 1, scope: !106, file: !17, line: 63, type: !7)
!110 = !DILocation(line: 63, column: 20, scope: !106)
!111 = !DILocalVariable(name: "flags", arg: 2, scope: !106, file: !17, line: 63, type: !7)
!112 = !DILocation(line: 63, column: 28, scope: !106)
!113 = !DILocation(line: 64, column: 3, scope: !106)
!114 = !DILocation(line: 65, column: 1, scope: !106)
!115 = distinct !DISubprogram(name: "CXT_THREAD", scope: !17, file: !17, line: 75, type: !116, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!116 = !DISubroutineType(types: !117)
!117 = !{null, !7, !118}
!118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !119, size: 64)
!119 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!120 = !DILocalVariable(name: "thdid", arg: 1, scope: !115, file: !17, line: 75, type: !7)
!121 = !DILocation(line: 75, column: 21, scope: !115)
!122 = !DILocalVariable(name: "cxt", arg: 2, scope: !115, file: !17, line: 75, type: !118)
!123 = !DILocation(line: 75, column: 34, scope: !115)
!124 = !DILocation(line: 77, column: 1, scope: !115)
!125 = distinct !DISubprogram(name: "TCT_ACCESS", scope: !17, file: !17, line: 78, type: !116, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!126 = !DILocalVariable(name: "thdid", arg: 1, scope: !125, file: !17, line: 78, type: !7)
!127 = !DILocation(line: 78, column: 21, scope: !125)
!128 = !DILocalVariable(name: "cxt", arg: 2, scope: !125, file: !17, line: 78, type: !118)
!129 = !DILocation(line: 78, column: 33, scope: !125)
!130 = !DILocation(line: 80, column: 1, scope: !125)
!131 = distinct !DISubprogram(name: "INTERLEV_ACCESS", scope: !17, file: !17, line: 81, type: !132, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!132 = !DISubroutineType(types: !133)
!133 = !{null, !7, !118, !118}
!134 = !DILocalVariable(name: "thdid", arg: 1, scope: !131, file: !17, line: 81, type: !7)
!135 = !DILocation(line: 81, column: 26, scope: !131)
!136 = !DILocalVariable(name: "cxt", arg: 2, scope: !131, file: !17, line: 81, type: !118)
!137 = !DILocation(line: 81, column: 38, scope: !131)
!138 = !DILocalVariable(name: "lev", arg: 3, scope: !131, file: !17, line: 81, type: !118)
!139 = !DILocation(line: 81, column: 49, scope: !131)
!140 = !DILocation(line: 83, column: 1, scope: !131)
!141 = distinct !DISubprogram(name: "LOCK", scope: !17, file: !17, line: 85, type: !142, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !118}
!144 = !DILocalVariable(name: "lockname", arg: 1, scope: !141, file: !17, line: 85, type: !118)
!145 = !DILocation(line: 85, column: 17, scope: !141)
!146 = !DILocation(line: 87, column: 1, scope: !141)
!147 = distinct !DISubprogram(name: "PAUSE", scope: !17, file: !17, line: 89, type: !142, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!148 = !DILocalVariable(name: "str", arg: 1, scope: !147, file: !17, line: 89, type: !118)
!149 = !DILocation(line: 89, column: 18, scope: !147)
!150 = !DILocation(line: 90, column: 18, scope: !147)
!151 = !DILocation(line: 90, column: 3, scope: !147)
!152 = !DILocation(line: 91, column: 3, scope: !147)
!153 = !DILocation(line: 92, column: 3, scope: !147)
!154 = !DILocation(line: 93, column: 1, scope: !147)
!155 = distinct !DISubprogram(name: "deref", scope: !17, file: !17, line: 111, type: !156, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!156 = !DISubroutineType(types: !157)
!157 = !{null}
!158 = !DILocation(line: 111, column: 20, scope: !155)
!159 = distinct !DISubprogram(name: "make_global", scope: !9, file: !9, line: 13, type: !160, scopeLine: 13, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!160 = !DISubroutineType(types: !5)
!161 = !DILocation(line: 14, column: 4, scope: !159)
!162 = distinct !DISubprogram(name: "ResourceLeak_TC07", scope: !9, file: !9, line: 17, type: !163, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!163 = !DISubroutineType(types: !164)
!164 = !{!7, !6}
!165 = !DILocalVariable(name: "p", arg: 1, scope: !162, file: !9, line: 17, type: !6)
!166 = !DILocation(line: 17, column: 29, scope: !162)
!167 = !DILocalVariable(name: "gp", scope: !162, file: !9, line: 19, type: !168)
!168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!169 = !DILocation(line: 19, column: 10, scope: !162)
!170 = !DILocation(line: 19, column: 15, scope: !162)
!171 = !DILocation(line: 20, column: 12, scope: !162)
!172 = !DILocation(line: 20, column: 7, scope: !162)
!173 = !DILocation(line: 20, column: 10, scope: !162)
!174 = !DILocation(line: 21, column: 1, scope: !162)
!175 = distinct !DISubprogram(name: "main", scope: !9, file: !9, line: 23, type: !176, scopeLine: 24, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!176 = !DISubroutineType(types: !177)
!177 = !{!7}
!178 = !DILocalVariable(name: "p", scope: !175, file: !9, line: 25, type: !6)
!179 = !DILocation(line: 25, column: 9, scope: !175)
!180 = !DILocation(line: 26, column: 19, scope: !175)
!181 = !DILocation(line: 26, column: 11, scope: !175)
!182 = !DILocation(line: 26, column: 9, scope: !175)
!183 = !DILocation(line: 27, column: 23, scope: !175)
!184 = !DILocation(line: 27, column: 4, scope: !175)
!185 = !DILocation(line: 28, column: 7, scope: !175)
