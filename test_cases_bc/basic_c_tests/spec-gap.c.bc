; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/spec-gap.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/spec-gap.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TypHeader = type { %struct.TypHeader** }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@HdFree = dso_local global %struct.TypHeader* null, align 8
@FirstBag = dso_local global %struct.TypHeader** null, align 8
@FreeHandle = dso_local global %struct.TypHeader* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  store i8* %lev, i8** %lev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %call2 = call i32 @getchar()
  ret void
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SyGetmem(i64 %size) #0 {
entry:
  %retval = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8*, i8** %retval, align 8
  ret i8* %0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @IntComm() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.TypHeader* @NewBag() #0 {
entry:
  %needed = alloca i64, align 8
  %d = alloca %struct.TypHeader**, align 8
  %s = alloca %struct.TypHeader**, align 8
  %e = alloca %struct.TypHeader**, align 8
  %h = alloca %struct.TypHeader*, align 8
  %0 = load %struct.TypHeader*, %struct.TypHeader** @HdFree, align 8
  %ptr = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %0, i32 0, i32 0
  %1 = load %struct.TypHeader**, %struct.TypHeader*** %ptr, align 8
  %2 = load i64, i64* %needed, align 8
  %div = udiv i64 %2, 8
  %add.ptr = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %1, i64 %div
  %add.ptr1 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %add.ptr, i64 -1
  store %struct.TypHeader** %add.ptr1, %struct.TypHeader*** %d, align 8
  %3 = load %struct.TypHeader*, %struct.TypHeader** @HdFree, align 8
  %ptr2 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %3, i32 0, i32 0
  %4 = load %struct.TypHeader**, %struct.TypHeader*** %ptr2, align 8
  %add.ptr3 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %4, i64 -1
  store %struct.TypHeader** %add.ptr3, %struct.TypHeader*** %s, align 8
  %5 = load %struct.TypHeader**, %struct.TypHeader*** @FirstBag, align 8
  %add.ptr4 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %5, i64 -1
  store %struct.TypHeader** %add.ptr4, %struct.TypHeader*** %e, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load %struct.TypHeader**, %struct.TypHeader*** %e, align 8
  %7 = load %struct.TypHeader**, %struct.TypHeader*** %s, align 8
  %cmp = icmp ule %struct.TypHeader** %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load %struct.TypHeader**, %struct.TypHeader*** %s, align 8
  %incdec.ptr = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %8, i32 -1
  store %struct.TypHeader** %incdec.ptr, %struct.TypHeader*** %s, align 8
  %9 = load %struct.TypHeader*, %struct.TypHeader** %8, align 8
  %10 = load %struct.TypHeader**, %struct.TypHeader*** %d, align 8
  %incdec.ptr5 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %10, i32 -1
  store %struct.TypHeader** %incdec.ptr5, %struct.TypHeader*** %d, align 8
  store %struct.TypHeader* %9, %struct.TypHeader** %10, align 8
  br label %while.cond, !llvm.loop !2

while.end:                                        ; preds = %while.cond
  %11 = load %struct.TypHeader**, %struct.TypHeader*** %s, align 8
  %12 = load %struct.TypHeader*, %struct.TypHeader** %11, align 8
  %13 = bitcast %struct.TypHeader* %12 to i8*
  call void @NOALIAS(i8* %13, i8* bitcast (void ()* @IntComm to i8*))
  %14 = load %struct.TypHeader*, %struct.TypHeader** @HdFree, align 8
  store %struct.TypHeader* %14, %struct.TypHeader** %h, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %15 = load %struct.TypHeader*, %struct.TypHeader** %h, align 8
  %16 = load %struct.TypHeader**, %struct.TypHeader*** @FirstBag, align 8
  %add.ptr6 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %16, i64 -1
  %17 = bitcast %struct.TypHeader** %add.ptr6 to %struct.TypHeader*
  %cmp7 = icmp ult %struct.TypHeader* %15, %17
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i64, i64* %needed, align 8
  %div8 = udiv i64 %18, 8
  %19 = load %struct.TypHeader*, %struct.TypHeader** %h, align 8
  %ptr9 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %19, i32 0, i32 0
  %20 = load %struct.TypHeader**, %struct.TypHeader*** %ptr9, align 8
  %add.ptr10 = getelementptr inbounds %struct.TypHeader*, %struct.TypHeader** %20, i64 %div8
  store %struct.TypHeader** %add.ptr10, %struct.TypHeader*** %ptr9, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load %struct.TypHeader*, %struct.TypHeader** %h, align 8
  %incdec.ptr11 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %21, i32 1
  store %struct.TypHeader* %incdec.ptr11, %struct.TypHeader** %h, align 8
  br label %for.cond, !llvm.loop !4

for.end:                                          ; preds = %for.cond
  %22 = load %struct.TypHeader*, %struct.TypHeader** @FreeHandle, align 8
  %23 = bitcast %struct.TypHeader* %22 to %struct.TypHeader**
  %24 = load %struct.TypHeader*, %struct.TypHeader** %h, align 8
  %ptr12 = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %24, i32 0, i32 0
  store %struct.TypHeader** %23, %struct.TypHeader*** %ptr12, align 8
  %25 = load %struct.TypHeader*, %struct.TypHeader** %h, align 8
  store %struct.TypHeader* %25, %struct.TypHeader** @FreeHandle, align 8
  %26 = load %struct.TypHeader*, %struct.TypHeader** @FreeHandle, align 8
  ret %struct.TypHeader* %26
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @InstIntFunc(void (...)* %func) #0 {
entry:
  %func.addr = alloca void (...)*, align 8
  %hdDef = alloca %struct.TypHeader*, align 8
  store void (...)* %func, void (...)** %func.addr, align 8
  %call = call %struct.TypHeader* @NewBag()
  store %struct.TypHeader* %call, %struct.TypHeader** %hdDef, align 8
  %0 = load void (...)*, void (...)** %func.addr, align 8
  %1 = load %struct.TypHeader*, %struct.TypHeader** %hdDef, align 8
  %ptr = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %1, i32 0, i32 0
  %2 = load %struct.TypHeader**, %struct.TypHeader*** %ptr, align 8
  %3 = bitcast %struct.TypHeader** %2 to void (...)**
  store void (...)* %0, void (...)** %3, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @InitGasman() #0 {
entry:
  %SyMemory = alloca i64, align 8
  %0 = load i64, i64* %SyMemory, align 8
  %call = call i8* @SyGetmem(i64 %0)
  %1 = bitcast i8* %call to %struct.TypHeader*
  store %struct.TypHeader* %1, %struct.TypHeader** @HdFree, align 8
  %2 = load %struct.TypHeader*, %struct.TypHeader** @FreeHandle, align 8
  %ptr = getelementptr inbounds %struct.TypHeader, %struct.TypHeader* %2, i32 0, i32 0
  %3 = load %struct.TypHeader**, %struct.TypHeader*** %ptr, align 8
  %4 = bitcast %struct.TypHeader** %3 to %struct.TypHeader*
  store %struct.TypHeader* %4, %struct.TypHeader** @FreeHandle, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @InitGasman()
  call void @InstIntFunc(void (...)* bitcast (void ()* @IntComm to void (...)*))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
!4 = distinct !{!4, !3}
