; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/spec-vortex.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/spec-vortex.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Ory = type { i8** }
%struct.Rectangle = type { void (i32*, float*)* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@Theory = dso_local global %struct.Ory* null, align 8
@PartLib01 = dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  store i8* %lev, i8** %lev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %call2 = call i32 @getchar()
  ret void
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Rectangle_draw(i32* %p, float* %q) #0 {
entry:
  %p.addr = alloca i32*, align 8
  %q.addr = alloca float*, align 8
  store i32* %p, i32** %p.addr, align 8
  store float* %q, float** %q.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @Void_ExtendCore(i64* %p) #0 {
entry:
  %retval = alloca i8*, align 8
  %p.addr = alloca i64*, align 8
  store i64* %p, i64** %p.addr, align 8
  %0 = load i8*, i8** %retval, align 8
  ret i8* %0
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CoreMoreCore(i8** %Region) #0 {
entry:
  %Region.addr = alloca i8**, align 8
  %AllocCore1 = alloca i64, align 8
  store i8** %Region, i8*** %Region.addr, align 8
  store i64 0, i64* %AllocCore1, align 8
  %call = call i8* @Void_ExtendCore(i64* %AllocCore1)
  %0 = load i8**, i8*** %Region.addr, align 8
  store i8* %call, i8** %0, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MemNewOry() #0 {
entry:
  %ChunkAddrPtr = alloca i8**, align 8
  %ChunkBlk = alloca i8*, align 8
  store i8** null, i8*** %ChunkAddrPtr, align 8
  %call = call noalias i8* @calloc(i64 1, i64 8) #3
  store i8* %call, i8** %ChunkBlk, align 8
  call void @CoreMoreCore(i8** bitcast (%struct.Ory** @Theory to i8**))
  %0 = load i8*, i8** %ChunkBlk, align 8
  %1 = bitcast i8* %0 to i8**
  %2 = load %struct.Ory*, %struct.Ory** @Theory, align 8
  %ChunkAddr = getelementptr inbounds %struct.Ory, %struct.Ory* %2, i32 0, i32 0
  store i8** %1, i8*** %ChunkAddr, align 8
  %cmp = icmp ne i8** %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.Ory*, %struct.Ory** @Theory, align 8
  %ChunkAddr1 = getelementptr inbounds %struct.Ory, %struct.Ory* %3, i32 0, i32 0
  %4 = load i8**, i8*** %ChunkAddr1, align 8
  store i8** %4, i8*** %ChunkAddrPtr, align 8
  %5 = load i8**, i8*** %ChunkAddrPtr, align 8
  %6 = bitcast i8** %5 to i8*
  %7 = load i8**, i8*** %ChunkAddrPtr, align 8
  store i8* %6, i8** %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MemGetAddr(i32 %Chunk, i32 %index, i8** %Addr) #0 {
entry:
  %Chunk.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %Addr.addr = alloca i8**, align 8
  store i32 %Chunk, i32* %Chunk.addr, align 4
  store i32 %index, i32* %index.addr, align 4
  store i8** %Addr, i8*** %Addr.addr, align 8
  %0 = load %struct.Ory*, %struct.Ory** @Theory, align 8
  %ChunkAddr = getelementptr inbounds %struct.Ory, %struct.Ory* %0, i32 0, i32 0
  %1 = load i8**, i8*** %ChunkAddr, align 8
  %2 = load i32, i32* %Chunk.addr, align 4
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  %4 = bitcast i8* %3 to i8**
  %5 = load i32, i32* %index.addr, align 4
  %idx.ext = zext i32 %5 to i64
  %add.ptr = getelementptr inbounds i8*, i8** %4, i64 %idx.ext
  %6 = load i8*, i8** %add.ptr, align 8
  %7 = load i8**, i8*** %Addr.addr, align 8
  store i8* %6, i8** %7, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Object_GetImage(i8** %This) #0 {
entry:
  %This.addr = alloca i8**, align 8
  %chunk = alloca i32, align 4
  %index = alloca i32, align 4
  store i8** %This, i8*** %This.addr, align 8
  %0 = load i32, i32* %chunk, align 4
  %1 = load i32, i32* %index, align 4
  %2 = load i8**, i8*** %This.addr, align 8
  call void @MemGetAddr(i32 %0, i32 %1, i8** %2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Rectangle_new0() #0 {
entry:
  %Image = alloca %struct.Rectangle*, align 8
  store %struct.Rectangle* null, %struct.Rectangle** %Image, align 8
  %0 = bitcast %struct.Rectangle** %Image to i8**
  call void @Object_GetImage(i8** %0)
  %1 = load %struct.Rectangle*, %struct.Rectangle** %Image, align 8
  %draw = getelementptr inbounds %struct.Rectangle, %struct.Rectangle* %1, i32 0, i32 0
  store void (i32*, float*)* @Rectangle_draw, void (i32*, float*)** %draw, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PartLib_Create(i32** %PrimalObj) #0 {
entry:
  %PrimalObj.addr = alloca i32**, align 8
  store i32** %PrimalObj, i32*** %PrimalObj.addr, align 8
  %0 = load i32**, i32*** %PrimalObj.addr, align 8
  %1 = bitcast i32** %0 to i8**
  call void @Object_GetImage(i8** %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @PartLib_Create(i32** @PartLib01)
  %0 = load i32*, i32** @PartLib01, align 8
  %1 = bitcast i32* %0 to i8*
  call void @NOALIAS(i8* %1, i8* bitcast (void (i32*, float*)* @Rectangle_draw to i8*))
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
