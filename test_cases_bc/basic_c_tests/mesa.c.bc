; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/mesa.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/mesa.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gl_api_table = type { void (i32*, i32, float)* }

@.str = private unnamed_addr constant [44 x i8] c"found uninitialized function pointer at %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @gl_Accum(i32* %x, i32 %y, float %z) #0 {
entry:
  %x.addr = alloca i32*, align 8
  %y.addr = alloca i32, align 4
  %z.addr = alloca float, align 4
  store i32* %x, i32** %x.addr, align 8
  store i32 %y, i32* %y.addr, align 4
  store float %z, float* %z.addr, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @check_pointers(%struct.gl_api_table* %table) #0 {
entry:
  %table.addr = alloca %struct.gl_api_table*, align 8
  %entry1 = alloca i8**, align 8
  %numentries = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.gl_api_table* %table, %struct.gl_api_table** %table.addr, align 8
  store i32 1, i32* %numentries, align 4
  %0 = load %struct.gl_api_table*, %struct.gl_api_table** %table.addr, align 8
  %1 = bitcast %struct.gl_api_table* %0 to i8**
  store i8** %1, i8*** %entry1, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %numentries, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8**, i8*** %entry1, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8*, i8** %4, i64 %idxprom
  %6 = load i8*, i8** %arrayidx, align 8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !2

for.end:                                          ; preds = %for.cond
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_exec_pointers(%struct.gl_api_table* %table) #0 {
entry:
  %table.addr = alloca %struct.gl_api_table*, align 8
  store %struct.gl_api_table* %table, %struct.gl_api_table** %table.addr, align 8
  %0 = load %struct.gl_api_table*, %struct.gl_api_table** %table.addr, align 8
  %Accum = getelementptr inbounds %struct.gl_api_table, %struct.gl_api_table* %0, i32 0, i32 0
  store void (i32*, i32, float)* @gl_Accum, void (i32*, i32, float)** %Accum, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %table = alloca %struct.gl_api_table*, align 8
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @calloc(i64 1, i64 8) #3
  %0 = bitcast i8* %call to %struct.gl_api_table*
  store %struct.gl_api_table* %0, %struct.gl_api_table** %table, align 8
  %1 = load %struct.gl_api_table*, %struct.gl_api_table** %table, align 8
  call void @init_exec_pointers(%struct.gl_api_table* %1)
  %2 = load %struct.gl_api_table*, %struct.gl_api_table** %table, align 8
  call void @check_pointers(%struct.gl_api_table* %2)
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #2

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.mustprogress"}
