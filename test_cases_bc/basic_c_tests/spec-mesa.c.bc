; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/spec-mesa.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/spec-mesa.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.context = type { %struct.api_table, %struct.api_table }
%struct.api_table = type { void (i32*, i32*)*, void (i32*, i32*)*, void (i32*, i32*)* }
%struct.mesa_context = type { %struct.context* }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1
@CC = dso_local global %struct.context* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #4
  ret i8* %call
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #4
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #4
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #4
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #4
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #4
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #4
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  store i8* %lev, i8** %lev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %call2 = call i32 @getchar()
  ret void
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @begin(i32* %p, i32* %q) #0 {
entry:
  %p.addr = alloca i32*, align 8
  %q.addr = alloca i32*, align 8
  store i32* %p, i32** %p.addr, align 8
  store i32* %q, i32** %q.addr, align 8
  %0 = load i32*, i32** %p.addr, align 8
  %1 = bitcast i32* %0 to i8*
  %2 = load i32*, i32** %q.addr, align 8
  %3 = bitcast i32* %2 to i8*
  call void @NOALIAS(i8* %1, i8* %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @end(i32* %p, i32* %q) #0 {
entry:
  %p.addr = alloca i32*, align 8
  %q.addr = alloca i32*, align 8
  store i32* %p, i32** %p.addr, align 8
  store i32* %q, i32** %q.addr, align 8
  %0 = load i32*, i32** %p.addr, align 8
  %1 = bitcast i32* %0 to i8*
  %2 = load i32*, i32** %q.addr, align 8
  %3 = bitcast i32* %2 to i8*
  call void @MAYALIAS(i8* %1, i8* %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @render(i32* %p, i32* %q) #0 {
entry:
  %p.addr = alloca i32*, align 8
  %q.addr = alloca i32*, align 8
  store i32* %p, i32** %p.addr, align 8
  store i32* %q, i32** %q.addr, align 8
  %0 = load i32*, i32** %p.addr, align 8
  %1 = bitcast i32* %0 to i8*
  %2 = load i32*, i32** %q.addr, align 8
  %3 = bitcast i32* %2 to i8*
  call void @MAYALIAS(i8* %1, i8* %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_exec_pointers(%struct.api_table* %table) #0 {
entry:
  %table.addr = alloca %struct.api_table*, align 8
  store %struct.api_table* %table, %struct.api_table** %table.addr, align 8
  %0 = load %struct.api_table*, %struct.api_table** %table.addr, align 8
  %Begin = getelementptr inbounds %struct.api_table, %struct.api_table* %0, i32 0, i32 0
  store void (i32*, i32*)* @begin, void (i32*, i32*)** %Begin, align 8
  %1 = load %struct.api_table*, %struct.api_table** %table.addr, align 8
  %End = getelementptr inbounds %struct.api_table, %struct.api_table* %1, i32 0, i32 1
  store void (i32*, i32*)* @end, void (i32*, i32*)** %End, align 8
  %2 = load %struct.api_table*, %struct.api_table** %table.addr, align 8
  %Render = getelementptr inbounds %struct.api_table, %struct.api_table* %2, i32 0, i32 2
  store void (i32*, i32*)* @render, void (i32*, i32*)** %Render, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @init_api_function(%struct.context* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.context*, align 8
  store %struct.context* %ctx, %struct.context** %ctx.addr, align 8
  %0 = load %struct.context*, %struct.context** %ctx.addr, align 8
  %Exec = getelementptr inbounds %struct.context, %struct.context* %0, i32 0, i32 1
  call void @init_exec_pointers(%struct.api_table* %Exec)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.context* @create_context() #0 {
entry:
  %ctx = alloca %struct.context*, align 8
  %call = call noalias i8* @malloc(i64 48) #4
  %0 = bitcast i8* %call to %struct.context*
  store %struct.context* %0, %struct.context** %ctx, align 8
  %1 = load %struct.context*, %struct.context** %ctx, align 8
  call void @init_api_function(%struct.context* %1)
  %2 = load %struct.context*, %struct.context** %ctx, align 8
  %API = getelementptr inbounds %struct.context, %struct.context* %2, i32 0, i32 0
  %3 = load %struct.context*, %struct.context** %ctx, align 8
  %Exec = getelementptr inbounds %struct.context, %struct.context* %3, i32 0, i32 1
  %4 = bitcast %struct.api_table* %API to i8*
  %5 = bitcast %struct.api_table* %Exec to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false)
  %6 = load %struct.context*, %struct.context** %ctx, align 8
  ret %struct.context* %6
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @change_context(%struct.context* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.context*, align 8
  store %struct.context* %ctx, %struct.context** %ctx.addr, align 8
  %0 = load %struct.context*, %struct.context** %ctx.addr, align 8
  store %struct.context* %0, %struct.context** @CC, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @make_current(%struct.mesa_context* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.mesa_context*, align 8
  store %struct.mesa_context* %ctx, %struct.mesa_context** %ctx.addr, align 8
  %0 = load %struct.mesa_context*, %struct.mesa_context** %ctx.addr, align 8
  %ctx1 = getelementptr inbounds %struct.mesa_context, %struct.mesa_context* %0, i32 0, i32 0
  %1 = load %struct.context*, %struct.context** %ctx1, align 8
  call void @change_context(%struct.context* %1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @draw(i32* %p, i32* %q, i32* %r) #0 {
entry:
  %p.addr = alloca i32*, align 8
  %q.addr = alloca i32*, align 8
  %r.addr = alloca i32*, align 8
  store i32* %p, i32** %p.addr, align 8
  store i32* %q, i32** %q.addr, align 8
  store i32* %r, i32** %r.addr, align 8
  %0 = load %struct.context*, %struct.context** @CC, align 8
  %API = getelementptr inbounds %struct.context, %struct.context* %0, i32 0, i32 0
  %Begin = getelementptr inbounds %struct.api_table, %struct.api_table* %API, i32 0, i32 0
  %1 = load void (i32*, i32*)*, void (i32*, i32*)** %Begin, align 8
  %2 = load i32*, i32** %p.addr, align 8
  %3 = load i32*, i32** %q.addr, align 8
  call void %1(i32* %2, i32* %3)
  %4 = load i32*, i32** %p.addr, align 8
  %tobool = icmp ne i32* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32*, i32** %r.addr, align 8
  store i32* %5, i32** %q.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.context*, %struct.context** @CC, align 8
  %API1 = getelementptr inbounds %struct.context, %struct.context* %6, i32 0, i32 0
  %Render = getelementptr inbounds %struct.api_table, %struct.api_table* %API1, i32 0, i32 2
  %7 = load void (i32*, i32*)*, void (i32*, i32*)** %Render, align 8
  %tobool2 = icmp ne void (i32*, i32*)* %7, null
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %8 = load %struct.context*, %struct.context** @CC, align 8
  %API4 = getelementptr inbounds %struct.context, %struct.context* %8, i32 0, i32 0
  %Render5 = getelementptr inbounds %struct.api_table, %struct.api_table* %API4, i32 0, i32 2
  %9 = load void (i32*, i32*)*, void (i32*, i32*)** %Render5, align 8
  %10 = load i32*, i32** %q.addr, align 8
  %11 = load i32*, i32** %r.addr, align 8
  call void %9(i32* %10, i32* %11)
  %12 = load %struct.context*, %struct.context** @CC, align 8
  %API6 = getelementptr inbounds %struct.context, %struct.context* %12, i32 0, i32 0
  %End = getelementptr inbounds %struct.api_table, %struct.api_table* %API6, i32 0, i32 1
  %13 = load void (i32*, i32*)*, void (i32*, i32*)** %End, align 8
  %14 = load i32*, i32** %p.addr, align 8
  %15 = load i32*, i32** %r.addr, align 8
  call void %13(i32* %14, i32* %15)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %16 = load %struct.context*, %struct.context** @CC, align 8
  %API7 = getelementptr inbounds %struct.context, %struct.context* %16, i32 0, i32 0
  %End8 = getelementptr inbounds %struct.api_table, %struct.api_table* %API7, i32 0, i32 1
  %17 = load void (i32*, i32*)*, void (i32*, i32*)** %End8, align 8
  %18 = load i32*, i32** %q.addr, align 8
  %19 = load i32*, i32** %p.addr, align 8
  call void %17(i32* %18, i32* %19)
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @delete_context(%struct.context* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.context*, align 8
  store %struct.context* %ctx, %struct.context** %ctx.addr, align 8
  %0 = load %struct.context*, %struct.context** %ctx.addr, align 8
  %1 = bitcast %struct.context* %0 to i8*
  call void @free(i8* %1) #4
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  %mesa = alloca %struct.mesa_context*, align 8
  store i32 0, i32* %retval, align 4
  %call = call noalias i8* @malloc(i64 8) #4
  %0 = bitcast i8* %call to %struct.mesa_context*
  store %struct.mesa_context* %0, %struct.mesa_context** %mesa, align 8
  %call1 = call %struct.context* @create_context()
  %1 = load %struct.mesa_context*, %struct.mesa_context** %mesa, align 8
  %ctx = getelementptr inbounds %struct.mesa_context, %struct.mesa_context* %1, i32 0, i32 0
  store %struct.context* %call1, %struct.context** %ctx, align 8
  %2 = load %struct.mesa_context*, %struct.mesa_context** %mesa, align 8
  call void @make_current(%struct.mesa_context* %2)
  call void @draw(i32* %x, i32* %y, i32* %z)
  %3 = load %struct.mesa_context*, %struct.mesa_context** %mesa, align 8
  %ctx2 = getelementptr inbounds %struct.mesa_context, %struct.mesa_context* %3, i32 0, i32 0
  %4 = load %struct.context*, %struct.context** %ctx2, align 8
  call void @delete_context(%struct.context* %4)
  %5 = load %struct.mesa_context*, %struct.mesa_context** %mesa, align 8
  %6 = bitcast %struct.mesa_context* %5 to i8*
  call void @free(i8* %6) #4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
