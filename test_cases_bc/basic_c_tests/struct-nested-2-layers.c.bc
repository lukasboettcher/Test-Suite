; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_c_tests/struct-nested-2-layers.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_c_tests/struct-nested-2-layers.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.OuterStruct = type { %struct.MidStruct, i8, %struct.InnerStruct, i32 }
%struct.MidStruct = type { i32, %struct.InnerStruct, i8 }
%struct.InnerStruct = type { i32, i8 }

@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Press ENTER to continue\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MUSTALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PARTIALALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @MAYALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @NOALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_MAYALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @EXPECTEDFAIL_NOALIAS(i8* %p, i8* %q) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  store i8* %q, i8** %q.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @SAFEMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @CLKMALLOC(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @NFRLEAKFP(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @PLKLEAKFP(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @LEAKFN(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call noalias i8* @malloc(i64 %conv) #3
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @RC_ACCESS(i32 %id, i32 %flags) #0 {
entry:
  %id.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @CXT_THREAD(i32 %thdid, i8* %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @TCT_ACCESS(i32 %thdid, i8* %cxt) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @INTERLEV_ACCESS(i32 %thdid, i8* %cxt, i8* %lev) #0 {
entry:
  %thdid.addr = alloca i32, align 4
  %cxt.addr = alloca i8*, align 8
  %lev.addr = alloca i8*, align 8
  store i32 %thdid, i32* %thdid.addr, align 4
  store i8* %cxt, i8** %cxt.addr, align 8
  store i8* %lev, i8** %lev.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @LOCK(i8* %lockname) #0 {
entry:
  %lockname.addr = alloca i8*, align 8
  store i8* %lockname, i8** %lockname.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @PAUSE(i8* %str) #0 {
entry:
  %str.addr = alloca i8*, align 8
  store i8* %str, i8** %str.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i8* %0)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %call2 = call i32 @getchar()
  ret void
}

declare dso_local i32 @getchar() #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @deref() #0 {
entry:
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %pout = alloca %struct.OuterStruct*, align 8
  %pmid = alloca %struct.MidStruct*, align 8
  %ptmp = alloca %struct.MidStruct*, align 8
  %itmp = alloca %struct.InnerStruct*, align 8
  %pin = alloca %struct.InnerStruct*, align 8
  %s = alloca %struct.OuterStruct, align 4
  store i32 0, i32* %retval, align 4
  store %struct.OuterStruct* %s, %struct.OuterStruct** %pout, align 8
  %out1 = getelementptr inbounds %struct.OuterStruct, %struct.OuterStruct* %s, i32 0, i32 0
  store %struct.MidStruct* %out1, %struct.MidStruct** %pmid, align 8
  %0 = load %struct.OuterStruct*, %struct.OuterStruct** %pout, align 8
  %out11 = getelementptr inbounds %struct.OuterStruct, %struct.OuterStruct* %0, i32 0, i32 0
  store %struct.MidStruct* %out11, %struct.MidStruct** %ptmp, align 8
  %1 = load %struct.MidStruct*, %struct.MidStruct** %ptmp, align 8
  %2 = bitcast %struct.MidStruct* %1 to i8*
  %3 = load %struct.MidStruct*, %struct.MidStruct** %pmid, align 8
  %4 = bitcast %struct.MidStruct* %3 to i8*
  call void @MUSTALIAS(i8* %2, i8* %4)
  %5 = load %struct.MidStruct*, %struct.MidStruct** %ptmp, align 8
  %mid2 = getelementptr inbounds %struct.MidStruct, %struct.MidStruct* %5, i32 0, i32 1
  %in1 = getelementptr inbounds %struct.InnerStruct, %struct.InnerStruct* %mid2, i32 0, i32 0
  %6 = bitcast i32* %in1 to i8*
  %7 = load %struct.MidStruct*, %struct.MidStruct** %pmid, align 8
  %mid22 = getelementptr inbounds %struct.MidStruct, %struct.MidStruct* %7, i32 0, i32 1
  %in13 = getelementptr inbounds %struct.InnerStruct, %struct.InnerStruct* %mid22, i32 0, i32 0
  %8 = bitcast i32* %in13 to i8*
  call void @MUSTALIAS(i8* %6, i8* %8)
  %9 = load %struct.MidStruct*, %struct.MidStruct** %ptmp, align 8
  %mid24 = getelementptr inbounds %struct.MidStruct, %struct.MidStruct* %9, i32 0, i32 1
  %in2 = getelementptr inbounds %struct.InnerStruct, %struct.InnerStruct* %mid24, i32 0, i32 1
  %10 = load %struct.MidStruct*, %struct.MidStruct** %pmid, align 8
  %mid25 = getelementptr inbounds %struct.MidStruct, %struct.MidStruct* %10, i32 0, i32 1
  %in26 = getelementptr inbounds %struct.InnerStruct, %struct.InnerStruct* %mid25, i32 0, i32 1
  call void @MUSTALIAS(i8* %in2, i8* %in26)
  %out17 = getelementptr inbounds %struct.OuterStruct, %struct.OuterStruct* %s, i32 0, i32 0
  %mid28 = getelementptr inbounds %struct.MidStruct, %struct.MidStruct* %out17, i32 0, i32 1
  store %struct.InnerStruct* %mid28, %struct.InnerStruct** %pin, align 8
  %11 = load %struct.OuterStruct*, %struct.OuterStruct** %pout, align 8
  %out19 = getelementptr inbounds %struct.OuterStruct, %struct.OuterStruct* %11, i32 0, i32 0
  %mid210 = getelementptr inbounds %struct.MidStruct, %struct.MidStruct* %out19, i32 0, i32 1
  store %struct.InnerStruct* %mid210, %struct.InnerStruct** %itmp, align 8
  %12 = load %struct.InnerStruct*, %struct.InnerStruct** %itmp, align 8
  %13 = bitcast %struct.InnerStruct* %12 to i8*
  %14 = load %struct.InnerStruct*, %struct.InnerStruct** %pin, align 8
  %15 = bitcast %struct.InnerStruct* %14 to i8*
  call void @MUSTALIAS(i8* %13, i8* %15)
  %16 = load %struct.InnerStruct*, %struct.InnerStruct** %itmp, align 8
  %in111 = getelementptr inbounds %struct.InnerStruct, %struct.InnerStruct* %16, i32 0, i32 0
  %17 = bitcast i32* %in111 to i8*
  %18 = load %struct.InnerStruct*, %struct.InnerStruct** %pin, align 8
  %in112 = getelementptr inbounds %struct.InnerStruct, %struct.InnerStruct* %18, i32 0, i32 0
  %19 = bitcast i32* %in112 to i8*
  call void @MUSTALIAS(i8* %17, i8* %19)
  %20 = load %struct.InnerStruct*, %struct.InnerStruct** %itmp, align 8
  %in213 = getelementptr inbounds %struct.InnerStruct, %struct.InnerStruct* %20, i32 0, i32 1
  %21 = load %struct.InnerStruct*, %struct.InnerStruct** %pin, align 8
  %in214 = getelementptr inbounds %struct.InnerStruct, %struct.InnerStruct* %21, i32 0, i32 1
  call void @MUSTALIAS(i8* %in213, i8* %in214)
  %22 = load %struct.OuterStruct*, %struct.OuterStruct** %pout, align 8
  %out3 = getelementptr inbounds %struct.OuterStruct, %struct.OuterStruct* %22, i32 0, i32 2
  %23 = bitcast %struct.InnerStruct* %out3 to i8*
  %24 = load %struct.InnerStruct*, %struct.InnerStruct** %pin, align 8
  %25 = bitcast %struct.InnerStruct* %24 to i8*
  call void @NOALIAS(i8* %23, i8* %25)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
