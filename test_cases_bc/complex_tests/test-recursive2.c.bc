; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/complex_tests/test-recursive2.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/complex_tests/test-recursive2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.list = type { i32, %struct.list*, %struct.list* }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.list* @construct(%struct.list* %head, i32 %i) #0 {
entry:
  %retval = alloca %struct.list*, align 8
  %head.addr = alloca %struct.list*, align 8
  %i.addr = alloca i32, align 4
  %tmp = alloca %struct.list*, align 8
  store %struct.list* %head, %struct.list** %head.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %cmp = icmp ugt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i8* @malloc(i32 24)
  %1 = bitcast i8* %call to %struct.list*
  store %struct.list* %1, %struct.list** %tmp, align 8
  %2 = load %struct.list*, %struct.list** %tmp, align 8
  %field = getelementptr inbounds %struct.list, %struct.list* %2, i32 0, i32 0
  store i32 0, i32* %field, align 8
  %3 = load %struct.list*, %struct.list** %head.addr, align 8
  %4 = load %struct.list*, %struct.list** %tmp, align 8
  %next = getelementptr inbounds %struct.list, %struct.list* %4, i32 0, i32 1
  store %struct.list* %3, %struct.list** %next, align 8
  %5 = load %struct.list*, %struct.list** %tmp, align 8
  %6 = load %struct.list*, %struct.list** %head.addr, align 8
  %prev = getelementptr inbounds %struct.list, %struct.list* %6, i32 0, i32 2
  store %struct.list* %5, %struct.list** %prev, align 8
  %7 = load %struct.list*, %struct.list** %tmp, align 8
  %prev1 = getelementptr inbounds %struct.list, %struct.list* %7, i32 0, i32 2
  store %struct.list* null, %struct.list** %prev1, align 8
  %8 = load %struct.list*, %struct.list** %tmp, align 8
  %9 = load i32, i32* %i.addr, align 4
  %dec = add i32 %9, -1
  store i32 %dec, i32* %i.addr, align 4
  %call2 = call %struct.list* @construct(%struct.list* %8, i32 %9)
  store %struct.list* %call2, %struct.list** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %10 = load %struct.list*, %struct.list** %head.addr, align 8
  %call3 = call %struct.list* @construct1(%struct.list* %10, i32 10)
  store %struct.list* %call3, %struct.list** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load %struct.list*, %struct.list** %retval, align 8
  ret %struct.list* %11
}

declare dso_local i8* @malloc(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.list* @construct1(%struct.list* %head, i32 %i) #0 {
entry:
  %head.addr = alloca %struct.list*, align 8
  %i.addr = alloca i32, align 4
  %list = alloca %struct.list*, align 8
  store %struct.list* %head, %struct.list** %head.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %cmp = icmp ugt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.list*, %struct.list** %head.addr, align 8
  %2 = load i32, i32* %i.addr, align 4
  %sub = sub i32 %2, 1
  %call = call %struct.list* @construct(%struct.list* %1, i32 %sub)
  store %struct.list* %call, %struct.list** %list, align 8
  %3 = load %struct.list*, %struct.list** %list, align 8
  %4 = load %struct.list*, %struct.list** %head.addr, align 8
  %next = getelementptr inbounds %struct.list, %struct.list* %4, i32 0, i32 1
  store %struct.list* %3, %struct.list** %next, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.list*, %struct.list** %head.addr, align 8
  ret %struct.list* %5
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.list* @walklist(%struct.list* %input) #0 {
entry:
  %input.addr = alloca %struct.list*, align 8
  %head = alloca %struct.list*, align 8
  %curr = alloca %struct.list*, align 8
  store %struct.list* %input, %struct.list** %input.addr, align 8
  %0 = load %struct.list*, %struct.list** %input.addr, align 8
  store %struct.list* %0, %struct.list** %head, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.list*, %struct.list** %head, align 8
  %prev = getelementptr inbounds %struct.list, %struct.list* %1, i32 0, i32 2
  %2 = load %struct.list*, %struct.list** %prev, align 8
  %cmp = icmp ne %struct.list* %2, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct.list*, %struct.list** %head, align 8
  %prev1 = getelementptr inbounds %struct.list, %struct.list* %3, i32 0, i32 2
  %4 = load %struct.list*, %struct.list** %prev1, align 8
  store %struct.list* %4, %struct.list** %head, align 8
  br label %while.cond, !llvm.loop !4

while.end:                                        ; preds = %while.cond
  br label %while.cond2

while.cond2:                                      ; preds = %if.end, %while.end
  %5 = load %struct.list*, %struct.list** %head, align 8
  %next = getelementptr inbounds %struct.list, %struct.list* %5, i32 0, i32 1
  %6 = load %struct.list*, %struct.list** %next, align 8
  %tobool = icmp ne %struct.list* %6, null
  br i1 %tobool, label %while.body3, label %while.end10

while.body3:                                      ; preds = %while.cond2
  %7 = load %struct.list*, %struct.list** %head, align 8
  store %struct.list* %7, %struct.list** %curr, align 8
  %8 = load %struct.list*, %struct.list** %curr, align 8
  %field = getelementptr inbounds %struct.list, %struct.list* %8, i32 0, i32 0
  %9 = load i32, i32* %field, align 8
  %inc = add i32 %9, 1
  store i32 %inc, i32* %field, align 8
  %10 = load %struct.list*, %struct.list** %curr, align 8
  %field4 = getelementptr inbounds %struct.list, %struct.list* %10, i32 0, i32 0
  %11 = load i32, i32* %field4, align 8
  %cmp5 = icmp ugt i32 %11, 5
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body3
  %12 = load %struct.list*, %struct.list** %head, align 8
  %next6 = getelementptr inbounds %struct.list, %struct.list* %12, i32 0, i32 1
  %13 = load %struct.list*, %struct.list** %next6, align 8
  store %struct.list* %13, %struct.list** %head, align 8
  br label %if.end

if.else:                                          ; preds = %while.body3
  %14 = load %struct.list*, %struct.list** %head, align 8
  %prev7 = getelementptr inbounds %struct.list, %struct.list* %14, i32 0, i32 2
  %15 = load %struct.list*, %struct.list** %prev7, align 8
  store %struct.list* %15, %struct.list** %head, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %16 = load %struct.list*, %struct.list** %head, align 8
  %call = call %struct.list* @walklist(%struct.list* %16)
  %17 = load %struct.list*, %struct.list** %head, align 8
  %prev8 = getelementptr inbounds %struct.list, %struct.list* %17, i32 0, i32 2
  store %struct.list* %call, %struct.list** %prev8, align 8
  %18 = load %struct.list*, %struct.list** %curr, align 8
  %19 = load %struct.list*, %struct.list** %head, align 8
  %next9 = getelementptr inbounds %struct.list, %struct.list* %19, i32 0, i32 1
  store %struct.list* %18, %struct.list** %next9, align 8
  br label %while.cond2, !llvm.loop !6

while.end10:                                      ; preds = %while.cond2
  %20 = load %struct.list*, %struct.list** %head, align 8
  ret %struct.list* %20
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %head = alloca %struct.list*, align 8
  %call = call i8* @malloc(i32 24)
  %0 = bitcast i8* %call to %struct.list*
  store %struct.list* %0, %struct.list** %head, align 8
  %1 = load %struct.list*, %struct.list** %head, align 8
  %field = getelementptr inbounds %struct.list, %struct.list* %1, i32 0, i32 0
  store i32 0, i32* %field, align 8
  %2 = load %struct.list*, %struct.list** %head, align 8
  %next = getelementptr inbounds %struct.list, %struct.list* %2, i32 0, i32 1
  store %struct.list* null, %struct.list** %next, align 8
  %3 = load %struct.list*, %struct.list** %head, align 8
  %prev = getelementptr inbounds %struct.list, %struct.list* %3, i32 0, i32 2
  store %struct.list* null, %struct.list** %prev, align 8
  %4 = load %struct.list*, %struct.list** %head, align 8
  %call1 = call %struct.list* @construct(%struct.list* %4, i32 10)
  store %struct.list* %call1, %struct.list** %head, align 8
  %5 = load %struct.list*, %struct.list** %head, align 8
  %call2 = call %struct.list* @walklist(%struct.list* %5)
  store %struct.list* %call2, %struct.list** %head, align 8
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 13.0.0"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
