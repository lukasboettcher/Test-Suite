; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/src/complex_tests/test4.c'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/complex_tests/test4.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @f(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 8
  %c = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  %call = call i8* @malloc(i32 10)
  store i8* %call, i8** %c, align 8
  %0 = load i8*, i8** %a.addr, align 8
  %1 = load i8, i8* %0, align 1
  %2 = load i8*, i8** %c, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %c, align 8
  store i8 %1, i8* %2, align 1
  %3 = load i8*, i8** %c, align 8
  ret i8* %3
}

declare dso_local i8* @malloc(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @g(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  %0 = load i8*, i8** %a.addr, align 8
  store i8 0, i8* %0, align 1
  %1 = load i8*, i8** %a.addr, align 8
  %call = call i8* @f(i8* %1)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @h(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  %0 = load i8*, i8** %a.addr, align 8
  %call = call i8* @g(i8* %0)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @i(i8* %a) #0 {
entry:
  %a.addr = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  %0 = load i8*, i8** %a.addr, align 8
  %call = call i8* @g(i8* %0)
  ret i8* %call
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca [10 x i8], align 1
  %c = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %a, i64 0, i64 0
  %0 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %a, i64 0, i64 0
  %call = call i8* @h(i8* %arraydecay)
  store i8* %call, i8** %c, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %arraydecay2 = getelementptr inbounds [10 x i8], [10 x i8]* %a, i64 0, i64 0
  %call3 = call i8* @i(i8* %arraydecay2)
  store i8* %call3, i8** %c, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %1 = load i32, i32* %retval, align 4
  ret i32 %1
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"Ubuntu clang version 11.0.0-2~ubuntu20.04.1"}
