; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/complex_tests/swap-heap3.c.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/complex_tests/swap-heap3.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ga = dso_local global [20 x i8] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @swap(i8** %a, i8** %b) #0 {
entry:
  %a.addr = alloca i8**, align 8
  %b.addr = alloca i8**, align 8
  %c = alloca i8*, align 8
  store i8** %a, i8*** %a.addr, align 8
  store i8** %b, i8*** %b.addr, align 8
  %0 = load i8**, i8*** %a.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %c, align 8
  %2 = load i8**, i8*** %b.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load i8**, i8*** %a.addr, align 8
  store i8* %3, i8** %4, align 8
  %5 = load i8*, i8** %c, align 8
  %6 = load i8**, i8*** %b.addr, align 8
  store i8* %5, i8** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @mymalloc(i32 %i) #0 {
entry:
  %i.addr = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  %0 = load i32, i32* %i.addr, align 4
  %call = call i8* @malloc(i32 %0)
  ret i8* %call
}

declare dso_local i8* @malloc(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @my_malloc(i32 %i, i8** %ret) #0 {
entry:
  %i.addr = alloca i32, align 4
  %ret.addr = alloca i8**, align 8
  %p = alloca i8*, align 8
  %g = alloca i8*, align 8
  store i32 %i, i32* %i.addr, align 4
  store i8** %ret, i8*** %ret.addr, align 8
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @ga, i64 0, i64 0), i8** %g, align 8
  %0 = load i32, i32* %i.addr, align 4
  %call = call i8* @mymalloc(i32 %0)
  store i8* %call, i8** %p, align 8
  call void @swap(i8** %p, i8** %g)
  %1 = load i8*, i8** %g, align 8
  %2 = load i8**, i8*** %ret.addr, align 8
  store i8* %1, i8** %2, align 8
  %3 = load i8*, i8** %p, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %pa = alloca i8*, align 8
  %pb = alloca i8*, align 8
  %call = call i8* @my_malloc(i32 10, i8** %p1)
  store i8* %call, i8** %p2, align 8
  %call1 = call i8* @my_malloc(i32 20, i8** %p1)
  call void @swap(i8** %p1, i8** %p2)
  %0 = load i8*, i8** %p2, align 8
  store i8* %0, i8** %pa, align 8
  %1 = load i8*, i8** %p1, align 8
  store i8* %1, i8** %pb, align 8
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 13.0.0"}
