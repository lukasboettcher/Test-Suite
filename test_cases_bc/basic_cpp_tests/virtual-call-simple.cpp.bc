; ModuleID = '/home/runner/work/Test-Suite/Test-Suite/test_cases_bc/basic_cpp_tests/virtual-call-simple.cpp.bc'
source_filename = "/home/runner/work/Test-Suite/Test-Suite/src/basic_cpp_tests/virtual-call-simple.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.K = type { i32 (...)** }
%class.F = type { %class.K }

$_ZN1FC2Ev = comdat any

$_ZN1F8getinputEv = comdat any

$_ZN1F3fooEPPc = comdat any

$_ZN1KC2Ev = comdat any

$_ZN1K5faterEv = comdat any

$_ZTV1F = comdat any

$_ZTS1F = comdat any

$_ZTS1K = comdat any

$_ZTI1K = comdat any

$_ZTI1F = comdat any

$_ZTV1K = comdat any

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@_ZTV1F = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTI1F to i8*), i8* bitcast (i8* (%class.K*)* @_ZN1K5faterEv to i8*)] }, comdat, align 8
@_ZTVN10__cxxabiv120__si_class_type_infoE = external dso_local global i8*
@_ZTS1F = linkonce_odr dso_local constant [3 x i8] c"1F\00", comdat, align 1
@_ZTVN10__cxxabiv117__class_type_infoE = external dso_local global i8*
@_ZTS1K = linkonce_odr dso_local constant [3 x i8] c"1K\00", comdat, align 1
@_ZTI1K = linkonce_odr dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZTS1K, i32 0, i32 0) }, comdat, align 8
@_ZTI1F = linkonce_odr dso_local constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @_ZTS1F, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTI1K to i8*) }, comdat, align 8
@_ZTV1K = linkonce_odr dso_local unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTI1K to i8*), i8* bitcast (i8* (%class.K*)* @_ZN1K5faterEv to i8*)] }, comdat, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"fd\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"fdaf\00", align 1

; Function Attrs: noinline norecurse optnone uwtable mustprogress
define dso_local i32 @main() #0 {
entry:
  %k = alloca %class.K*, align 8
  %f = alloca %class.F, align 8
  %a = alloca i8*, align 8
  %q = alloca i8**, align 8
  %p = alloca i8*, align 8
  %r = alloca i8*, align 8
  %call = call noalias nonnull i8* @_Znwm(i64 8) #6
  %0 = bitcast i8* %call to %class.F*
  %1 = bitcast %class.F* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 8, i1 false)
  call void @_ZN1FC2Ev(%class.F* nonnull dereferenceable(8) %0) #7
  %2 = bitcast %class.F* %0 to %class.K*
  store %class.K* %2, %class.K** %k, align 8
  call void @_ZN1FC2Ev(%class.F* nonnull dereferenceable(8) %f) #7
  store i8** %a, i8*** %q, align 8
  %call1 = call i8* @_ZN1F8getinputEv(%class.F* nonnull dereferenceable(8) %f)
  store i8* %call1, i8** %p, align 8
  %3 = load %class.K*, %class.K** %k, align 8
  %4 = bitcast %class.K* %3 to i8* (%class.K*)***
  %vtable = load i8* (%class.K*)**, i8* (%class.K*)*** %4, align 8
  %vfn = getelementptr inbounds i8* (%class.K*)*, i8* (%class.K*)** %vtable, i64 0
  %5 = load i8* (%class.K*)*, i8* (%class.K*)** %vfn, align 8
  %call2 = call i8* %5(%class.K* nonnull dereferenceable(8) %3)
  %6 = load i8*, i8** %p, align 8
  %7 = load i8**, i8*** %q, align 8
  store i8* %6, i8** %7, align 8
  %8 = load i8**, i8*** %q, align 8
  %call3 = call i8* @_ZN1F3fooEPPc(%class.F* nonnull dereferenceable(8) %f, i8** %8)
  store i8* %call3, i8** %r, align 8
  %9 = load i8*, i8** %r, align 8
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %9)
  ret i32 0
}

; Function Attrs: nobuiltin allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1FC2Ev(%class.F* nonnull dereferenceable(8) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %class.F*, align 8
  store %class.F* %this, %class.F** %this.addr, align 8
  %this1 = load %class.F*, %class.F** %this.addr, align 8
  %0 = bitcast %class.F* %this1 to %class.K*
  call void @_ZN1KC2Ev(%class.K* nonnull dereferenceable(8) %0) #7
  %1 = bitcast %class.F* %this1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV1F, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %1, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable mustprogress
define linkonce_odr dso_local i8* @_ZN1F8getinputEv(%class.F* nonnull dereferenceable(8) %this) #4 comdat align 2 {
entry:
  %this.addr = alloca %class.F*, align 8
  store %class.F* %this, %class.F** %this.addr, align 8
  %this1 = load %class.F*, %class.F** %this.addr, align 8
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0)
}

; Function Attrs: noinline nounwind optnone uwtable mustprogress
define linkonce_odr dso_local i8* @_ZN1F3fooEPPc(%class.F* nonnull dereferenceable(8) %this, i8** %q) #4 comdat align 2 {
entry:
  %this.addr = alloca %class.F*, align 8
  %q.addr = alloca i8**, align 8
  %t = alloca i8*, align 8
  store %class.F* %this, %class.F** %this.addr, align 8
  store i8** %q, i8*** %q.addr, align 8
  %this1 = load %class.F*, %class.F** %this.addr, align 8
  %0 = load i8**, i8*** %q.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %t, align 8
  %2 = load i8*, i8** %t, align 8
  ret i8* %2
}

declare dso_local i32 @printf(i8*, ...) #5

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN1KC2Ev(%class.K* nonnull dereferenceable(8) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %class.K*, align 8
  store %class.K* %this, %class.K** %this.addr, align 8
  %this1 = load %class.K*, %class.K** %this.addr, align 8
  %0 = bitcast %class.K* %this1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTV1K, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %0, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable mustprogress
define linkonce_odr dso_local i8* @_ZN1K5faterEv(%class.K* nonnull dereferenceable(8) %this) unnamed_addr #4 comdat align 2 {
entry:
  %this.addr = alloca %class.K*, align 8
  store %class.K* %this, %class.K** %this.addr, align 8
  %this1 = load %class.K*, %class.K** %this.addr, align 8
  ret i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)
}

attributes #0 = { noinline norecurse optnone uwtable mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin allocsize(0) "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #3 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { builtin allocsize(0) }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.0"}
